Exclusive(@On)
#Include "WinbatchFunctions.wbt"
;#Include "C:\Users\rr125952\Desktop\WinBatch\WinbatchFunctions.wbt"
;###############################################################################################################################
;#                                                                                                                             #
;#   Auteur        :    Sylvain Labrie                                                                                         #
;#   But           :    Produire les Avis pour CAA Québec                                                                      #
;#                                                                                                                             #
;#   Version  1    :    Ce Script reçoit et traite 3 trois types de fichiers ZIP.                                              #
;#                                                                                                                             #
;###############################################################################################################################
;#                                                                                                                             #
;#                      PROD_BMAAAAMMJJ1000.zip                                                                                #
;#                          - 285FIRSTBILL.9999                                                                                #
;#                          - 285SALVAGE.9999                                                                                  #
;#                          - 285SALVAGE.9999                                                                                  #
;#                          - avisEbill_AAAAMMJJ.csv                                                                           #
;#                          - PremierAvis_AAAAMMJJ.txt                                                                         #
;#                          - Rate_BM.txt              ---->    Optionnel                                                      #
;#                                                                                                                             #
;#                      * Étapes du traitement                                                                                 #
;#                                                                                                                             #
;#                        1) Valider le contenu du fichier zip                                                                 #
;#                                                                                                                             #
;#                        2) Gestion du fichier Rate_BM.txt                                                                    #
;#                                                                                                                             #
;#                        3) Concatener les 3 fichiers : 285FIRSTBILL.9999  285SALVAGE.9999  285SALVAGE.9999                   #
;#                           en ordre de numéro de membre  dans le fichier RRD_FIRSTBILL_AAAAMMJJ_temp.TXT                     #
;#                                                                                                                             #
;#                        4) Convertir la valeur du numéro de membre, qui contient des espaces, du                             #
;#                           fichier avisEbill_AAAAMMJJ.csv pour créer le fichier EBILL_AAAA-MM-JJ.txt                         #
;#                                                                                                                             #
;#                        5) Conversion des kits qui ont besoin d'etre convertir                                               #
;#                                                                                                                             #
;#                              Fichier en entrée  RRD_FIRSTBILL_AAAAMMJJ_temp.TXT                                             #
;#                              Fichier en sortie  RRD_FIRSTBILL_AAAAMMJJ_final.TXT                                            #
;#                              Changer le numéro de kit a 950 si inscrit Ebill                                                #
;#                              kit 2   -> kit 9 ou kit 101                                                                    #
;#                              kit 9   -> retirer les carte assigner                                                          #
;#                              kit 101 -> retirer les carte assigner                                                          #
;#                              kit 10  -> s'assurer qu'un membres Princ. ou Associer aient une carte #3                       #
;#                              kit 15  -> kit 12                                                                              #
;#                              kit 200 -> kit 400                                                                             #
;#                              kit 201 -> kit 401                                                                             #
;#                                                                                                                             #
;#                        6) Charger en mémoire les valeurs du fichier  RATE_aaaammjjhhmmss.csv                                #
;#                                                                                                                             #
;#                        7) Charger dans une table interne le contenu du fichier PremierAvis_AAAAMMJJ.txt                     #
;#                                                                                                                             #
;#                        8) Première lecture du fichier RRD_FIRSTBILL_AAAAMMJJ_final.TXT pour identifier les membres          #
;#                           avec carte et création d'une table interne SortKey pour contenir ces informations.                #
;#                           Création des fichiers à retourner au Client CAA :                                                 #
;#                             - Principaux_Fichier Ebill_YYYY.MM.DD.csv                                                       #
;#                             - Associes_Fichier Ebill_YYYY.MM.DD.csv                                                         #
;#                             - Courriel_R2_YYYYMMDD.csv.                                                                     #
;#                                                                                                                             #
;#                        9) Assigner un numéro de séquence à chaque entrée de la table interne SortKey, nécessaire pour       #
;#                           l'application  CAAQUE_Notice_Carriers                                                             #
;#                                                                                                                             #
;#                       10) Deuxième lecture du fichier                                                                       #
;#                              Fichier en entrée  RRD_FIRSTBILL_AAAAMMJJ_final.TXT                                            #
;#                              Fichier en sortie  RRD_FIRSTBILL_AAAAMMJJ_final_Ebill.TXT                                      #
;#                                                                                                                             #
;#                              Modifications apportés au contenu du fichier:                                                  #
;#                              Si carte requise, assigner numéro de séquence de la table SortKey à ce membre ainsi que        #
;#                              Member_Msg à être présenté sur le Carrier, et StickerMsg à être présenté sur la carte,         #
;#                              nécessaire pour l'application CAAQUE_Notice_Carriers                                           #
;#                                                                                                                             #
;#                       11) Séparer le fichier RRD_FIRSTBILL_AAAAMMJJ_final_Ebill.TXT en différentes sorties :                #
;#                             - BMYYYYMMDD1000_CE.txt                                                                         #
;#                             - BMYYYYMMDD1000_CF.txt                                                                         #
;#                             - CAA_RRD_FirstBill_9A_YYYYMMDD(AAAAMMJJ)BM.txt                                                 #
;#                             - CAA_RRD_FirstBill_9F_YYYYMMDD(AAAAMMJJ)BM.txt                                                 #
;#                             - CAA_RRD_FirstBill_101A_YYYYMMDD(AAAAMMJJ)BM.txt                                               #
;#                             - CAA_RRD_FirstBill_101F_YYYYMMDD(AAAAMMJJ)BM.txt                                               #
;#                             - CAA_RRD_FirstBill_400A_YYYYMMDD(AAAAMMJJ).txt                                                 #
;#                             - CAA_RRD_FirstBill_400F_YYYYMMDD(AAAAMMJJ).txt                                                 #
;#                             - CAA_RRD_FirstBill_401A_YYYYMMDD(AAAAMMJJ).txt                                                 #
;#                             - CAA_RRD_FirstBill_401F_YYYYMMDD(AAAAMMJJ).txt                                                 #
;#                                                                                                                             #
;#                       12) Composer les Avis avec OpenText à partir des fichiers txt créé à l'étape précédente               #
;#                                                                                                                             #
;#                       13) Création des fichiers de contrôle pour les fichiers BM*.txt                                       #
;#                             - BMYYYYMMDD1000_Control.ctl                                                                    #
;#                                                                                                                             #
;#                       14) Zipper les fichiers                                                                               #
;#                             - PROD_BMYYYYMMDD1234.zip                                                                       #
;#                                                                                                                             #
;#                       15) Déplacer les fichiers zip et Pdfs vers leurs destinations repectives                              #
;#                                                                                                                             #
;#                       16) Récupérer logs(erreur(s)/succès et rapport de reconciliation et envoyer par mail)                 #
;#                                                                                                                             #
;###############################################################################################################################
;#                                                                                                                             #
;#                      PROD_BWAAAAMMJJ1000.zip                                                                                #
;#                          - 285ADHOC.9999                                                                                    #
;#                          - ExpirationsAAAAMMJJ.txt                                                                          #
;#                          - RecrutorAAAAMMJJ.txt                                                                             #
;#                          - Rate_BM.txt              ---->    Optionnel                                                      #
;#                                                                                                                             #
;#                      * Étapes du traitement                                                                                 #
;#                                                                                                                             #
;#                        1) Valider le contenu du fichier zip                                                                 #
;#                                                                                                                             #
;#                        2) Gestion du fichier Rate_BM.txt                                                                    #
;#                                                                                                                             #
;#                        3) Créer le fichier EBILL_AAAA-MM-JJ.txt avec une seul valeur "9999999999999999",                    #
;#                           Requis pour le traitement des membres avec cartes mais pas utilisé pour traiter les membres BW    #
;#                                                                                                                             #
;#                        4) Conversion des kits qui ont besoin d'etre convertir                                               #
;#                                                                                                                             #
;#                              Fichier en entrée  285ADHOC.9999                                                               #
;#                              Fichier en sortie  RRD_BW_AAAAMMJJ_final.TXT                                                   #
;#                              kit 9   -> retirer les carte assigner                                                          #
;#                              kit 101 -> retirer les carte assigner                                                          #
;#                              kit 15  -> kit 12                                                                              #
;#                                                                                                                             #
;#                        5) Première lecture du fichier RRD_BW_AAAAMMJJ_final.TXT pour identifier les membres                 #
;#                           avec carte et création d'une table interne SortKey pour contenir ces informations.                #
;#                                                                                                                             #
;#                        6) Assigner un numéro de séquence à chaque entrée de la table interne SortKey, nécessaire pour       #
;#                           l'application  CAAQUE_Notice_Carriers                                                             #
;#                                                                                                                             #
;#                        7) Deuxième lecture du fichier                                                                       #
;#                              Fichier en entrée  RRD_BW_AAAAMMJJ_final.TXT                                                   #
;#                              Fichier en sortie  RRD_BW_AAAAMMJJ_final_step.TXT                                              #
;#                                                                                                                             #
;#                              Modifications apportés au contenu du fichier:                                                  #
;#                              Si carte requise, assigner numéro de séquence de la table SortKey à ce membre ainsi que        #
;#                              Member_Msg à être présenté sur le Carrier, et StickerMsg à être présenté sur la carte,         #
;#                              nécessaire pour l'application CAAQUE_Notice_Carriers                                           #
;#                                                                                                                             #
;#                        9) Séparer le fichier RRD_BW_AAAAMMJJ_final_step.TXT en différentes sorties :                        #
;#                             - BWYYYYMMDD1000_CE.txt                                                                         #
;#                             - BWYYYYMMDD1000_CF.txt                                                                         #
;#                             - BWYYYYMMDD1000_KE.txt                                                                         #
;#                             - BWYYYYMMDD1000_KF.txt                                                                         #
;#                             - BWYYYYMMDD1000_NE_15A.txt                                                                     #
;#                             - BWYYYYMMDD1000_NE_2A.txt                                                                      #
;#                             - BWYYYYMMDD1000_NF_15F.txt                                                                     #
;#                             - BWYYYYMMDD1000_NF_2F.txt                                                                      #
;#                                                                                                                             #
;#                        10) Composer les Avis avec OpenText à partir des fichiers txt créés à l'étape précédente             #
;#                                                                                                                             #
;#                        11) Création des fichiers de contrôle pour les fichiers BW*.txt                                      #
;#                             - BWYYYYMMDD1000_Control.ctl    BW                                                              #
;#                             - BWYYYYMMDD1000_Control.ctl    BWNoCarriers                                                    #
;#                                                                                                                             #
;#                        12) Zipper les fichiers                                                                              #
;#                             - PROD_BMYYYYMMDD1000.zip                                                                       #
;#                             - PROD_BWNoCarriersYYYYMMDD1000.zip                                                             #
;#                                                                                                                             #
;#                        13) Déplacer les fichiers zip et Pdfs vers leurs destinations respectives                            #
;#                                                                                                                             #
;#                        14) Récupérer logs(erreur(s)/succès et rapport de reconciliation et envoyer par mail)                #
;#                                                                                                                             #
;###############################################################################################################################
;#                                                                                                                             #
;#                      PROD_TBAAAAMMJJ1000.zip                                                                                #
;#                          - 285THIRDBILL.9999                                                                                #
;#                                                                                                                             #
;#                      * Étapes du traitement                                                                                 #
;#                        1) Valider le contenu du fichier zip                                                                 #
;#                                                                                                                             #
;#                        2) Copier le fichier 285THIRDBILL.9999 sous le nom  RRD_B3_AAAAMMJJ_final.TXT                        #
;#                                                                                                                             #
;#                        3) Séparer le fichier RRD_B3_AAAAMMJJ_final.TXT en différentes sorties :                             #
;#                             - PROD_CAA_RRD_ThirdBill_300A_YYYYMMDD(AAAAMMJJ).pdf                                            #
;#                             - PROD_CAA_RRD_ThirdBill_300F_YYYYMMDD(AAAAMMJJ).pdf                                            #
;#                                                                                                                             #
;#                        10) Composer les Avis avec OpenText à partir des fichiers .txt créés à l'étape précédente            #
;#                                                                                                                             #
;#                        13) Déplacer les fichiers Pdfs vers leur destination                                                 #
;#                                                                                                                             #
;#                        14) Récupérer logs(erreur(s)/succès et rapport de reconciliation et envoyer par mail)                #
;#                                                                                                                             #
;#                                                                                                                             #
;###############################################################################################################################

ServiceName = GetMyName()
INI_FILE = ""

If param0 > 0
	INI_FILE = param1
Else
	RegKey = "SYSTEM\CurrentControlSet\Services\%ServiceName%[INIFILE]"

	If RegExistValue(@REGMACHINE, RegKey)
		INI_FILE = RegQueryValue(@REGMACHINE, RegKey)
	EndIf
EndIf

If INI_FILE == "" || INI_FILE == "0"
	Msg = "##### ERROR - Cannot run without a configuration file. Check the registy key [%RegKey%]"
	wntEventWrite("", ServiceName, 65536, 15000, Msg)
	Exit
EndIf

If FilePath(INI_FILE) == ""
	Msg = "##### ERROR - Please specify a path for configuration file [%INI_FILE%]"
	wntEventWrite("", ServiceName, 65536, 15000, Msg)
	Exit
EndIf

If !FileExist(INI_FILE)
	Msg = "##### ERROR - Please specify a configuration file [%INI_FILE%]"
	wntEventWrite("", ServiceName, 65536, 15000, Msg)
	Exit
EndIf


;Read MAIN section in the INI file
LOG_DIR = IniReadPvt("MAIN", "LOG_DIR", "", INI_FILE)
LOG_BACKUP_DIR = IniReadPvt("MAIN", "LOG_BACKUP_DIR", "", INI_FILE)
LOG_FILE = IniReadPvt("MAIN", "LOG_FILE", "", INI_FILE)
LOG_FILE_MAX_SIZE = IniReadPvt("MAIN", "LOG_FILE_MAX_SIZE", "", INI_FILE)
LOG_FILE_MAX_COUNT = IniReadPvt("MAIN", "LOG_FILE_MAX_COUNT", "", INI_FILE)
INPUT_DIR = IniReadPvt("MAIN", "INPUT_DIR", "", INI_FILE)
OUTPUT_DIR = IniReadPvt("MAIN", "OUTPUT_DIR", "", INI_FILE)
SFTP_CAA_DIR = IniReadPvt("MAIN", "SFTP_CAA_DIR", "", INI_FILE)
SFTP_VIPOND_DIR = IniReadPvt("MAIN", "SFTP_VIPOND_DIR", "", INI_FILE)
PRINT_DIR = IniReadPvt("MAIN", "PRINT_DIR", "", INI_FILE)
ALERT_DIR = IniReadPvt("MAIN", "ALERT_DIR", "", INI_FILE)
RESSOURCES_DIR = IniReadPvt("MAIN", "RESSOURCES_DIR", "", INI_FILE)
RUN_CODE = IniReadPvt("MAIN", "RUN_CODE", "", INI_FILE)
NOTICE_PIOE_PREFIX = IniReadPvt("MAIN", "NOTICE_PIOE_PREFIX", "", INI_FILE)
CARRIER_PIOE_PREFIX = IniReadPvt("MAIN", "CARRIER_PIOE_PREFIX", "", INI_FILE)
WAIT_TIME = IniReadPvt("MAIN", "WAIT_TIME", "", INI_FILE)

;Read DEBUG section in the INI file
SERVICE_ON_OFF            = IniReadPvt("DEBUG", "SERVICE_ON_OFF", "", INI_FILE)
CSR_ON_OFF                = IniReadPvt("DEBUG", "CSR_ON_OFF", "", INI_FILE)
SFTP_ON_OFF               = IniReadPvt("DEBUG", "SFTP_ON_OFF", "", INI_FILE)
PRINT_ON_OFF              = IniReadPvt("DEBUG", "PRINT_ON_OFF", "", INI_FILE)
ALERT_ON_OFF              = IniReadPvt("DEBUG", "ALERT_ON_OFF", "", INI_FILE)
DELETE_FILES_ON_OFF       = IniReadPvt("DEBUG", "DELETE_FILES_ON_OFF", "", INI_FILE)
PRODUCE_CAA_FILES_ON_OFF = IniReadPvt("DEBUG", "PRODUCE_CAA_FILES_ON_OFF", "", INI_FILE)
LOG_ON_OFF                = IniReadPvt("DEBUG", "LOG_ON_OFF", "", INI_FILE)                   ;Afficher les logs au besoin (debug)

;Read SERVICE_INFO section in the INI file
SERVER_NAME = IniReadPvt("SERVICE_INFO", "SERVER_NAME", "", INI_FILE)
SERVICE_NAME = IniReadPvt("SERVICE_INFO", "SERVICE_NAME", "", INI_FILE)
ENVIRONMENT_CODE = IniReadPvt("SERVICE_INFO", "ENVIRONMENT_CODE", "", INI_FILE)
SITE_CODE = IniReadPvt("SERVICE_INFO", "SITE_CODE", "", INI_FILE)

;Read EXE section in the INI file
EXE_SORT = IniReadPvt("EXE", "EXE_SORT", "", INI_FILE)
SORT_ARGS = IniReadPvt("EXE", "SORT_ARGS", "", INI_FILE)
EXE_ZIP = IniReadPvt("EXE", "EXE_ZIP", "", INI_FILE)
EXE_UNZIP = IniReadPvt("EXE", "EXE_UNZIP", "", INI_FILE)
EXE_UNZIP_PARAMS = IniReadPvt("EXE", "EXE_UNZIP_PARAMS", "", INI_FILE)
EXE_CPP = IniReadPvt("EXE", "EXE_CPP", "", INI_FILE)
EXE_CMD = "cmd.exe"

;Read EXSTREAM section in the INI file
EXSTREAM_ENGINE            = IniReadPvt("EXSTREAM", "EXSTREAM_ENGINE", "", INI_FILE)
EXSTREAM_CONTROLFILE       = IniReadPvt("EXSTREAM", "EXSTREAM_CONTROLFILE", "", INI_FILE)
EXSTREAM_FILEMAP_INPUT     = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_INPUT", "", INI_FILE)
EXSTREAM_FILEMAP_OUTPUT    = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_OUTPUT", "", INI_FILE)
EXSTREAM_FILEMAP_REF_AGES  = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_REF_AGES", "", INI_FILE)
EXSTREAM_FILEMAP_REF_DATES = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_REF_DATES", "", INI_FILE)
EXSTREAM_FILEMAP_REF_RECRU = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_REF_RECRU", "", INI_FILE)
EXSTREAM_FILEMAP_REF_RATE  = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_REF_RATE", "", INI_FILE)
EXSTREAM_FILEMAP_STAT      = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_STAT", "", INI_FILE)
EXSTREAM_FILEMAP_SORTINDEX = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_SORTINDEX", "", INI_FILE)
EXSTREAM_FILEMAP_SORTDATA  = IniReadPvt("EXSTREAM", "EXSTREAM_FILEMAP_SORTDATA", "", INI_FILE)

;Read EMAIL section in the INI file
EMAIL_ON_OFF = IniReadPvt("EMAIL", "EMAIL_ON_OFF", "", INI_FILE)
EMAIL_DIR = IniReadPvt("EMAIL", "EMAIL_DIR", "", INI_FILE)
EMAIL_FROM = IniReadPvt("EMAIL", "EMAIL_FROM", "", INI_FILE)
EMAIL_TO = IniReadPvt("EMAIL", "EMAIL_TO", "", INI_FILE)
EMAIL_REPORT_TO = IniReadPvt("EMAIL", "EMAIL_REPORT_TO", "", INI_FILE)
EMAIL_ERROR_TO = IniReadPvt("EMAIL", "EMAIL_ERROR_TO", "", INI_FILE)
EMAIL_SIGNATURE = IniReadPvt("EMAIL", "EMAIL_SIGNATURE", "", INI_FILE)
EMAIL_TEL = IniReadPvt("EMAIL", "EMAIL_TEL", "", INI_FILE)
EMAIL_NOTIFICATION = IniReadPvt("EMAIL", "EMAIL_NOTIFICATION", "", INI_FILE)

InitLog(LOG_DIR, LOG_FILE, LOG_FILE_MAX_SIZE, LOG_FILE_MAX_COUNT, LOG_BACKUP_DIR)

Msg = "BEGIN %ServiceName%"
wntEventWrite("", ServiceName, 262144, 15000, Msg)
Log("-----------------------------------------------------------------------------------------------------------------------")
LogInfo(Msg)

LogInfo("Reading values from INI file [%INI_FILE%]")

LogMandatoryEntry("INPUT_DIR", INPUT_DIR)
LogMandatoryEntry("OUTPUT_DIR", OUTPUT_DIR)
LogMandatoryEntry("SFTP_CAA_DIR", SFTP_CAA_DIR)
LogMandatoryEntry("SFTP_VIPOND_DIR", SFTP_VIPOND_DIR)
LogMandatoryEntry("PRINT_DIR", PRINT_DIR)
LogMandatoryEntry("RESSOURCES_DIR", RESSOURCES_DIR)
LogMandatoryEntry("PRODUCE_CAA_FILES_ON_OFF", PRODUCE_CAA_FILES_ON_OFF)


LogMandatoryEntry("SERVER_NAME", SERVER_NAME)
LogMandatoryEntry("SERVICE_NAME", SERVICE_NAME)
LogMandatoryEntry("ENVIRONMENT_CODE", ENVIRONMENT_CODE)
LogMandatoryEntry("SITE_CODE", SITE_CODE)

LogMandatoryEntry("EXE_SORT", EXE_SORT)
LogMandatoryEntry("SORT_ARGS", SORT_ARGS)
LogMandatoryEntry("EXE_ZIP", EXE_ZIP)
LogMandatoryEntry("EXE_UNZIP", EXE_UNZIP)
LogOptionalEntry("EXE_UNZIP_PARAMS", EXE_UNZIP_PARAMS)
LogMandatoryEntry("EXE_CPP", EXE_CPP)

LogMandatoryEntry("EXSTREAM_ENGINE", EXSTREAM_ENGINE)
LogMandatoryEntry("EXSTREAM_CONTROLFILE", EXSTREAM_CONTROLFILE)
LogMandatoryEntry("EXSTREAM_FILEMAP_INPUT", EXSTREAM_FILEMAP_INPUT)
LogMandatoryEntry("EXSTREAM_FILEMAP_OUTPUT", EXSTREAM_FILEMAP_OUTPUT)
LogMandatoryEntry("EXSTREAM_FILEMAP_REF_AGES", EXSTREAM_FILEMAP_REF_AGES)
LogMandatoryEntry("EXSTREAM_FILEMAP_REF_DATES", EXSTREAM_FILEMAP_REF_DATES)
LogMandatoryEntry("EXSTREAM_FILEMAP_REF_RECRU", EXSTREAM_FILEMAP_REF_RECRU)
LogMandatoryEntry("EXSTREAM_FILEMAP_REF_RATE", EXSTREAM_FILEMAP_REF_RATE)
LogMandatoryEntry("EXSTREAM_FILEMAP_STAT", EXSTREAM_FILEMAP_STAT)
LogMandatoryEntry("EXSTREAM_FILEMAP_SORTINDEX", EXSTREAM_FILEMAP_SORTINDEX)
LogMandatoryEntry("EXSTREAM_FILEMAP_SORTDATA", EXSTREAM_FILEMAP_SORTDATA)

LogMandatoryEntry("EMAIL_ON_OFF", EMAIL_ON_OFF)
LogMandatoryEntry("EMAIL_DIR", EMAIL_DIR)
LogMandatoryEntry("EMAIL_FROM", EMAIL_FROM)
LogMandatoryEntry("EMAIL_TO", EMAIL_TO)
LogMandatoryEntry("EMAIL_REPORT_TO", EMAIL_REPORT_TO)
LogMandatoryEntry("EMAIL_ERROR_TO", EMAIL_ERROR_TO)
LogOptionalEntry("EMAIL_SIGNATURE", EMAIL_SIGNATURE)
LogOptionalEntry("EMAIL_TEL", EMAIL_TEL)
LogOptionalEntry("EMAIL_NOTIFICATION", EMAIL_NOTIFICATION)

CreateDir(INPUT_DIR)
CreateDir(OUTPUT_DIR)
CreateDir(SFTP_CAA_DIR)
CreateDir(SFTP_VIPOND_DIR)
CreateDir(PRINT_DIR)
CreateDir(RESSOURCES_DIR)
CreateDir(EMAIL_DIR)

CheckDir(INPUT_DIR)
CheckDir(OUTPUT_DIR)
CheckDir(SFTP_CAA_DIR)
CheckDir(SFTP_VIPOND_DIR)
CheckDir(PRINT_DIR)
CheckDir(RESSOURCES_DIR)
CheckDir(EMAIL_DIR)

CheckFile(EXE_SORT)
CheckFile(EXE_ZIP)
CheckFile(EXE_UNZIP)
CheckFile(EXE_CPP)
CheckFile(EXSTREAM_ENGINE)
CheckFile(EXSTREAM_CONTROLFILE)

;Mise en place de la fonction de correction pour le montant de base regulier
#DefineFunction PrimaryMemberBaseAmt(total_Plus, total_VR, total_PRM, total_PMRV, total_Corpo, CAAQUE_DP_Basic_Amt_Due, CAAQUE_DP_Basic_Amt_Tax)
;	If LOG_ON_OFF == 1 ThenLogInfo("Exécution de 'PrimaryMemberBaseAmt()'")

	aGlb_CV_PRIM_BASIC_AMT_TOT = CAAQUE_DP_Basic_Amt_Due + CAAQUE_DP_Basic_Amt_Tax
	aGlb_m1_total              = aGlb_CV_PRIM_BASIC_AMT_TOT + total_Plus + total_Corpo + total_VR + total_PRM + total_PMRV

	Return aGlb_m1_total
#EndFunction

#DefineFunction AdditionalMemberBaseAmt(total_Plus, total_VR, total_PRM, total_PMRV, total_Corpo, CAAQUE_DA_Basic_Amt_Due, CAAQUE_DA_Basic_Amt_Tax)
;	If LOG_ON_OFF == 1 ThenLogInfo("Exécution de 'AdditionalMemberBaseAmt()'")

	bGlb_CV_PRIM_BASIC_AMT_TOT = CAAQUE_DA_Basic_Amt_Due + CAAQUE_DA_Basic_Amt_Tax
	bGlb_m1_total                = bGlb_CV_PRIM_BASIC_AMT_TOT + total_Plus + total_Corpo + total_VR + total_PRM + total_PMRV
	
	Return bGlb_m1_total
#EndFunction

#DefineFunction Format2Dec(_Montant_)

	If IsNumber(_Montant_)
		If _Montant_ != "0"
			If _Montant_ < "0"
				If StrLen(_Montant_) == 2
					_Fmt_Montant_   =   StrCat("-0.0", StrSub(_Montant_, 2, 1))     
				ElseIf StrLen(_Montant_) == 3
					_Fmt_Montant_   =   StrCat("-0.", StrSub(_Montant_, 2, 2))     
				Else
					_Fmt_Montant_   =   StrCat(StrSub(_Montant_, 1, (Strlen(_Montant_) - 2)) , ".", StrSub(_Montant_, (Strlen(_Montant_) - 1) , 2))     
				EndIf
			Else
				If StrLen(_Montant_) == 1
					_Fmt_Montant_   =   StrCat("0.0", _Montant_)     
				ElseIf StrLen(_Montant_) == 2 
					_Fmt_Montant_   =   StrCat("0.", _Montant_)     
				Else
					_Fmt_Montant_   =   StrCat(StrSub(_Montant_, 1, (Strlen(_Montant_) - 2)) , ".", StrSub(_Montant_, (Strlen(_Montant_) - 1) , 2))     
				EndIf
			EndIf
		Else
			_Fmt_Montant_   =   "0.00"     
		EndIf
	Else
		_Fmt_Montant_   =   "0.00"     
	EndIf

	Return _Fmt_Montant_
#EndFunction

EMAIL_SUBJECT_MAIN = "%SERVER_NAME% | %ENVIRONMENT_CODE%%SITE_CODE% | %SERVICE_NAME%"

	ErrorCount = 0

	if ErrorCount == 0
		;########################################
		;Get file list
		;########################################
		;ErrorCount = 0
	
		FileList      = FileItemize("%INPUT_DIR%\*.zip")
		FileCount     = ItemCount(FileList, @TAB)
		ReceivedFiles = Strcat("Les fichiers INPUT fournis : ", @CRLF)
	
		If FileCount > 0
			LogInfo("[%FileCount%] file(s) found in directory [%INPUT_DIR%\*.zip]")
	
				For IdxUtl = 1 To FileCount
					TmpFileName = ItemExtract(IdxUtl, FileList, @TAB)
					LogInfo ("Files Received [%IdxUtl%] of [%FileCount%] in [%INPUT_DIR%\%TmpFileName%]")
					ReceivedFiles = StrCat(ReceivedFiles, @CRLF, TmpFileName)
				Next
		
				;########################################
				;Email files received
				;########################################
		
				If EMAIL_ON_OFF == 0
					LogInfo("EMAIL_ON_OFF = [%EMAIL_ON_OFF%]")
				Else
					LogInfo("[%FileCount%] file(s) found for reception")
					Msg = "The following files have been received and are being processed / Les fichiers suivants ont été reçus et sont en cours de traitement"
					LogInfo(Msg)
					EMAIL_SUBJECT = "%EMAIL_SUBJECT_MAIN% | Files received / Fichiers Reçus"
					EMAIL_ATTACHMENT = ""
					EMAIL_BODY = StrCat(Msg, @CRLF, @CRLF, ReceivedFiles, @CRLF, @CRLF, EMAIL_SIGNATURE, @CRLF, EMAIL_TEL, @CRLF, @CRLF, EMAIL_NOTIFICATION)
					SendMessage(EMAIL_DIR, EMAIL_FROM, EMAIL_REPORT_TO, "", EMAIL_SUBJECT, EMAIL_BODY, EMAIL_ATTACHMENT, "")
				EndIf
	
			;########################################
			;Create work dir
			;########################################
			For IdxZIP = 1 To FileCount
				ErrorCount = 0
				ErrorMsg = ""
				ReportCount = 0
				KitChgMsg = ""
				ZIP_VALID_FLAG = @True
				;;;
				ech_ =@false
	
				FileName = ItemExtract(IdxZIP, FileList, @TAB)

				ReceivedFiles=""
				ReceivedFiles = Strcat(ReceivedFiles,"Les fichiers INPUT fournis : ", @CRLF)

				If FileExist("%INPUT_DIR%\%FileName%")
					ReceivedFiles = StrCat(ReceivedFiles, @CRLF, FileName)

					Enviro      = ItemExtract(1, FileName, "_")
					Type        = StrSub(ItemExtract(2, FileName, "_"), 1, 2)
					ZipFileDate = StrSub(ItemExtract(2, FileName, "_"), 3, 8)
					Time        = "1234"
					;***
					;Données
					If StrIndexNc(FileName, "BM", 1, @FWDSCAN) && StrIndexNc(FileName, "Ech", 1, @FWDSCAN) == 0 
						ZIP_BM           = @True
						ZIP_BW           = @False
						ZIP_B3           = @False
						ZIP_FileType     = "BM"
					EndIf
	
					If StrIndexNc(FileName, "BW", 1, @FWDSCAN) && StrIndexNc(FileName, "Ech", 1, @FWDSCAN) == 0 
						ZIP_BM           = @False
						ZIP_BW           = @True
						ZIP_B3           = @False
						ZIP_FileType     = "BW"
					EndIf
	
					If StrIndexNc(FileName, "TB", 1, @FWDSCAN) && StrIndexNc(FileName, "Ech", 1, @FWDSCAN) == 0 
						ZIP_BM           = @False
						ZIP_BW           = @False
						ZIP_B3           = @True
						ZIP_FileType     = "BM"
					EndIf
	
					;*****
					;Echantillon
					If StrIndexNc(FileName, "BM", 1, @FWDSCAN) && StrIndexNc(FileName, "Ech", 1, @FWDSCAN) > 0 
						ZIP_BM           = @True
						ZIP_BW           = @False
						ZIP_B3           = @False
						ZIP_FileType     = "BM"
						ech_ = @true
					EndIf
	
					If StrIndexNc(FileName, "BW", 1, @FWDSCAN) && StrIndexNc(FileName, "Ech", 1, @FWDSCAN) > 0 
						ZIP_BM           = @False
						ZIP_BW           = @True
						ZIP_B3           = @False
						ZIP_FileType     = "BW"
						ech_ = @true
					EndIf
	
					If StrIndexNc(FileName, "TB", 1, @FWDSCAN) && StrIndexNc(FileName, "Ech", 1, @FWDSCAN) > 0 
						ZIP_BM           = @False
						ZIP_BW           = @False
						ZIP_B3           = @True
						ZIP_FileType     = "BM"
						ech_ = @true
					EndIf
	
					;*****
	
					Log("-----------------------------------------------------------------------------------------------------------------------")
					LogInfo("START Processing file [%IdxZIP%] of [%FileCount%] [%FileName%]")
	
					DirTimeStamp        = GetDateYYYYMMDDHHMMSS()
	
					WorkDirCurrent      = "%OUTPUT_DIR%\%DirTimeStamp%"
					CreateDir(WorkDirCurrent)
	
					WorkDirCurrentLogs  = "%WorkDirCurrent%\Log"
					CreateDir(WorkDirCurrentLogs)
	
					WorkDirCurrentPrint = "%WorkDirCurrent%\Print"                                         ; Pioe Prefixe Pdf 
					CreateDir(WorkDirCurrentPrint)
	
					If ZIP_BM
	;					BMYYYYMMDD1000.zip and Move to Vipond Ms2kos166 
						WorkDirCurrentBM = "%WorkDirCurrent%\%Type%%ZipFileDate%%Time%"                     ; Will Contain File to zip 
						CreateDir(WorkDirCurrentBM)
					EndIf
	
					If ZIP_BW
	;					BWYYYYMMDD1000.zip and Move to Vipond Ms2kos166
	;					BWNoCarriersYYYYMMDD1000.zip and Move to Vipond Ms2kos166
						WorkDirCurrentBW = "%WorkDirCurrent%\%Type%%ZipFileDate%%Time%"                     ; Will Contain File to zip 
						CreateDir(WorkDirCurrentBW)
						WorkDirCurrentBWNo = "%WorkDirCurrent%\%Type%NoCarriers%ZipFileDate%%Time%"         ; Will Contain File to zip 
						CreateDir(WorkDirCurrentBWNo)
					EndIf
	
					WorkDirCurrentUnzip = "%WorkDirCurrent%\Unzip"                                         ; UnZip Folder
					CreateDir(WorkDirCurrentUnzip)
	
					WorkDirCurrentTXT   = "%WorkDirCurrent%\TXT"                                           ; UnZip Txt
					CreateDir(WorkDirCurrentTXT)
	
					PremAvis_Vide       = "%WorkDirCurrentTXT%\PremierAvis_Vide.txt" 
					Fileput(PremAvis_Vide, " ")
					ExpiryDate_Vide     = "%WorkDirCurrentTXT%\ExpiryDate_Vide.txt" 
					Fileput(ExpiryDate_Vide, " ")
					Recrutor_Vide       = "%WorkDirCurrentTXT%\Recrutor_Vide.txt" 
					Fileput(Recrutor_Vide, " ")
	
					WorkDirCurrentWork  = "%WorkDirCurrent%\Work"                                          ; Work Folder
					CreateDir(WorkDirCurrentWork)
	
					WorkDirCurrentZip   = "%WorkDirCurrent%\Zip"                                           ; Zip File
					CreateDir(WorkDirCurrentZip)
	
					;########################################
					;Move File to Zip Work directory
					;########################################
	
					InputFileName = "%INPUT_DIR%\%FileName%"
					OutputDirName = WorkDirCurrentZip
					FileMoveWithLog(InputFileName, OutputDirName)
					FNDATE        = StrCat(StrSub(ZipFileDate, 1, 4), "-", StrSub(ZipFileDate, 5, 2), "-", StrSub(ZipFileDate, 7, 2))
					FNDATE1       = StrSub(ZipFileDate, 1, 8)
					FNDATE2       = StrCat(StrSub(ZipFileDate, 1, 4), ".", StrSub(ZipFileDate, 5, 2), ".", StrSub(ZipFileDate, 7, 2))
					TDate         = StrCat(StrSub(DirTimeStamp, 1, 4), ".", StrSub(DirTimeStamp, 5, 2), ".", StrSub(DirTimeStamp, 7, 2))
	
					;########################################
					;UnZip file to Unzip directory
					;########################################
	
					InputFileName = "%WorkDirCurrentZip%\%FileName%"
					ExeArgs = "%EXE_UNZIP_PARAMS% %InputFileName% %WorkDirCurrentUnzip%"
					LogInfo("Running Unzip [%EXE_UNZIP%] [%ExeArgs%]")
					RunHideWait(EXE_UNZIP, ExeArgs)
					ReturnCode = IntControl(64, 0, 0, 0, 0)
	
					If ReturnCode == 0
						LogInfo("Unzip [%EXE_UNZIP%] [%ExeArgs%] Return Code [%ReturnCode%]")
					Else
						Msg = "Unzip [%EXE_UNZIP%] [%ExeArgs%] Return Code [%ReturnCode%]"
						LogError(Msg)
						ErrorCount = ErrorCount + 1
						ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
					EndIf
	
					If ErrorCount == 0
						;########################################################
						;looking if Rate_Table is present 
						;########################################################
	
						LogInfo("Looking for file(s) in [%WorkDirCurrentUnzip%\Rate_BM.txt]")
						RateFile = FileItemize("%WorkDirCurrentUnzip%\Rate_BM.txt")
						RateFileCount = ItemCount(RateFile, @TAB)
	
						If RateFileCount != 0
							RESSOURCES_ARCHIVE_DIR  = "%RESSOURCES_DIR%\Archive"
							CreateDir(RESSOURCES_ARCHIVE_DIR)
	
							RateFile = "%WorkDirCurrentUnzip%\Rate_BM.txt"
							LogInfo("Opening file [%RateFile%] for [READ]") 
							hRead = FileOpen(RateFile, "READ", @FALSE, 10)
	
							If hRead
								LogInfo("Opened [%RateFile%] for [READ]")
	 						   if ech_ 
									NewRateFile = "%WorkDirCurrentUnzip%\Rate_%DirTimeStamp%_Ech.csv" 
								Else
									NewRateFile = "%WorkDirCurrentUnzip%\Rate_%DirTimeStamp%.csv" 
								EndIf
	
								LogInfo("Opening file [%NewRateFile%] for [WRITE]") 
								hWrite = FileOpen(NewRateFile, "WRITE", @FALSE, 10)
	
								if hWrite
									LogInfo("Opened [%NewRateFile%] for [WRITE]") 
									StrLine = FileRead(hRead)
	
									While StrLine != "*EOF*"
	
										If StrSub(StrLine, 1, 2) != "//" && StrSub(StrLine, 1, 1) != " " && StrLine != ""
											If StrIndexNc(StrLine, @Tab, 1, @FWDSCAN)
												RateT = ItemExtract(1, StrLine, @TAB)
												If ItemExtract(2, StrLine, @TAB) == ""
													RateTNum       = ItemExtract(3, StrLine, @TAB) 
												Else
													RateTNum       = ItemExtract(2, StrLine, @TAB) 
												EndIf
	
												If RateT == "TVQ_RATE2" 
													RateTNum = Round(RateTNum, 4)                                  ; conserver seulement 4 decimales pour cette valeur
												EndIf
	
												RateLine = "%RateT%;%RateTNum%; "
												FileWrite (hWrite, RateLine)
											EndIf
										EndIf
										StrLine = FileRead(hRead)
									EndWhile
									FileClose(hWrite)
								EndIf
								FileClose(hRead)
	;							if ech_
	;								FileMoveWithLog("%WorkDirCurrentUnzip%\Rate_BM_Ech.txt", RESSOURCES_ARCHIVE_DIR)
	;								FileMoveWithLog("%RESSOURCES_DIR%\Rate_*.csv", RESSOURCES_ARCHIVE_DIR)
	;								FileMoveWithLog("%WorkDirCurrentUnzip%\Rate_*.csv", RESSOURCES_DIR)
	;							Else
	;								FileMoveWithLog("%WorkDirCurrentUnzip%\Rate_BM.txt", RESSOURCES_ARCHIVE_DIR)
	;								FileMoveWithLog("%RESSOURCES_DIR%\Rate_*.csv", RESSOURCES_ARCHIVE_DIR)
	;								FileMoveWithLog("%WorkDirCurrentUnzip%\Rate_*.csv", RESSOURCES_DIR)
	;							EndIf
								FileMoveWithLog("%WorkDirCurrentUnzip%\Rate_BM.txt", RESSOURCES_ARCHIVE_DIR)
								FileMoveWithLog("%RESSOURCES_DIR%\Rate_*.csv", RESSOURCES_ARCHIVE_DIR)
								FileMoveWithLog("%WorkDirCurrentUnzip%\Rate_*.csv", RESSOURCES_DIR)
							EndIf
						EndIf
					EndIf
	
					If ErrorCount == 0
						;########################################################
						;concatenate  Files  285FIRSTBILL. And 2 285SALVAGE. 
						;########################################################
	
						LogInfo("Looking for file(s) in [%WorkDirCurrentUnzip%\*.*")
						NLTXTFile = FileItemize("%WorkDirCurrentUnzip%\*.*")
						NLTXTFileCount = ItemCount(NLTXTFile, @TAB)
	
						If NLTXTFileCount != 0
							FileMoveWithLog("%WorkDirCurrentUnzip%\*.*", WorkDirCurrentTXT)
						EndIf
	
						;Initialize Report's values
	;					BM
						Basic_Kit2A_Total   = 0
						Basic_Kit2F_Total   = 0
						Basic_Kit9A_Total   = 0
						Basic_Kit9F_Total   = 0
						Basic_Kit101A_Total = 0
						Basic_Kit101F_Total = 0
						Basic_Kit200A_Total = 0
						Basic_Kit200F_Total = 0
						Basic_Kit201A_Total = 0
						Basic_Kit201F_Total = 0
	
	;					BW
						Basic_Kit10A_Total = 0
						Basic_Kit10F_Total = 0
						Basic_Kit12A_Total = 0
						Basic_Kit12F_Total = 0
						Basic_Kit15A_Total = 0
						Basic_Kit15F_Total = 0
						Basic_Kit16A_Total = 0
						Basic_Kit16F_Total = 0
						Basic_Kit20A_Total = 0
						Basic_Kit20F_Total = 0
						Basic_Kit30A_Total = 0
						Basic_Kit30F_Total = 0
	
	;					TB
						Basic_Kit300A_Total = 0
						Basic_Kit300F_Total = 0
	
						RptCpt_FirstBill      = 0
						RptCpt_FirstBill_Name = ""
						RptCpt_Salvage1       = 0
						RptCpt_Salvage1_Name  = ""
						RptCpt_Salvage2       = 0
						RptCpt_Salvage2_Name  = ""
						RptCpt_Salvage        = 0
						RptCpt_Salvage_Name   = ""
						RptCpt_THIRDBILL      = 0
						RptCpt_THIRDBILL_Name = ""
						RptCpt_ADHOC          = 0
						RptCpt_ADHOC_Name     = ""
						RptCpt_RRDFinal       = 0
						RptCpt_RRDTemp_Name   = ""
						RptCpt_RRDFinal_Name  = ""
	
						RptCpt_CE             = 0
						RptCpt_CE_Name        = ""
						RptCpt_CF             = 0
						RptCpt_CF_Name        = ""
						RptCpt_9A             = 0
						RptCpt_9A_Name        = ""
						RptCpt_9F             = 0
						RptCpt_9F_Name        = ""
						RptCpt_101A           = 0
						RptCpt_101A_Name      = ""
						RptCpt_101F           = 0
						RptCpt_101F_Name      = ""
						RptCpt_400A           = 0
						RptCpt_400A_Name      = ""
						RptCpt_400F           = 0
						RptCpt_400F_Name      = ""
						RptCpt_401A           = 0
						RptCpt_401A_Name      = ""
						RptCpt_401F           = 0
						RptCpt_401F_Name      = ""
						RptCpt_950A           = 0
						RptCpt_950A_Name      = ""
						RptCpt_950F           = 0
						RptCpt_950F_Name      = ""
						RptCpt_SCA            = 0
						RptCpt_SCA_Name       = ""
						RptCpt_SCF            = 0
						RptCpt_SCF_Name       = ""
						RptCpt_KE             = 0
						RptCpt_KE_Name        = ""
						RptCpt_KF             = 0
						RptCpt_KF_Name        = ""
						RptCpt_2A             = 0
						RptCpt_2A_Name        = ""
						RptCpt_2F             = 0
						RptCpt_2F_Name        = ""
						RptCpt_15A            = 0
						RptCpt_15A_Name       = ""
						RptCpt_15F            = 0
						RptCpt_15F_Name       = ""
						RptCpt_300A           = 0
						RptCpt_300A_Name      = ""
						RptCpt_300F           = 0
						RptCpt_300F_Name      = ""
	
						Kit_2A_SansCarte = 0
						Kit_2F_SansCarte = 0
						Kit_2A_AvecCarte = 0
						Kit_2F_AvecCarte = 0
						Kit_10A_SansCarte = 0
						Kit_10F_SansCarte = 0
						Kit_10A_AvecCarte = 0
						Kit_10F_AvecCarte = 0
						Kit_12A_SansCarte = 0
						Kit_12F_SansCarte = 0
						Kit_12A_AvecCarte = 0
						Kit_12F_AvecCarte = 0
						Kit_15A_SansCarte = 0
						Kit_15F_SansCarte = 0
						Kit_15A_AvecCarte = 0
						Kit_15F_AvecCarte = 0
						Kit_16A_SansCarte = 0
						Kit_16F_SansCarte = 0
						Kit_16A_AvecCarte = 0
						Kit_16F_AvecCarte = 0
						Kit_20A_SansCarte = 0
						Kit_20F_SansCarte = 0
						Kit_20A_AvecCarte = 0
						Kit_20F_AvecCarte = 0
						Kit_30A_SansCarte = 0
						Kit_30F_SansCarte = 0
						Kit_30A_AvecCarte = 0
						Kit_30F_AvecCarte = 0
	
						Kit_2A_TO_9A   = 0
						Kit_2F_TO_9F   = 0
						Kit_2A_TO_101A = 0
						Kit_2F_TO_101F = 0
						Kit_15A_TO_12A = 0
						Kit_15F_TO_12F = 0
						Kit_9A = 0
						Kit_9F = 0
						Kit_10A = 0
						Kit_10F = 0
						Kit_20A = 0
						Kit_20F = 0
						Kit_101A = 0
						Kit_101F = 0
						Kit_200A = 0
						Kit_200F = 0
						Kit_201A = 0
						Kit_201F = 0
						Kit_300A = 0
						Kit_300F = 0
						Kit_400A = 0
						Kit_400F = 0
						Kit_401A = 0
						Kit_401F = 0
						Kit_950A = 0
						Kit_950F = 0
	
						If ZIP_BM
							LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\285FIRSTBILL*]")
							TXTFileList = FileItemize("%WorkDirCurrentTXT%\285FIRSTBILL*.*")
							TXTFileCount = ItemCount(TXTFileList, @TAB)
	
							If TXTFileCount != 0
								TmpFileFirstB = ItemExtract(1, TXTFileList, @TAB)
								RptCpt_FirstBill_Name = StrFix(TmpFileFirstB, "", 100)
								If FileExist("%WorkDirCurrentTXT%\%TmpFileFirstB%")
									FBSeq      =  StrSub(TmpFileFirstB, 14, 4)
								EndIf
							Else
								Msg = "No 285FIRSTBILL* files found in ZIP file %FileName%"
								LogError(Msg)
								ErrorCount = ErrorCount + 1
								ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
							EndIf
	
							If ErrorCount == 0
								LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\285SALVAGE*.]")
								TXTFileList = FileItemize("%WorkDirCurrentTXT%\285SALVAGE*.*")
								TXTFileCount = ItemCount(TXTFileList, @TAB)
	
								If TXTFileCount != 0
									If TXTFileCount == 2
										TmpFileSalv1 = ItemExtract(1, TXTFileList, @TAB)
										RptCpt_Salvage1_Name = StrFix(TmpFileSalv1, "", 100)
										LogInfo("Valid file [1] of [%TXTFileCount%] in [%WorkDirCurrentTXT%\%TmpFileSalv1%]")
										TmpFileSalv2 = ItemExtract(2, TXTFileList, @TAB)
										RptCpt_Salvage2_Name = StrFix(TmpFileSalv2, "", 100)
										LogInfo("Valid file [2] of [%TXTFileCount%] in [%WorkDirCurrentTXT%\%TmpFileSalv2%]")
									Else
										Msg = "We don't have 2 285SALVAGE* files found in ZIP file %FileName%"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
								Else
									Msg = "No 285SALVAGE* files found in ZIP file %FileName%"
									LogError(Msg)
									ErrorCount = ErrorCount + 1
									ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
								EndIf
							EndIf
	
							;lecture des 3 fichiers en simultaner pour les mettres en ordre de numéro de membres 
	
							if ech_
								RptCpt_RRDTemp_Name = StrFix("RRD_FIRSTBILL_%FNDATE%_Temp_Ech.TXT", "", 100)
								ConcatFN   = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp_Ech.TXT"
							Else
								RptCpt_RRDTemp_Name = StrFix("RRD_FIRSTBILL_%FNDATE%_Temp.TXT", "", 100)
								ConcatFN   = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp.TXT"
							EndIf
	
							FirstBill  = "%WorkDirCurrentTXT%\%TmpFileFirstB%"
							Salv1      = "%WorkDirCurrentTXT%\%TmpFileSalv1%"
							Salv2      = "%WorkDirCurrentTXT%\%TmpFileSalv2%"
	
							LogInfo("Opening file [%ConcatFN%] for [WRITE]") 
							hWrite = FileOpen(ConcatFN, "WRITE", @FALSE, 10)
	
							LogInfo("Opening file [%FirstBill%] for [READ]") 
							hReadFB = FileOpen(FirstBill, "READ", @FALSE, 10)
	
							If hReadFB
								LogInfo("Opening file [%Salv1%] for [READ]") 
								hReadS1 = FileOpen(Salv1, "READ", @FALSE, 10)
								LogInfo("Opening file [%Salv2%] for [READ]") 
								hReadS2 = FileOpen(Salv2, "READ", @FALSE, 10)
	
								StrLineFB = FileRead(hReadFB)
								If StrSub(StrLineFB, 1, 1) == "H"
									LogInfo("Header  FirstBill") 
									FileWrite (hWrite, StrLineFB)
									StrLineFB = FileRead(hReadFB)
									If StrSub(StrLineFB, 1, 2) != "DP"
										While StrLineFB != "*EOF*" && StrSub(StrLineFB, 1, 2) != "DP"     
											StrLineFB = FileRead(hReadFB)
										EndWhile
									EndIf
	
									If StrSub(StrLineFB, 1, 2) == "DP"   
										KeyFB     =  StrSub(StrLineFB, 5, 16)
										RptCpt_FirstBill = RptCpt_FirstBill + 1
									Else
										KeyFB     =  "9999999999999999"
									EndIf
									LogInfo("Opening file FB  KeyFB   [%KeyFB%] ") 
								EndIf
	
								StrLineS1 = FileRead(hReadS1)
								If StrSub(StrLineS1, 1, 1) == "H"
									LogInfo("Header  S1") 
									StrLineS1 = FileRead(hReadS1)
									If StrSub(StrLineS1, 1, 2) != "DP"
										While StrLineS1 != "*EOF*" && StrSub(StrLineS1, 1, 2) != "DP"     
											StrLineS1 = FileRead(hReadS1)
										EndWhile
									EndIf
	
									If StrSub(StrLineS1, 1, 2) == "DP"   
										KeyS1     =  StrSub(StrLineS1, 5, 16)
										RptCpt_Salvage1  = RptCpt_Salvage1 + 1
									Else
										KeyS1     =  "9999999999999999"
									EndIf
									LogInfo("Opening file S1  KeyS1   [%KeyS1%] ") 
								EndIf
	
								StrLineS2 = FileRead(hReadS2)
								If StrSub(StrLineS2, 1, 1) == "H"
									LogInfo("Header  S2") 
									StrLineS2 = FileRead(hReadS2)
									If StrSub(StrLineS2, 1, 2) != "DP"
										While StrLineS2 != "*EOF*" && StrSub(StrLineS2, 1, 2) != "DP"     
											StrLineS2 = FileRead(hReadS2)
										EndWhile
									EndIf
	
									If StrSub(StrLineS2, 1, 2) == "DP"   
										KeyS2     =  StrSub(StrLineS2, 5, 16)
										RptCpt_Salvage2  = RptCpt_Salvage2 + 1
									Else
										KeyS2     =  "9999999999999999"
									EndIf
									LogInfo("Opening file S2  KeyS2   [%KeyS2%] ")
								EndIf
	
								If KeyFB == "9999999999999999" && KeyS1 == "9999999999999999" && KeyS2 == "9999999999999999"
									AllOver = @True
								Else
									AllOver = @False
								EndIf
	
								While !AllOver
	
									If KeyFB < KeyS1 && KeyFB < KeyS2 
										FileWrite (hWrite, StrLineFB)
										RptCpt_RRDFinal += 1
										StrLineFB = FileRead(hReadFB)
	
										While StrLineFB != "*EOF*" && StrSub(StrLineFB, 1, 2) != "DP"
											If StrSub(StrLineFB, 1, 1) != "T"     
												FileWrite (hWrite, StrLineFB)
											EndIf
											StrLineFB = FileRead(hReadFB)
										EndWhile
	
										If StrLineFB != "*EOF*"     
											KeyFB     =  StrSub(StrLineFB, 5, 16)
											RptCpt_FirstBill += 1
										Else
											KeyFB     =  "9999999999999999"
										EndIf
	;									LogInfo("New FB  KeyFB   [%KeyFB%] ") 
									EndIf
	
									If KeyS1 < KeyFB && KeyS1 < KeyS2 
										FileWrite (hWrite, StrLineS1)
										RptCpt_RRDFinal += 1
										StrLineS1        = FileRead(hReadS1)
	
										While StrLineS1 != "*EOF*" && StrSub(StrLineS1, 1, 2) != "DP" 
											If StrSub(StrLineS1, 1, 1) != "T"    
												FileWrite (hWrite, StrLineS1)
											EndIf
											StrLineS1 = FileRead(hReadS1)
										EndWhile
	
									If StrLineS1 != "*EOF*"    
											KeyS1            = StrSub(StrLineS1, 5, 16)
											RptCpt_Salvage1 += 1
										Else
											KeyS1            =  "9999999999999999"
										EndIf
	;									LogInfo("New S1  KeyS1   [%KeyS1%] ") 
									EndIf
	
									If KeyS2 < KeyFB && KeyS2 < KeyS1 
										FileWrite (hWrite, StrLineS2)
										RptCpt_RRDFinal = RptCpt_RRDFinal + 1
										StrLineS2 = FileRead(hReadS2)
	
										While StrLineS2 != "*EOF*" && StrSub(StrLineS2, 1, 2) != "DP"
											If StrSub(StrLineS2, 1, 1) != "T"    
												FileWrite (hWrite, StrLineS2)
											EndIf
											StrLineS2 = FileRead(hReadS2)
										EndWhile
	
										If StrLineS2 != "*EOF*"    
											KeyS2             = StrSub(StrLineS2, 5, 16)
											RptCpt_Salvage2  += 1
										Else
											KeyS2             = "9999999999999999"
										EndIf
	;									LogInfo("New S2  KeyS2   [%KeyS2%] ") 
									EndIf
	
									If KeyFB == "9999999999999999" && KeyS1 == "9999999999999999" && KeyS1 == "9999999999999999"
										AllOver = @True
									EndIf
	
								EndWhile
							EndIf
	
							FileWrite(hWrite, StrLineFB)
							FileClose(hWrite)
							FileClose(hReadFB)
							FileClose(hReadS1)
							FileClose(hReadS2)
						;/******************************************************/
						;/******************************************************/
						;lecture des 3 fichiers en simultaner pour les mettres en ordre de numéro de membres 
						EndIf                                                                               ; End If ZIP_BM
	
						If ErrorCount == 0
							If ech_
								AvisEbillFN  = "%WorkDirCurrentWork%\EBILL_%FNDATE1%_Ech.txt" 
							Else
								AvisEbillFN  = "%WorkDirCurrentWork%\EBILL_%FNDATE1%.txt" 
							EndIf
							
							IF ZIP_BM
								;###############################################
								; Reformat content of csv file 
								;###############################################
	
								LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\avisEbill_*.csv]")
								TXTFileList = FileItemize("%WorkDirCurrentTXT%\avisEbill_*.csv")
								TXTFileCount = ItemCount(TXTFileList, @TAB)
	
								If TXTFileCount != 0
									TmpFileName = ItemExtract(1, TXTFileList, @TAB)
									If FileExist("%WorkDirCurrentTXT%\%TmpFileName%")
										LogInfo("Opening file [%AvisEbillFN%] for [WRITE]") 
										hWrite = FileOpen(AvisEbillFN, "WRITE", @FALSE, 10)
	
										avisFile =  "%WorkDirCurrentTXT%\%TmpFileName%"
										LogInfo("Opening file [%avisFile%] for [READ]") 
	
										hRead = FileOpen(avisFile, "READ", @FALSE, 10)
	
										If hRead
											LogInfo("Opened [%avisFile%] for [READ]") 
											StrLine = FileRead(hRead)                                                  ; bypass columns header
											StrLine = FileRead(hRead)
	
											While StrLine != "*EOF*"
												NewNo = StrReplace(ItemExtract(1, StrLine, ","), " ", "") 
												NewLine = StrCat(NewNo, @Tab, ItemExtract(2, StrLine, ","), @Tab, ItemExtract(3, StrLine, ","), @Tab, ItemExtract(4, StrLine, ","))  
												FileWrite (hWrite, NewLine)
												StrLine = FileRead(hRead)
											EndWhile
										EndIf
	
										FileClose(hRead)
										FileClose(hWrite)
									EndIf
								Else
									Msg = "No avisEbill_*.csv files found in ZIP file %FileName%"
									LogError(Msg)
									ErrorCount = ErrorCount + 1
									ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
								EndIf
							EndIf
	
							IF ZIP_BW || ZIP_B3
								NewLine = StrCat("9999999999999999", @Tab, " ", @Tab, " ", @Tab, " ")  
								FilePut(AvisEbillFN, NewLine)    
							EndIf
						EndIf                                                                                     ; End If ErrorCount == 0 
	
						If ErrorCount == 0 
							; Changer le numero de kit a 950 si inscrit Ebill  
							If FileExist(AvisEbillFN)
								LogInfo("Charger le fichier des inscrits au Ebill [%AvisEbillFN%]")
								AvisEbill = arrayFileGetCSV(AvisEbillFN, 0, @Tab , 0, 0)
								LIAV      = ArrInfo(AvisEbill, -1)
								LIAD      = ArrInfo(AvisEbill, 0)
								LIAD1     = ArrInfo(AvisEbill, 1)
								EbillRow  = ArrInfo(AvisEbill, 1)
								LIAD2     = ArrInfo(AvisEbill, 2)
								If LOG_ON_OFF == 1 Then LogInfo(" Array Valid AvisEbill [%LIAV%] - Dimension [%LIAD%] - Elem Dim1 [%LIAD1%] - Elem Dim2 [%LIAD2%]")
								If LIAV == -1
									Msg = "Incapable de charger le fichier des Inscrits au Ebill [%AvisEbillFN%]"
									LogError(Msg)
									ErrorCount = ErrorCount + 1
									ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
								Else
									ArraySort(AvisEbill, @ASCENDING, 0)                                              ; AvisEbill sort DP number
									TmpFileAvisEbill  = "%WorkDirCurrentWork%\EBILL_%FNDATE1%_Sort.txt" 
									ArrayFilePutCsv(TmpFileAvisEbill, AvisEbill, @Tab, @True, 2)
								EndIf
							Else
								Msg = "Fichier non trouver ou en erreur [%AvisEbillFN%]"
								LogError(Msg)
								ErrorCount = ErrorCount + 1 
								ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
							EndIf
						EndIf                                                                                     ; End If ErrorCount == 0
	
						If ErrorCount == 0
	
							If ZIP_BM
								if ech_
									LogInfo("Looking for file(s) in [%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp_Ech.TXT]")
									TXTFileList  = FileItemize("%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp_Ech.TXT")
								Else
									LogInfo("Looking for file(s) in [%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp.TXT]")
									TXTFileList  = FileItemize("%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp.TXT")
								EndIf
								TXTFileCount = ItemCount(TXTFileList, @TAB)
	
								If TXTFileCount != 0
	;								TmpFileADHOC  = "RRD_FIRSTBILL_%FNDATE%_Temp.TXT"
	;								ADHOCFilePath = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp.TXT"
	
									if ech_
										TmpFileADHOC  = "RRD_FIRSTBILL_%FNDATE%_Temp_Ech.TXT"
										ADHOCFilePath = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp_Ech.TXT"
	
										If FileExist(ADHOCFilePath)
											ConcatFN   = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final_Ech.TXT"
											RptCpt_RRDFinal_Name = StrFix("RRD_FIRSTBILL_%FNDATE%_final_Ech.TXT", "", 100)
										Else
											Msg = "No files found in ZIP file %TmpFileADHOC%"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									Else
										TmpFileADHOC  = "RRD_FIRSTBILL_%FNDATE%_Temp.TXT"
										ADHOCFilePath = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_Temp.TXT"
	
										If FileExist(ADHOCFilePath)
											ConcatFN   = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final.TXT"
											RptCpt_RRDFinal_Name = StrFix("RRD_FIRSTBILL_%FNDATE%_final.TXT", "", 100)
										Else
											Msg = "No files found in ZIP file %TmpFileADHOC%"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
	
									EndIf
	;								If FileExist(ADHOCFilePath)
	;									ConcatFN   = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final.TXT"
	;									RptCpt_RRDFinal_Name = StrFix("RRD_FIRSTBILL_%FNDATE%_final.TXT", "", 100)
	;								Else
	;									Msg = "No files found in ZIP file %TmpFileADHOC%"
	;									LogError(Msg)
	;									ErrorCount = ErrorCount + 1
	;									ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
	;								EndIf
	
								EndIf
							EndIf
	
							If ZIP_BW
								;285ADHOC
								;LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\285ADHOC.*")
								;TXTFileList  = FileItemize("%WorkDirCurrentTXT%\285ADHOC.*")
	
								LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\285ADHOC*]")
								TXTFileList  = FileItemize("%WorkDirCurrentTXT%\285ADHOC*.*")
	
								TXTFileCount = ItemCount(TXTFileList, @TAB)
	
								If TXTFileCount != 0
									TmpFileADHOC  = ItemExtract(1, TXTFileList, @TAB)
									ADHOCFilePath = "%WorkDirCurrentTXT%\%TmpFileADHOC%"
									If FileExist(ADHOCFilePath)
										if ech_
											FBSeq                = StrSub(TmpFileADHOC, 10, 4)
											ConcatFN             = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final_Ech.TXT"
											RptCpt_ADHOC_Name    = StrFix(TmpFileADHOC, "", 100)
											RptCpt_RRDFinal_Name = StrFix("RRD_BW_%FNDATE%_final_Ech.TXT", "", 100)
										Else
											FBSeq                = StrSub(TmpFileADHOC, 10, 4)
											ConcatFN             = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final.TXT"
											RptCpt_ADHOC_Name    = StrFix(TmpFileADHOC, "", 100)
											RptCpt_RRDFinal_Name = StrFix("RRD_BW_%FNDATE%_final.TXT", "", 100)
	
										EndIf
									Else
										Msg = "No 285ADHOC* files found in ZIP file %TmpFileADHOC%"
										;Msg = "No 285ADHOC.* files found in ZIP file %TmpFileADHOC%"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
								EndIf
							EndIf
						EndIf
	
						If ErrorCount == 0 && (ZIP_BM || ZIP_BW)
							DelayWrite           = ArrDimension(500)
							IdxEB                = 0
							Kit950               = @FALSE
							KitLangue            = ""
							Kit2                 = @FALSE
							Kit10                = @FALSE
							Kit15                = @FALSE
							IdxKit2              = 0
							IdxKit10             = 0
							IdxKit15             = 0
							kit2Chg9             = @FALSE
							kit2Chg101           = @FALSE
							kit10Card            = @FALSE
							kit15Chg             = @FALSE
	
							LogInfo("Opening file [%ConcatFN%] for [WRITE]") 
							hWrite = FileOpen(ConcatFN, "WRITE", @FALSE, 10)
	
							;; Get the documents number of 285ADHOC.*
							; Get the documents number of 285ADHOC*
							ADHOCFileOpen = FileOpen(ADHOCFilePath, "READ", @FALSE, 10)
							LogInfo("Opening file [%ADHOCFilePath%] for [READ]") 
							StrLineADHOCFileRead = FileRead(ADHOCFileOpen)
	
							While StrLineADHOCFileRead != "*EOF*"
	
								If StrSub(StrLineADHOCFileRead, 1, 2) == "DP"
									RptCpt_ADHOC += 1
	
				; Début du Post-traitement lorsque tout les enregistrements pour un membre sont lus  
									If Kit2
										For IdxChg = 1 to IdxKit2 
											TempStr = DelayWrite[IdxChg]
	;										Changer les Kits 2 en Kits 9 pour les cas spéciaux : Record GB et R en position 77 
											If kit2Chg9  && StrSub(TempStr, 1, 1) == "D" Then TempStr = StrCat(StrSub(TempStr ,1 ,79), "N", StrSub(TempStr ,81 , 609), StrSub(TempStr ,690 ,1), "9", StrSub(TempStr ,692 , -1)) 
	
	;										Changer les Kits 2 en Kits 101 pour les cas spéciaux : Record GB et A en position 77 
											If Kit2Chg101 && StrSub(TempStr, 1, 1) == "D" Then TempStr = StrCat(StrSub(TempStr ,1 ,79), "N", StrSub(TempStr ,81 , 609), StrSub(TempStr ,690 ,1), "101", KitLangue , StrSub(TempStr ,695 , -1))
	
											FileWrite (hWrite, TempStr)
										Next
										If kit2Chg9
	;										LogInfo("Kit 2 -> Kit 9 langue [%KitLangue%]") 
											If KitLangue == "A"
												Kit_2A_TO_9A += 1
											Else
												Kit_2F_TO_9F += 1
											EndIf
											kit2Chg9        = @FALSE
										EndIf
										If kit2Chg101
	;										LogInfo("Kit 2 -> Kit 101 langue [%KitLangue%]") 
											If KitLangue == "A"
												Kit_2A_TO_101A   += 1
											Else
												Kit_2F_TO_101F   += 1
											EndIf
											kit2Chg101      = @FALSE
										EndIf
										Kit2               = @FALSE
										IdxKit2            = 0
									EndIf
	
									If Kit10
										For IdxChg = 1 to IdxKit10 
											TempStr = DelayWrite[IdxChg]
											If !kit10Card && StrSub(TempStr, 1, 2) == "DP"
	;											Pour le Kit 10 assigner une carte de type 3 au détenteur Principale si auncune carte détecter pour ce membre Principale et Associés
												TempStr = StrCat(StrSub(TempStr ,1 ,79), "3", StrSub(TempStr ,81 , -1))   ; 3 = A la Carte 
											EndIf
											FileWrite (hWrite, TempStr)
										Next
										kit10Card          = @FALSE
										Kit10              = @FALSE
										IdxKit10           = 0
									EndIf
	
									If Kit15
										For IdxChg = 1 to IdxKit15 
											TempStr = DelayWrite[IdxChg]
											If kit15Chg && StrSub(TempStr, 1, 1) == "D"
	;											Changer les Kits 15 en Kits 12 pour les cas spéciaux : Record AM et AD*2*2299* en position 21 
												TempStr = StrCat(StrSub(TempStr ,1 ,691), "2", StrSub(TempStr ,693 , -1)) 
											EndIf
											FileWrite (hWrite, TempStr)
										Next
										If kit15Chg
	;										LogInfo("Kit 15 -> Kit 12 langue [%KitLangue%]") 
											If KitLangue == "A"
												Kit_15A_TO_12A     += 1
											Else
												Kit_15F_TO_12F     += 1
											EndIf
										EndIf
										kit15Chg           = @FALSE
										Kit15              = @FALSE
										IdxKit15           = 0
									EndIf
				; Fin du Post-traitement lorsque tout les enregistrements pour un membre sont lus  
	
				; Début de l'identification des Kits a traiter  
	
					; Début si Membre EBill Assigner Kit 950  
									While StrSub(StrLineADHOCFileRead, 5, 16) > AvisEbill[IdxEB, 0] &&  IdxEB < (EbillRow - 1)
										IdxEB = IdxEB + 1 
									EndWhile
	
									If StrSub(StrLineADHOCFileRead, 5, 16) == AvisEbill[IdxEB, 0]
										Kit950               = @True
										KitT1                = StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3)
										KitLangue            = StrSub(KitT1, StrLen(KitT1), 1) 
									Else
										Kit950               = @False
					; Fin si Membre EBill Assigner Kit 950  
	
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "2A" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "2F"
											If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "2F"
												KitLangue         = "F"
												Basic_Kit2F_Total += 1
											Else
												KitLangue         = "A"
												Basic_Kit2A_Total += 1
											EndIf
	
											Kit2               = @TRUE
										EndIf
	
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "10A" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "10F"
											Kit10              = @TRUE
										EndIf
	
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "15A" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "15F"
											If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "15F"
												KitLangue          = "F"
												Basic_Kit15F_Total += 1
											Else
												KitLangue          = "A"
												Basic_Kit15A_Total += 1
											EndIf
	
											Kit15              = @TRUE
										EndIf
									EndIf                                                             ; If !Kit950
								EndIf                                                                ; If StrSub(StrLineADHOCFileRead, 1, 2) == "DP"
	
				; Fin de l'identification des Kits a traiter  
	
				; Début du traitement des Kit qui peuvent etre modifier sans etre mise en table  (premise est que les numéro de kit est present seulement sur les enregistrement de type "DP" et "DA" 
	    
								If Kit950
									If StrSub(StrLineADHOCFileRead, 1, 2) == "DP"
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "2A"   Then Basic_Kit2A_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "2F"   Then Basic_Kit2F_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "9A"   Then Basic_Kit9A_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "9F"   Then Basic_Kit9F_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "101A" Then Basic_Kit101A_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "101F" Then Basic_Kit101F_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "200A" Then Basic_Kit200A_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "200F" Then Basic_Kit200F_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "201A" Then Basic_Kit201A_Total += 1
										If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "201F" Then Basic_Kit201F_Total += 1
									EndIf
	
									If StrSub(StrLineADHOCFileRead, 1, 1) == "D"
										StrLineADHOCFileRead = StrCat(StrSub(StrLineADHOCFileRead ,1 ,79), "N", StrSub(StrLineADHOCFileRead ,81 , 609), StrSub(StrLineADHOCFileRead ,690 ,1), "950", KitLangue, StrSub(StrLineADHOCFileRead ,695 , -1)) 
									EndIf
								Else
	
									If (StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "9A" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "9F" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "101A" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "101F" ) && StrSub(StrLineADHOCFileRead, 80, 1) != "N"
										StrLineADHOCFileRead = StrCat(StrSub(StrLineADHOCFileRead ,1 ,79), "N", StrSub(StrLineADHOCFileRead ,81 , -1)) 
									EndIf
	
									; Convertir les Kits 200 et 201 a 400 et 401 et retirer les cartes presentes
									If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "200A" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "200F" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "201A" || StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "201F" 
										If StrSub(StrLineADHOCFileRead, 1, 2) == "DP"
											If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "200A" Then Basic_Kit200A_Total += 1
											If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "200F" Then Basic_Kit200F_Total += 1
											If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "201A" Then Basic_Kit201A_Total += 1
											If StrTrim(StrSub(StrLineADHOCFileRead, 691, 5), 3) == "201F" Then Basic_Kit201F_Total += 1
										EndIf
	
										StrLineADHOCFileRead = StrCat(StrSub(StrLineADHOCFileRead ,1 ,79), "N", StrSub(StrLineADHOCFileRead ,81 , 609), StrSub(StrLineADHOCFileRead ,690 ,1), "4", StrSub(StrLineADHOCFileRead ,692 , -1)) 
									EndIf
				; Fin du traitement des Kit qui peuvent etre modifier sans etre mise en table  (premise est que les numéro de kit est present seulement sur les enregistrement de type "DP" et "DA"     
	
				; Début de l'identification des type d'enregistrement qui fournissent plus de détaile sur le traitement a effectuer sur les kits a traiter   
									If Kit2  
										If StrSub(StrLineADHOCFileRead, 1, 2) == "GB" && StrSub(StrLineADHOCFileRead, 77, 1) == "R"
											kit2Chg9           = @TRUE
										EndIF
										If StrSub(StrLineADHOCFileRead, 1, 2) == "GB" && StrSub(StrLineADHOCFileRead, 77, 1) == "A"
											kit2Chg101         = @TRUE
										EndIF
										IdxKit2               += 1
										DelayWrite[IdxKit2]   = StrLineADHOCFileRead 
									EndIf
	
									If Kit10
										If StrSub(StrLineADHOCFileRead, 1, 1) == "D" && StrSub(StrLineADHOCFileRead, 80, 1) != "N"
											kit10Card          = @TRUE 
										EndIf
										IdxKit10              += 1
										DelayWrite[IdxKit10]  = StrLineADHOCFileRead 
									EndIf
	
									If Kit15  
										If StrSub(StrLineADHOCFileRead, 1, 2) == "AM" && StrSub(StrLineADHOCFileRead, 21, 10) == "AD*2*2299*"
											kit15Chg          = @TRUE
										EndIF
										IdxKit15             += 1
										DelayWrite[IdxKit15] = StrLineADHOCFileRead 
									EndIf
								EndIf
				; Fin de l'identification des type d'enregistrement qui fournissent plus de détaile sur le traitement a effectuer sur les kits a traiter   
	
				; Déphaser l'écriture des enregistrements des Kits qui necessite un traitement ulterieur   
								If !Kit2 && !Kit10 && !Kit15  
									FileWrite (hWrite, StrLineADHOCFileRead)
								EndIf
	
								StrLineADHOCFileRead    = FileRead(ADHOCFileOpen)
							EndWhile
	
							RptCpt_RRDFinal = RptCpt_ADHOC
	
							FileClose(ADHOCFileOpen)
	
				; Début du Post-traitement lorsque tout les enregistrements pour un membre sont lus  
							If Kit2
								For IdxChg = 1 to IdxKit2 
									TempStr = DelayWrite[IdxChg]
	;								Changer les Kits 2 en Kits 9 pour les cas spéciaux : Record GB et R en position 77 
									If kit2Chg9  && StrSub(TempStr, 1, 1) == "D" Then TempStr = StrCat(StrSub(TempStr ,1 ,79), "N", StrSub(TempStr ,81 , 609), StrSub(TempStr ,690 ,1), "9", StrSub(TempStr ,692 , -1)) 
	
	;								Changer les Kits 2 en Kits 101 pour les cas spéciaux : Record GB et A en position 77 
									If Kit2Chg101 && StrSub(TempStr, 1, 1) == "D" Then TempStr = StrCat(StrSub(TempStr ,1 ,79), "N", StrSub(TempStr ,81 , 609), StrSub(TempStr ,690 ,1), "101", KitLangue , StrSub(TempStr ,695 , -1))
	
									FileWrite (hWrite, TempStr)
								Next
								If kit2Chg9
	;								LogInfo("Kit 2 -> Kit 9 langue [%KitLangue%]") 
									If KitLangue == "A"
										Kit_2A_TO_9A += 1
									Else
										Kit_2F_TO_9F += 1
									EndIf
									kit2Chg9        = @FALSE
								EndIf
								If kit2Chg101
	;								LogInfo("Kit 2 -> Kit 101 langue [%KitLangue%]") 
									If KitLangue == "A"
										Kit_2A_TO_101A   += 1
									Else
										Kit_2F_TO_101F   += 1
									EndIf
									kit2Chg101      = @FALSE
								EndIf
								Kit2               = @FALSE
								IdxKit2            = 0
							EndIf
	
							If Kit10
								For IdxChg = 1 to IdxKit10 
									TempStr = DelayWrite[IdxChg]
									If !kit10Card && StrSub(TempStr, 1, 2) == "DP"
	;									Pour le Kit 10 assigner une carte de type 3 au détenteur Principale si auncune carte détecter pour ce membre Principale et Associés
										TempStr = StrCat(StrSub(TempStr ,1 ,79), "3", StrSub(TempStr ,81 , -1))   ; 3 = A la Carte 
									EndIf
									FileWrite (hWrite, TempStr)
								Next
								kit10Card          = @FALSE
								Kit10              = @FALSE
								IdxKit10           = 0
							EndIf
	
							If Kit15
								For IdxChg = 1 to IdxKit15 
									TempStr = DelayWrite[IdxChg]
									If kit15Chg && StrSub(TempStr, 1, 1) == "D"
	;									Changer les Kits 15 en Kits 12 pour les cas spéciaux : Record AM et AD*2*2299* en position 21 
										TempStr = StrCat(StrSub(TempStr ,1 ,691), "2", StrSub(TempStr ,693 , -1)) 
									EndIf
									FileWrite (hWrite, TempStr)
								Next
								If kit15Chg
	;								LogInfo("Kit 15 -> Kit 12 langue [%KitLangue%]") 
									If KitLangue == "A"
										Kit_15A_TO_12A     += 1
									Else
										Kit_15F_TO_12F     += 1
									EndIf
								EndIf
								kit15Chg           = @FALSE
								Kit15              = @FALSE
								IdxKit15           = 0
							EndIf
				; Fin du Post-traitement lorsque tout les enregistrements pour un membre sont lus  
	
							FileClose(hWrite)
						EndIf
	
						If ZIP_BW
							LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\Expirations*.txt]")
							TXTFileList = FileItemize("%WorkDirCurrentTXT%\Expirations*.txt")
							TXTFileCount = ItemCount(TXTFileList, @TAB)
	
							If TXTFileCount != 0
								TmpFileExpirations = ItemExtract(1, TXTFileList, @TAB)
								If FileExist("%WorkDirCurrentTXT%\%TmpFileExpirations%")
									FileExpirations  = "%WorkDirCurrentTXT%\%TmpFileExpirations%"
								EndIf
							Else
								Msg = "No Dalies* files found in ZIP file %FileName%"
								LogError(Msg)
								ErrorCount = ErrorCount + 1
								ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
							EndIf
	
							LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\Recrutor*.txt]")
							TXTFileList = FileItemize("%WorkDirCurrentTXT%\Recrutor*.txt")
							TXTFileCount = ItemCount(TXTFileList, @TAB)
	
							If TXTFileCount != 0
								TmpFileRecrutor = ItemExtract(1, TXTFileList, @TAB)
								If FileExist("%WorkDirCurrentTXT%\%TmpFileRecrutor%")
									FileRecrutor  = "%WorkDirCurrentTXT%\%TmpFileRecrutor%"
								EndIf
							Else
								Msg = "No recruteur files found in ZIP file %FileName%"
								LogError(Msg)
								ErrorCount = ErrorCount + 1
								ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
							EndIf
						EndIf                                                                               ; End If ZIP_BW
	
						IF ZIP_B3
							;LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\285THIRDBILL.*]")
							;TXTFileList = FileItemize("%WorkDirCurrentTXT%\285THIRDBILL.*") 
	
							LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\285THIRDBILL*]")
							TXTFileList = FileItemize("%WorkDirCurrentTXT%\285THIRDBILL*.*") 
	
							TXTFileCount = ItemCount(TXTFileList, @TAB)
	
							If TXTFileCount != 0
								TmpFileTHIRDBILL  = ItemExtract(1, TXTFileList, @TAB)
								ThirdBillFilePath = "%WorkDirCurrentTXT%\%TmpFileTHIRDBILL%"
								If FileExist(ThirdBillFilePath)
									If ech_
										FBSeq                 =  StrSub(TmpFileTHIRDBILL, 14, 4)
										ConcatFN              = "%WorkDirCurrentWork%\RRD_B3_%FNDATE%_final_Ech.TXT"
										FileCopyWithLog("%WorkDirCurrentTXT%\%TmpFileTHIRDBILL%", ConcatFN)
										RptCpt_THIRDBILL_Name = StrFix(TmpFileTHIRDBILL, "", 100)
										RptCpt_RRDFinal_Name  = StrFix("RRD_B3_%FNDATE%_final_Ech.TXT", "", 100)
	
									Else
										FBSeq                 =  StrSub(TmpFileTHIRDBILL, 14, 4)
										ConcatFN              = "%WorkDirCurrentWork%\RRD_B3_%FNDATE%_final.TXT"
										FileCopyWithLog("%WorkDirCurrentTXT%\%TmpFileTHIRDBILL%", ConcatFN)
										RptCpt_THIRDBILL_Name = StrFix(TmpFileTHIRDBILL, "", 100)
										RptCpt_RRDFinal_Name  = StrFix("RRD_B3_%FNDATE%_final.TXT", "", 100)
									EndIf
									;Get the document's number of 285THIRDBILL*
									ThirdBillFileOpen = FileOpen(ThirdBillFilePath, "READ", @FALSE, 10)
									StrLineThirdBillFileRead = FileRead(ThirdBillFileOpen)
									While StrLineThirdBillFileRead != "*EOF*"
										If StrSub(StrLineThirdBillFileRead, 1, 2) == "DP" Then RptCpt_THIRDBILL += 1
										StrLineThirdBillFileRead = FileRead(ThirdBillFileOpen)
									EndWhile
									RptCpt_RRDFinal = RptCpt_THIRDBILL
									FileClose(ThirdBillFileOpen)
								EndIf
							Else
								Msg = "No 285THIRDBILL* files found in ZIP file %FileName%"
								LogError(Msg)
								ErrorCount = ErrorCount + 1
								ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
							EndIf
						EndIf                                                                               ; End If ZIP_B3
					EndIf                                                                                  ; End If ErrorCount == 0 
				EndIf                                                                                     ; End If FileExist("%INPUT_DIR%\%FileName%")
				;/*****************************/



				If ErrorCount == 0
					;###############################################
					; Load RATE_aaaammjjhhmmss.csv
					;###############################################
	
					LogInfo("Looking for file(s) in [%RESSOURCES_DIR%\Rate_*.csv]")
					TBLFileList = FileItemize("%RESSOURCES_DIR%\Rate_*.csv")
					TBLFileCount = ItemCount(TBLFileList, @TAB)
	
					If TBLFileCount != 0
						TBLFileName = ItemExtract(1, TBLFileList, @TAB)
						If FileExist("%RESSOURCES_DIR%\%TBLFileName%")
							RateFile    = "%RESSOURCES_DIR%\%TBLFileName%"
	
							LogInfo("Opening file [%RateFile%] for [READ]")
							hRead  = FileOpen(RateFile, "READ", @FALSE, 10)
	
							If hRead
								LogInfo("Opened [%RateFile%] for [READ]") 
								StrLine = FileRead(hRead)
	
								While StrLine != "*EOF*"
									If StrLine != ""
										RateT              = ItemExtract(1, StrLine, ";")
										RateTNum           = ItemExtract(2, StrLine, ";")
	
										If RateT == "NEW_A_AMT"              Then NEW_A_AMT               = RateTNum
										If RateT == "NEW_CORPO_AMT"          Then NEW_CORPO_PRIM_AMT      = RateTNum            ;Pour raisons de calcul VLT, On utilise la nouvelle version pour la valeur "NEW_CORPO_AMT"
										If RateT == "NEW_P_AMT"              Then NEW_P_AMT               = RateTNum
										If RateT == "NEW_VR_AMT"             Then NEW_VR_AMT              = RateTNum
										If RateT == "OPTION_PRM_ABC"         Then OPTION_PRM_ABC          = RateTNum
										If RateT == "OPTION_PRM_DE"          Then OPTION_PRM_DE           = RateTNum
										If RateT == "OPTION_PRM_NOUV"        Then OPTION_PRM_NOUV         = RateTNum
										If RateT == "R_PLUS_A"               Then R_PLUS_A                = RateTNum
										If RateT == "R_PLUS_E"               Then R_PLUS_E                = RateTNum
										If RateT == "TPS_RATE"               Then TPS_RATE                = RateTNum
										If RateT == "TVQ_RATE2"              Then TVQ_RATE                = RateTNum
									EndIf
									StrLine = FileRead(hRead)
								EndWhile
							EndIf
							FileClose(hRead)
	
							LogInfo("Value NEW_A_AMT               [%NEW_A_AMT%]") 
							LogInfo("Value NEW_CORPO_PRIM_AMT      [%NEW_CORPO_PRIM_AMT%]") 
							LogInfo("Value NEW_P_AMT               [%NEW_P_AMT%]") 
							LogInfo("Value NEW_VR_AMT              [%NEW_VR_AMT%]") 
							LogInfo("Value OPTION_PRM_ABC          [%OPTION_PRM_ABC%]") 
							LogInfo("Value OPTION_PRM_DE           [%OPTION_PRM_DE%]") 
							LogInfo("Value OPTION_PRM_NOUV         [%OPTION_PRM_NOUV%]") 
							LogInfo("Value R_PLUS_A                [%R_PLUS_A%]") 
							LogInfo("Value R_PLUS_E                [%R_PLUS_E%]") 
							LogInfo("Value TPS_RATE                [%TPS_RATE%]") 
							LogInfo("Value TVQ_RATE                [%TVQ_RATE%]")
						EndIf
					Else
						Msg = "No Rate.tbl files found in %RESSOURCES_DIR%"
						LogError(Msg)
						ErrorCount = ErrorCount + 1
						ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
					EndIf
				EndIf                                                                                     ; End If ErrorCount == 0 
	

				;/**************************/
				; in case of 
				;/**************************/





				;

				If ErrorCount == 0 && ZIP_BM
					;########################################################
					; Premier Avis
					;########################################################
	
					LogInfo("Looking for file(s) in [%WorkDirCurrentTXT%\PremierAvis_*.*]")
					PAFileList = FileItemize("%WorkDirCurrentTXT%\PremierAvis_*.*")
					PAFileCount = ItemCount(PAFileList, @TAB)
	
					If PAFileCount != 0
						TmpFilePA = ItemExtract(1, PAFileList, @TAB)
						FPPAName = "%WorkDirCurrentTXT%\%TmpFilePA%"  
						If FileExist(FPPAName)
	
							LogInfo("Charger le fichier des Premier Avis [%TmpFilePA%]")
							PremierAvis = arrayFileGetCSV(FPPAName, 0, @Tab , 0, 0)
							LIAV      = ArrInfo(PremierAvis, -1)
							LIAD      = ArrInfo(PremierAvis, 0)
							LIAD1     = ArrInfo(PremierAvis, 1)
							PARow     = ArrInfo(PremierAvis, 1)
							LIAD2     = ArrInfo(PremierAvis, 2)
							If LOG_ON_OFF == 1 Then LogInfo(" Array Valid PremierAvis [%LIAV%] - Dimension [%LIAD%] - Elem Dim1 [%LIAD1%] - Elem Dim2 [%LIAD2%]")
							If LIAV == -1
								Msg = "Incapable de charger le fichier des Premier Avis [%PremierAvis%]"
								LogError(Msg)
								ErrorCount = ErrorCount + 1
								ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
							Else
								If ech_
									ArraySort(PremierAvis, @ASCENDING, 0)                                         ; PremierAvis sort by Family number
									TMPFNPA     = FileRoot(TmpFilePA) 
									TmpFilePAS  = "%WorkDirCurrentWork%\%TMPFNPA%_Sort_Ech.txt" 
									ArrayFilePutCsv(TmpFilePAS, PremierAvis, @Tab, @True, 2)
								Else
									ArraySort(PremierAvis, @ASCENDING, 0)                                         ; PremierAvis sort by Family number
									TMPFNPA     = FileRoot(TmpFilePA) 
									TmpFilePAS  = "%WorkDirCurrentWork%\%TMPFNPA%_Sort.txt" 
									ArrayFilePutCsv(TmpFilePAS, PremierAvis, @Tab, @True, 2)
								EndIf
							EndIf
						Else
							Msg = "Fichier non trouver ou en erreur [%FPPAName%]"
							LogError(Msg)
							ErrorCount = ErrorCount + 1 
							ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
						EndIf
					Else
						Msg = "No PremierAvis_AAAAMMJJ.txt files found in ZIP file %FileName%"
						LogError(Msg)
						ErrorCount = ErrorCount + 1
						ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
					EndIf
				EndIf
	
				If ErrorCount == 0  && ( ZIP_BM || ZIP_BW )
					;###############################################
					; Create Sort File  Key
					;###############################################
	
					LC_R2           = ""
					ProdDate        = ""
					EBillED         = ""
					ListCourriel_R2 = "" 
	
					LogInfo("Opening file [%ConcatFN%] for [READ]") 
					hRead = FileOpen(ConcatFN, "READ", @FALSE, 10)
	
					If hRead
						NbKey            = 50000
						NbInfo           = 17
						IdxK             = 0
						IdxCD            = 0
						SortKey          = ArrDimension(NbKey, NbInfo)
						ArrInitialize(SortKey, "")
	 
	;					SortKey[row, 0]   =  SortKey#   
	;					SortKey[row, 1]   =  Kit#            Numéro seulement   
	;					SortKey[row, 2]   =  Type1stCard     Blank   
	;					SortKey[row, 3]   =  Destination       
	;					SortKey[row, 4]   =  "A" = All Same Card Type   "M" = Multi Card Types 
	;					SortKey[row, 5]   =  QtyCards   
	;					SortKey[row, 6]   =  DPMemb# 
	;					SortKey[row, 7]   =  Langue
	;					SortKey[row, 8]   =  GB_Automatic_Renewal
	;					SortKey[row, 9]   =  CAA_Seq        
	;					SortKey[row, 10]  =  Nb carte  0 Basic   
	;					SortKey[row, 11]  =  Nb carte  1 Plus   
	;					SortKey[row, 12]  =  Nb carte  2 RV   
	;					SortKey[row, 13]  =  Nb carte  3 RVPremium   
	;					SortKey[row, 14]  =  Nb carte  4 ?   
	;					SortKey[row, 15]  =  Nb carte  5 ?   
	;					SortKey[row, 16]  =  Nb carte  6 Corpo   
	
						SortKey[IdxK, 10] = 0 
						SortKey[IdxK, 11] = 0 
						SortKey[IdxK, 12] = 0 
						SortKey[IdxK, 13] = 0 
						SortKey[IdxK, 14] = 0 
						SortKey[IdxK, 15] = 0 
						SortKey[IdxK, 16] = 0 
	
						LIAV = ArrInfo(SortKey, -1)
						LIAD = ArrInfo(SortKey, 0)
						LIAD1 = ArrInfo(SortKey, 1)
						LIAD2 = ArrInfo(SortKey, 2)
						If LOG_ON_OFF == 1 Then LogInfo(" Array Valid SortKey [%LIAV%] - Dimension [%LIAD%] - Elem Dim1 [%LIAD1%] - Elem Dim2 [%LIAD2%]")
	
						LogInfo("Opened [%ConcatFN%] for [READ]") 
						StrLine = FileRead(hRead)
	
						IdxEB = 0
						IdxPA = 0
						FirstDP = @False
	
						While StrLine != "*EOF*"
	
							If LOG_ON_OFF == 1 Then LogInfo("TEST - StrLine : [%StrLine%]")
	
							If StrSub(StrLine, 1, 1) == "H" || StrSub(StrLine, 1, 2) == "GB" || StrSub(StrLine, 1, 2) == "MP"  || StrSub(StrLine, 1, 2) == "AM" || StrSub(StrLine, 1, 1) == "T"
								If ZIP_BM
									If LOG_ON_OFF == 1 Then LogInfo("Traitement pour ZIP_BM (Bi-Monthly)")
									If StrSub(StrLine, 1, 1) == "H" && LC_R2 == ""    
										LC_R2           = StrCat(StrSub(StrLine, 66, 4), StrSub(StrLine, 64, 2), StrSub(StrLine, 62, 2))
										EBillED         = StrCat(StrSub(StrLine, 66, 4), ".", StrSub(StrLine, 64, 2), ".", StrSub(StrLine, 62, 2)) 
										ProdDate        = StrCat(StrSub(StrLine, 50, 4), ".", StrSub(StrLine, 48, 2), ".", StrSub(StrLine, 46, 2))
										if ech_
											FilePriEB  = "%WorkDirCurrentWork%\Principaux_Fichier Ebill_%EBillED%_Ech.csv" 
											hWPriEB = FileOpen(FilePriEB, "WRITE", @FALSE, 10)
											HInfoPri  = 'Annee,Membre13PremNum,Sequence,MontantCredit,MontantTotalFamille,dtExpiration,TypeRenouvellement,"ModePaiement",InfoDetailRA,"ExpirationCarteCredit","SoldeDollarsCAA","CreditDollarsCAA","Rabais_obtenus","Sous_Total","Sous_Total_avec_taxes","MontantBase","Rabais_VLT",TPS,TVQ,CAA_TOP1,CAA_TOP2,IR_TOP1,IR_TOP2,"DollarsCAAObtenus","Num_Modele",dtProduction,renewCarte,Firstname,LastName,Langue,Sexe,optionMembre,MontantBaseMembre,eBill,Upsell_Assoc,FileName,Manu'
											FileWrite (hWPriEB, HInfoPri)
		
											FileAssEB  = "%WorkDirCurrentWork%\Associes_Fichier Ebill_%EBillED%_Ech.csv" 
											hWAssEB = FileOpen(FileAssEB, "WRITE", @FALSE, 10)
											HInfoAss  = 'Annee,Membre16PremNum,Membre13PremNum,FirstName,LastName,Membre18PremNum,optionMembre,MontantBaseMembre,dtProduction,dtExpiration,dtCreated'
											FileWrite (hWAssEB, HInfoAss)
										Else
											FilePriEB  = "%WorkDirCurrentWork%\Principaux_Fichier Ebill_%EBillED%.csv" 
											hWPriEB = FileOpen(FilePriEB, "WRITE", @FALSE, 10)
											HInfoPri  = 'Annee,Membre13PremNum,Sequence,MontantCredit,MontantTotalFamille,dtExpiration,TypeRenouvellement,"ModePaiement",InfoDetailRA,"ExpirationCarteCredit","SoldeDollarsCAA","CreditDollarsCAA","Rabais_obtenus","Sous_Total","Sous_Total_avec_taxes","MontantBase","Rabais_VLT",TPS,TVQ,CAA_TOP1,CAA_TOP2,IR_TOP1,IR_TOP2,"DollarsCAAObtenus","Num_Modele",dtProduction,renewCarte,Firstname,LastName,Langue,Sexe,optionMembre,MontantBaseMembre,eBill,Upsell_Assoc,FileName,Manu'
											FileWrite (hWPriEB, HInfoPri)
		
											FileAssEB  = "%WorkDirCurrentWork%\Associes_Fichier Ebill_%EBillED%.csv" 
											hWAssEB = FileOpen(FileAssEB, "WRITE", @FALSE, 10)
											HInfoAss  = 'Annee,Membre16PremNum,Membre13PremNum,FirstName,LastName,Membre18PremNum,optionMembre,MontantBaseMembre,dtProduction,dtExpiration,dtCreated'
											FileWrite (hWAssEB, HInfoAss)
										EndIf
									EndIf
	
									If StrSub(StrLine, 1, 2) == "GB"
										If LOG_ON_OFF == 1 Then LogInfo("Traitement section 'GB'")
										TmpUA                = StrTrim(StrSub(StrLine, 32, 5), 3)               ; GB Type record  New_Associate_Rate
	
										Upsell_Assoc = StrReplace(Format2Dec(TmpUA), ".00", "")
	
										TypeRenouvellement   = StrSub(StrLine, 77, 1)                           ; GB Type record  Automatic_Renewal 
										SortKey[IdxK, 8]     = StrSub(StrLine, 77, 1)                           ; GB Type record  Automatic_Renewal       
										GB_LTV_Code          = StrSub(StrLine, 742, 1)                          ; GB LTV Code
	
										;;
										;AllCard
										;On recupère seulement le numéro de la carte de crédit et
										;la date d'expiration si : 
										;le membre n'est pas en renouvellement automatique
										;;
										If TypeRenouvellement == "A"
											InfoDetailRA = StrSub(StrLine, 655, 18)                                 ; recuperation numero de carte de credit   
											ExpirationCarteCredit = StrSub(StrLine, 674, 4)                         ; recuperation de ExpirationCarteCredit
										EndIf
										;;
										If GB_LTV_Code == "E"  
											CV_IS_VLTDE       = 1  
											CV_IS_VLTE        = 1 
										EndIf
	
										If GB_LTV_Code == "D"  
											CV_IS_VLTDE       = 1  
											CV_IS_VLTD        = 1 
										EndIf
	
										If GB_LTV_Code == "A" || GB_LTV_Code == "B" || GB_LTV_Code == "C"   
											CV_IS_VLTABC      = 1  
										EndIf
	
										ModePaiement         = StrTrim(StrSub(StrLine, 78, 5), 3)               ; GB Type record  Automatic_Renewal_Pay_Method
										TmpSD                = StrTrim(StrSub(StrLine, 696, 6), 3)              ; GB Type record  Total_Affinity_Credits_Available
										SoldeDollarsCAA      = Format2Dec(TmpSD)
	
										If Type_Rappel == 1 || Type_Rappel == 2
											CV_TOT_DIS       = TmpSD                                             ; GB Type record  Total_Affinity_Credits_Available 
											CV_TOT_DIS_CUMUL = TmpSD                                             ; GB Type record  Total_Affinity_Credits_Available 
										EndIF
	
										If StrUpper(StrTrim(StrSub(StrLine, 232, 2), 3)) == "AW"
											Auto_WriteOff_Value = StrTrim(StrSub(StrLine, 245, 5), 3)
											Is_Auto_WriteOff = @TRUE
										EndIf
									EndIf
	
									If StrSub(StrLine, 1, 2) == "AM"
										If LOG_ON_OFF == 1 Then LogInfo("Traitement section 'AM'")
										TmpCD                = StrTrim(StrSub(StrLine, 693, 6), 3)              ; AM Type record  Total_Affinity_Credits
										CreditDollarsCAA     = Format2Dec(TmpCD)
	
										If Type_Rappel == 1 || Type_Rappel == 2
											TEST_CV_TOT_DIS_CUMUL = IsNumber(CV_TOT_DIS_CUMUL)
											TEST_TmpCD = IsNumber(TmpCD)
	
											If (TEST_CV_TOT_DIS_CUMUL == @FALSE)
												CV_TOT_DIS_CUMUL = 0
											EndIf
	
											If (TEST_TmpCD == @FALSE)
												TmpCD = 0
											EndIf
	
											CV_TOT_DIS_CUMUL = CV_TOT_DIS_CUMUL + TmpCD   
										Else 
											CV_TOT_DIS       = TmpCD                                             ; AM Type record  Total_Affinity_Credits 
										EndIF
									EndIf
								EndIf                                                                         ; End If ZIP_BM
	
							Else
								If StrSub(StrLine, 1, 2) == "DP" && IdxCD != 0                                ; Break to be repeated after EOF 
									If LOG_ON_OFF == 1 Then LogInfo("Traitement section 'DP' & 'IDxCD' == true")
	
									;Key #1               ; Lang#    
									;Key #2               ; Kit#    
									;Key #3               ; Type1stCard 
									;Key #4               ; Dest
									;Key #5               ; All Same Card Type Or Multi types
									;Key #6               ; QtyCards
									;Key #7               ; DPMemb# 
	
									If SortKey[IdxK, 1] == "010" ||SortKey[IdxK, 1] == "012" || SortKey[IdxK, 1] == "016" || SortKey[IdxK, 1] == "020" || SortKey[IdxK, 1] == "030" 
										If SortKey[IdxK, 7] == "E"
											SortKey[IdxK, 7] = "G"
										EndIf
										If SortKey[IdxK, 7] == "F"
											SortKey[IdxK, 7] = "H"
										EndIf
									EndIf
	
									SortKey[IdxK, 0] = StrCat(SortKey[IdxK, 7], SortKey[IdxK, 1], SortKey[IdxK, 2], SortKey[IdxK, 3], SortKey[IdxK, 4], SortKey[IdxK, 5], SortKey[IdxK, 6])       
									IdxK = IdxK + 1
	
									SortKey[IdxK, 10] = 0 
									SortKey[IdxK, 11] = 0 
									SortKey[IdxK, 12] = 0 
									SortKey[IdxK, 13] = 0 
									SortKey[IdxK, 14] = 0 
									SortKey[IdxK, 15] = 0 
									SortKey[IdxK, 16] = 0
								EndIf                                                          
	
								If StrSub(StrLine, 1, 2) == "DP" && FirstDP && ZIP_BM          
									If LOG_ON_OFF == 1 Then LogInfo("TEST : Sous_Total_avec_taxes = Format2Dec(DP_Total_Amount_Due) Format2Dec([%DP_Total_Amount_Due%]) + CreditDollarsCAA [%CreditDollarsCAA%]")
									Sous_Total_avec_taxes = Format2Dec(DP_Total_Amount_Due) + CreditDollarsCAA
	
	;								Ne prendre en considération le MontantCredit que s'il est un "solde reporté" (DP_Adjustment_Amount) donc négatif
									if MontantCredit < 0
										If LOG_ON_OFF == 1 Then LogInfo("Sous_Total_avec_taxes -= MontantCredit [%MontantCredit%]")
										Sous_Total_avec_taxes -= MontantCredit 
									EndIf
	 
									TmpSumTaxesPercentage = 1 + TPS_RATE + TVQ_RATE
	
									If LOG_ON_OFF == 1 Then LogInfo("Sous_Total = Sous_Total_avec_taxes [%Sous_Total_avec_taxes%] / TmpSumTaxesPercentage [%TmpSumTaxesPercentage%]")
									Sous_Total = Sous_Total_avec_taxes / TmpSumTaxesPercentage
	
									If LOG_ON_OFF == 1 Then LogInfo("TPS = Sous_Total [%Sous_Total%] * TPS_RATE [%TPS_RATE%]")
									TPS = Sous_Total * TPS_RATE
	
									If LOG_ON_OFF == 1 Then LogInfo("TVQ = Sous_Total [%Sous_Total%] * TVQ_RATE [%TVQ_RATE%]")
									TVQ = Sous_Total * TVQ_RATE
									Decimals(2)
									Sous_Total = Sous_Total
									TPS = TPS
									TVQ = TVQ
									If !IsNumber(Sous_Total_avec_taxes) || Sous_Total_avec_taxes == "0"
										Sous_Total_avec_taxes = "0.00"
										TVQ                   = "0.00" 
									EndIf
	
	;								Ajustement de la nouvelle logique pour le calcul du MontantBase
									If DP_Rate_Type == "AC" || DP_Rate_Type == "291"  
	
										If LOG_ON_OFF == 1 Then LogInfo("TEST : MontantBase = MontantBase [%MontantBase%] + PrimaryMemberBaseAmt(Prim_Total_Plus [%Prim_Total_Plus%], Prim_Total_VR [%Prim_Total_VR%], Prim_Total_PRM [%Prim_Total_PRM%], Prim_Total_PMRV [%Prim_Total_PMRV%], Prim_Total_CORPO [%Prim_Total_CORPO%], TmpSSS0 [%TmpSSS0%], TmpSST0 [%TmpSST0%])")
	
										MontantBase = MontantBase + PrimaryMemberBaseAmt(Prim_Total_Plus, Prim_Total_VR, Prim_Total_PRM, Prim_Total_PMRV, Prim_Total_CORPO, TmpSSS0, TmpSST0)
									Else
										If LOG_ON_OFF == 1 Then LogInfo("TEST : TmpMB = NEW_P_AMT [%NEW_P_AMT%] + (Compte_Assoc [%Compte_Assoc%] * NEW_A_AMT) [%NEW_A_AMT%] + (Compte_Plus [%Compte_Plus%] * R_PLUS_E [%R_PLUS_E%]) + (Compte_VR [%Compte_VR%] * NEW_VR_AMT) [%NEW_VR_AMT%] + (Compte_PRM [%Compte_PRM%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_PMRV [%Compte_PMRV%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_Corpo [%Compte_Corpo%] * NEW_CORPO_PRIM_AMT [%NEW_CORPO_PRIM_AMT%])")
	
										TmpMB       = NEW_P_AMT + (Compte_Assoc * NEW_A_AMT) + (Compte_Plus * R_PLUS_E) + (Compte_VR * NEW_VR_AMT) + (Compte_PRM * OPTION_PRM_NOUV) + (Compte_PMRV * OPTION_PRM_NOUV) + (Compte_Corpo * NEW_CORPO_PRIM_AMT)
										MontantBase = TmpMB
									EndIf
									MontantBase = Format2Dec(MontantBase)
									If LOG_ON_OFF == 1 Then LogInfo("TEST : MontantBase : '%MontantBase%'")
	
	;								Rabais_VLT
	
									If Type_Rappel == 1 || Type_Rappel == 2
										CV_TOT_AMT_DUE              = DP_Total_Amount_Due - CV_TOT_DIS
										CV_TOT_AMT_DUE_BRUT         = CV_TOT_AMT_DUE 
										CV_TOT_AMT_DUE_BEF_DIS      = CV_TOT_AMT_DUE_BRUT + CV_TOT_DIS_CUMUL - DP_Adjustment_Amount
										CV_TOT_AMT_DUE_BEF_DIS_BRUT = CV_TOT_AMT_DUE_BEF_DIS
										T_NEW_AMT                   = NEW_P_AMT + (Compte_Assoc * NEW_A_AMT) + (Compte_Plus * R_PLUS_E) + (Compte_VR * NEW_VR_AMT) + (Compte_PRM * OPTION_PRM_NOUV) + (Compte_PMRV * OPTION_PRM_NOUV) + (Compte_Corpo * NEW_CORPO_PRIM_AMT)        
	
										If LOG_ON_OFF == 1 Then LogInfo("TEST : T_NEW_AMT = NEW_P_AMT [%NEW_P_AMT%] + (Compte_Assoc [%Compte_Assoc%] * NEW_A_AMT [%NEW_A_AMT%]) + (Compte_Plus [%Compte_Plus%] * R_PLUS_E [%R_PLUS_E%]) + (Compte_VR [%Compte_VR%] * NEW_VR_AMT [%NEW_VR_AMT%]) + (Compte_PRM [%Compte_PRM%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_PMRV [%Compte_PMRV%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_Corpo [%Compte_Corpo%]* NEW_CORPO_PRIM_AMT [%NEW_CORPO_PRIM_AMT%])")
	
										TmpERV                = CV_TOT_AMT_DUE_BEF_DIS_BRUT - T_NEW_AMT
	
										If Num_Modele  ==  1
											Rabais_VLT         = TmpERV
											If Is_Auto_WriteOff Then Rabais_VLT += Abs(Auto_WriteOff_Value)
											Rabais_VLT         = Format2Dec(Rabais_VLT)
										Else
											Rabais_VLT         = "0.00"
										EndIf
	
										If LOG_ON_OFF == 1 Then LogInfo("TEST : Rabais_VLT : '%Rabais_VLT%'")
									Else
										CV_TOT_DIS            = CV_TOT_DIS - DP_Adjustment_Amount                            
										CV_TOT_AMT_DUE        = DP_Total_Amount_Due 
										CV_TOT_AMT_DUE_BRUT   = CV_TOT_AMT_DUE 
										CV_TOT_AMT_DUE_BEF_DIS = CV_TOT_AMT_DUE_BRUT + CV_TOT_DIS
										CV_TOT_AMT_DUE_BEF_DIS_BRUT = CV_TOT_AMT_DUE_BEF_DIS
										If LOG_ON_OFF == 1 Then LogInfo("TEST : CV_TOT_DIS [%CV_TOT_DIS%], CV_TOT_AMT_DUE_BRUT [%CV_TOT_AMT_DUE_BRUT%], CV_TOT_AMT_DUE_BEF_DIS [%CV_TOT_AMT_DUE_BEF_DIS%], CV_TOT_AMT_DUE_BEF_DIS_BRUT [%CV_TOT_AMT_DUE_BEF_DIS_BRUT%]")
	
										T_NEW_AMT             = NEW_P_AMT + (Compte_Assoc * NEW_A_AMT) + (Compte_Plus * R_PLUS_E) + (Compte_VR * NEW_VR_AMT) + (Compte_PRM * OPTION_PRM_NOUV) + (Compte_PMRV * OPTION_PRM_NOUV) + (Compte_Corpo * NEW_CORPO_PRIM_AMT)        
										If LOG_ON_OFF == 1 Then LogInfo("TEST : T_NEW_AMT = NEW_P_AMT [%NEW_P_AMT%] + (Compte_Assoc [%Compte_Assoc%] * NEW_A_AMT [%NEW_A_AMT%]) + (Compte_Plus [%Compte_Plus%] * R_PLUS_E [%R_PLUS_E%]) + (Compte_VR [%Compte_VR%] * NEW_VR_AMT [%NEW_VR_AMT%]) + (Compte_PRM [%Compte_PRM%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_PMRV [%Compte_PMRV%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_Corpo [%Compte_Corpo%]* NEW_CORPO_PRIM_AMT [%NEW_CORPO_PRIM_AMT%])")
	
										TmpERV                = CV_TOT_AMT_DUE_BEF_DIS_BRUT - T_NEW_AMT    
										If LOG_ON_OFF == 1 Then LogInfo("TEST : TmpERV [%TmpERV%] = CV_TOT_AMT_DUE_BEF_DIS_BRUT [%CV_TOT_AMT_DUE_BEF_DIS_BRUT%] + T_NEW_AMT [%T_NEW_AMT%]")
	
										If Num_Modele  ==  1
											Rabais_VLT         = TmpERV
											If Is_Auto_WriteOff Then Rabais_VLT += Abs(Auto_WriteOff_Value)
											Rabais_VLT         = Format2Dec(Rabais_VLT)
										Else
											Rabais_VLT         = "0.00"
										EndIf
	
										If LOG_ON_OFF == 1 Then LogInfo("TEST : Rabais_VLT : '%Rabais_VLT%'")
	
									EndIf
	
	;								Ajustement suite au meeting avec la cliente Patricia (2023-06-27) (1)
									If Rabais_VLT < 0 && Rabais_VLT >= -2
										Rabais_VLT = "0.00"
									EndIF
	
	;								Ajustement suite au meeting avec la cliente Patricia (2023-06-27) (2)
									If DP_Rate_Type == "AC" || DP_Rate_Type == "291"
										Sous_Total_avec_taxes = "0.00"
									EndIF
	
									HInfoDPri  = StrCat(Annee, ",", Membre13PremNum, ",", Sequence, ",", MontantCredit, ",", MontantTotalFamille, ",", dtExpiration, ",", TypeRenouvellement, ",")
									HInfoDPri  = StrCat(HInfoDPri,  ModePaiement, ",", InfoDetailRA, ",", ExpirationCarteCredit, ",", SoldeDollarsCAA, ",", CreditDollarsCAA, ",", Rabais_obtenus, ",")
									HInfoDPri  = StrCat(HInfoDPri,  Sous_Total, ",", Sous_Total_avec_taxes, ",", MontantBase, ",", Rabais_VLT, ",", TPS, ",", TVQ, ",", CAA_TOP1, ",", CAA_TOP2, ",", IR_TOP1, ",", IR_TOP2, ",", DollarsCAAObtenus, ",", Num_Modele, ",")
									HInfoDPri  = StrCat(HInfoDPri,  dtProduction, ",", renewCarte, ",", Firstname, ",", LastName, ",", Langue, ",", Sexe, ",", optionMembre, ",", MontantBaseMembre, ",", eBill, ",", Upsell_Assoc, ",", FileEbillName, ",", Manu)
	
									If eBill          < 2
										FileWrite (hWPriEB, HInfoDPri)
									EndIf
								EndIf                                                                         ; Break to be repeated after EOF
	
	;**********************************************************************************************************************************
	
								If StrSub(StrLine, 1, 2) == "DP"
	
									If LOG_ON_OFF == 1 Then LogInfo("TEST : Traitement section 'DP' uniquement et client courant")
	
									IdxCD       = 0
									FirstDP = @True
	
									KitNO  = StrSub(StrLine, 691, 5)
									KitNOT = StrTrim(KitNO, 3)
									KitNOF = StrFixLeft(StrSub(KitNOT,1,(StrLen(KitNOT) - 1)) ,0 , 3)
	
	;								Note : Récupérer le nombre de Kits avant traitement du client 
									If StrTrim(StrSub(StrLine, 691, 5), 3) == "2A"
											Basic_Kit2A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "2F"
											Basic_Kit2F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "9A"
											Basic_Kit9A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "9F"
											Basic_Kit9F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "101A"
											Basic_Kit101A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "101F"
											Basic_Kit101F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "10A"
											Basic_Kit10A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "10F"
											Basic_Kit10F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "12A"
											Basic_Kit12A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "12F"
											Basic_Kit12F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "16A"
											Basic_Kit16A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "16F"
											Basic_Kit16F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "20A"
											Basic_Kit20A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "20F"
											Basic_Kit20F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "30A"
											Basic_Kit30A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "30F"
											Basic_Kit30F_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "300A"
											Basic_Kit300A_Total += 1
									ElseIf StrTrim(StrSub(StrLine, 691, 5), 3) == "300F"
											Basic_Kit300F_Total += 1
									EndIf
	
									If LOG_ON_OFF == 1 Then LogInfo("TEST : KitNO [%KitNO%], KitNOT [%KitNOT%], KitNOF [%KitNOF%]") 
	
									SortKey[IdxK, 0]   = ""                                                    ; SortKey#        Blank     
									SortKey[IdxK, 1]   = KitNOF                                                ; Kit#
									SortKey[IdxK, 2]   = ""                                                    ; Type1stCard     Blank                       
	
									If StrSub(StrLine, 686, 5) == "     "  
										SortKey[IdxK, 3]     = "M"                                              ; P-Dest                       
									Else   
										SortKey[IdxK, 3]     = "H"                                              ; P-Dest                       
									EndIf
	
									SortKey[IdxK, 4]   = ""                                                    ; All Same Card Type value could change order depending of the value                   
									SortKey[IdxK, 5]   = 0                                                     ; QtyCards                    
									SortKey[IdxK, 6]   = StrSub(StrLine, 5, 16)                                ; DPMemb#
	                    
									SortKey[IdxK, 7]   = StrSub(StrLine, 114, 1)                               ; Langue                 
									SortKey[IdxK, 8]   = ""                                                    ; GB_Automatic_Renewal                   
									SortKey[IdxK, 9]   = ""                                                    ; CAA_Seq
	
									Type_Rappel        = 0
									Page_Promo         = 0
	
									If KitNOF == "400"
										Type_Rappel     = 1
										Page_Promo      = 1
									EndIf
	
									If KitNOF == "401"
										ListCourriel_R2 = StrCat(ListCourriel_R2, StrSub(StrLine, 5, 6), " ", StrSub(StrLine, 11, 7), " ", StrSub(StrLine, 18, 3) , @CRLF)
										Type_Rappel     = 2
										Page_Promo      = 1
									EndIf
	
									Is_Auto_WriteOff    = @FALSE
									Auto_WriteOff_Value = 0
	
	;*****************************************************************************************************************************************
	;								Creation Principaux_Fichier_Ebill_%EBillED%.csv" 
	
									If ZIP_BM
	
										CV_IS_VLTDE          = 0  
										CV_IS_VLTE           = 0 
										CV_IS_VLTD           = 0 
										CV_IS_VLTABC         = 0  
	
										CV_TOT_DIS           = 0 
										CV_TOT_DIS_CUMUL     = 0 
										CV_TOT_AMT_DUE       = 0 
										CV_TOT_AMT_DUE_BRUT  = 0 
										CV_TOT_AMT_DUE_BEF_DIS = 0 
										CV_TOT_AMT_DUE_BEF_DIS_BRUT = 0 
	
										FamilyNo  = StrSub(StrLine, 11, 7)
	
										While FamilyNo > PremierAvis[IdxPA, 0] &&  IdxPA < (PARow - 1)
											IdxPA = IdxPA + 1
										EndWhile
	
										If FamilyNo == PremierAvis[IdxPA, 0]
											Rabais_obtenus       = PremierAvis[IdxPA, 1]                         ; PremierAvis col 1
											DollarsCAAObtenus    = PremierAvis[IdxPA, 4]                         ; PremierAvis col 4
										Else
											Rabais_obtenus       = "0.00"                                        ; PremierAvis col 1
											DollarsCAAObtenus    = "0.00"                                        ; PremierAvis col 4
										EndIf
	
										Annee                = StrSub(EBillED, 1, 4)   
										Membre13PremNum      = StrSub(StrLine, 5, 13)                           ; DP Type record
										Sequence             = FBSeq
	
										DP_Adjustment_Amount = StrTrim(StrSub(StrLine, 480, 6), 3)              ; DP_Adjustment_amount
										Previous_Amount_Due  = 0
	
										Tmp_Amount_Due       = StrTrim(StrSub(StrLine, 469, 6))                 ; DP_Previous_Amount_Due
										Tmp_Amount_tax       = StrTrim(StrSub(StrLine, 475, 5))                 ; DP_Previous_Amount_Tax
	
										If IsNumber(Tmp_Amount_Due) && IsNumber(Tmp_Amount_Tax)
											Previous_Amount_Due = Tmp_Amount_Due + Tmp_Amount_Tax
										EndIf
	
										if Previous_Amount_Due > 0
											DP_Adjustment_Amount = Previous_Amount_Due                           ; DP_Adjustment_amount
										EndIf
	
										MontantCredit        = Format2Dec(DP_Adjustment_Amount)
	
										TmpMTF                  = StrTrim(StrSub(StrLine, 453, 6), 3)           ; DP Type record
										MontantTotalFamille     = Format2Dec(TmpMTF)
										dtExpiration         = EBillED
										InfoDetailRA         = ""
										ExpirationCarteCredit = ""
	
										TmpSS                = 0 
										TmpSSTx              = 0
	
										TmpSSS0              = StrTrim(StrSub(StrLine, 459, 5))                 ; DP Type record  Basic Amount_Due
										If IsNumber(TmpSSS0)
											TmpSS = TmpSS + TmpSSS0
										EndIf
	
										TmpSSS1              = StrTrim(StrSub(StrLine, 496, 5))                 ; DP Type record  Additional_Charge_Amount_1
										If IsNumber(TmpSSS1)
											TmpSS = TmpSS + TmpSSS1
										EndIf
										TmpSSS2              = StrTrim(StrSub(StrLine, 516, 5))                 ; DP Type record  Additional_Charge_Amount_2
										If IsNumber(TmpSSS2)
											TmpSS = TmpSS + TmpSSS2
										EndIf
										TmpSSS3              = StrTrim(StrSub(StrLine, 536, 5))                 ; DP Type record  Additional_Charge_Amount_3
										If IsNumber(TmpSSS3)
											TmpSS = TmpSS + TmpSSS3
										EndIf
										TmpSSS4              = StrTrim(StrSub(StrLine, 556, 5))                 ; DP Type record  Additional_Charge_Amount_4 
										If IsNumber(TmpSSS4)
											TmpSS = TmpSS + TmpSSS4
										EndIf
										TmpSSS5              = StrTrim(StrSub(StrLine, 576, 5))                 ; DP Type record  Additional_Charge_Amount_5
										If IsNumber(TmpSSS5)
											TmpSS = TmpSS + TmpSSS5
										EndIf
										TmpSSS6              = StrTrim(StrSub(StrLine, 469, 6))                 ; DP_Previous_Amount_Due
										If IsNumber(TmpSSS6)
											TmpSS = TmpSS + TmpSSS6
										EndIf
	
										TmpSST0              = StrTrim(StrSub(StrLine, 464, 5))                 ; DP Type record  Basic Amount_Tax
										If IsNumber(TmpSST0)
											TmpSSTx = TmpSSTx + TmpSST0
										EndIf
	
										TmpSST1              = StrTrim(StrSub(StrLine, 501, 5))                 ; DP Type record  Additional_Charge_Tax_1
										If IsNumber(TmpSST1)
											TmpSSTx = TmpSSTx + TmpSST1
										EndIf
										TmpSST2              = StrTrim(StrSub(StrLine, 521, 5))                 ; DP Type record  Additional_Charge_Tax_2
										If IsNumber(TmpSST2)
											TmpSSTx = TmpSSTx + TmpSST2
										EndIf
										TmpSST3              = StrTrim(StrSub(StrLine, 541, 5))                 ; DP Type record  Additional_Charge_Tax_3
										If IsNumber(TmpSST3)
											TmpSSTx = TmpSSTx + TmpSST3
										EndIf
										TmpSST4              = StrTrim(StrSub(StrLine, 561, 5))                 ; DP Type record  Additional_Charge_Tax_4
										If IsNumber(TmpSST4)
											TmpSSTx = TmpSSTx + TmpSST4
										EndIf
										TmpSST5              = StrTrim(StrSub(StrLine, 581, 5))                 ; DP Type record  Additional_Charge_Tax_5
										If IsNumber(TmpSST5)
											TmpSSTx = TmpSSTx + TmpSST5
										EndIf
										TmpSST6              = StrTrim(StrSub(StrLine, 475, 5))                 ; DP_Previous_Amount_Tax
										If IsNumber(TmpSST6)
											TmpSSTx = TmpSSTx + TmpSST6
										EndIf
	
										CAA_TOP1             = ""
										CAA_TOP2             = ""
										IR_TOP1              = ""
										IR_TOP2              = ""
	
										DP_Rate_Type         = StrTrim(StrSub(StrLine, 155, 5))                 ; DP Type record
										DP_Total_Amount_Due  = StrTrim(StrSub(StrLine, 453, 6))                 ; DP_Total_amount_Due
	
										DP_Adjustment_Amount = StrTrim(StrSub(StrLine, 480, 6))                 ; DP_Adjustment_amount
	
										Previous_Amount_Due  = 0
	
										Tmp_Amount_Due       = StrTrim(StrSub(StrLine, 469, 6))                 ; DP_Previous_Amount_Due
										Tmp_Amount_tax       = StrTrim(StrSub(StrLine, 475, 5))                 ; DP_Previous_Amount_Tax
	
										If IsNumber(Tmp_Amount_Due) && IsNumber(Tmp_Amount_Tax)
											Previous_Amount_Due = Tmp_Amount_Due + Tmp_Amount_Tax
										EndIf
	
										if Previous_Amount_Due > 0
											DP_Adjustment_Amount = Previous_Amount_Due                           ; DP_Adjustment_amount
										EndIf
	
										If DP_Rate_Type == "AC" || DP_Rate_Type == "291"  
											Num_Modele        = 2                                                ; if CV_IS_A_LA_CARTE = 1  oui NM = 2  sinon NM = 1
										Else 
											Num_Modele        = 1                                                ; if CV_IS_A_LA_CARTE = 0  oui NM = 2  sinon NM = 1  
										EndIf
	
										dtProduction         = ProdDate                                         ; H  Type record  pos 46 a 53
										renewCarte           = 0                                                ; Mettre a 0 pour tous, logique a implanter plus tard
										Firstname            = StrTrim(StrSub(StrLine, 46, 20))                 ; DP Type record 
										LastName             = StrTrim(StrSub(StrLine, 26, 20))                 ; DP Type record 
										Langue               = StrSub(StrLine, 114, 1)                          ; DP Type record 
										Sexe                 = StrSub(StrLine, 739, 1)                          ; DP Type record
	 
										Compte_Assoc         = 0
										Compte_Plus          = 0
										Compte_VR            = 0
										Compte_PRM           = 0
										Compte_PMRV          = 0
										Compte_Corpo         = 0
	
										Prim_Total_Plus      = 0
										Prim_Total_VR        = 0
										Prim_Total_PRM       = 0
										Prim_Total_PMRV      = 0
										Prim_Total_Corpo     = 0
										Assoc_Total_Plus     = 0
										Assoc_Total_VR       = 0
										Assoc_Total_PRM      = 0
										Assoc_Total_PMRV     = 0
										Assoc_Total_Corpo    = 0
	
										Depart_pos           = 486  
										Code_L               = 10
										Amount_L             = 5
										Tax_L                = 5
										Nb_Item              = 3
	
										C_Amount             = 0
										C_Tax                = 0
										MontantBase          = 0
	
										For Idx_AC = 1 to Nb_Item
											Code_Str = StrTrim(StrSub(StrLine, Depart_pos, Code_L) , 3) 
											Amount_Str = StrTrim(StrSub(StrLine, (Depart_pos + Code_L) , Amount_L) , 3) 
											Tax_Str = StrTrim(StrSub(StrLine, (Depart_pos + Code_L + Amount_L), Tax_L) , 3) 
	
											If IsNumber(Amount_Str) && Amount_Str != "0"
												C_Amount       = Amount_Str
											Else
												C_Amount       = 0
											EndIf
	
											If IsNumber(Tax_Str) && Tax_Str != "0"
												C_Tax          = Tax_Str
											Else
												C_Tax          = 0
											EndIf
	
											If Code_Str == "PLUS"
												Compte_Plus       = Compte_Plus + 1
												Prim_Total_Plus   = C_Amount + C_Tax 
											ElseIF Code_Str == "VR" 
												Compte_VR         = Compte_VR + 1
												Prim_Total_VR     = C_Amount + C_Tax
											ElseIF Code_Str == "PREMIER" 
												Compte_PRM        = Compte_PRM + 1
												Prim_Total_PRM    = C_Amount + C_Tax
											ElseIF Code_Str == "PMRV" 
												Compte_PMRV       = Compte_PMRV + 1
												Prim_Total_PMRV   = C_Amount + C_Tax
											ElseIF Code_Str == "CORPO" 
												Compte_Corpo      = Compte_Corpo + 1
												Prim_Total_Corpo  = C_Amount + C_Tax
											EndIf
	
											Depart_pos =  Depart_pos + Code_L + Amount_L + Tax_L 
										Next
	
										If StrSub(StrLine, 486, 10) == "          "                             ; DP Type record   Additionnal Charge Code 1
											If StrTrim(StrSub(StrLine, 155, 5), 3) == "AC"                       ; DP Type record   Rate Type 
												optionMembre   = "AL"
											Else
												optionMembre   = "BA"
											EndIf
										ElseIf StrSub(StrLine, 506, 10) == "          "                         ; DP Type record   Additionnal Charge Code 2
											optionMembre      = StrTrim(StrSub(StrLine, 486, 10) , 3)            ; DP Type record   Additionnal Charge Code 1
										ElseIf StrSub(StrLine, 526, 10) == "          "                         ; DP Type record   Additionnal Charge Code 3
											optionMembre      = StrTrim(StrSub(StrLine, 506, 10) , 3)            ; DP Type record   Additionnal Charge Code 2
										Else 
											optionMembre      = StrTrim(StrSub(StrLine, 526, 10) , 3)            ; DP Type record   Additionnal Charge Code 3
										EndIf
	
										If optionMembre == "PLUS"
											optionMembre      = "PL"
										ElseIF optionMembre == "VR" 
											optionMembre      = "RV" 
										ElseIF optionMembre == "PREMIER" 
											optionMembre      = "PM"
										ElseIF optionMembre == "PMRV" 
											optionMembre      = "PV"
										ElseIF optionMembre == "CORPO" 
											optionMembre      = "CP"
										EndIf
	
										If LOG_ON_OFF == 1 Then LogInfo("TEST : TmpMBM = TmpSS [%TmpSS%] + TmpSSTx [%TmpSSTx%]")
										TmpMBM               = TmpSS + TmpSSTx
										MontantBaseMembre    = TmpMBM
	
										If DP_Adjustment_Amount > 0 
											MontantBaseMembre    = TmpMBM - DP_Adjustment_Amount
										EndIf
	
										MontantBaseMembre = Format2Dec(MontantBaseMembre)
										If LOG_ON_OFF == 1 Then LogInfo("TEST : MontantBaseMembre : '%MontantBaseMembre%'")
	
										If StrSub(StrLine, 429, 1) == "D" || StrSub(StrLine, 3, 1) != "1"
											eBill             = 3
										Else
											If SortKey[IdxK, 1] == "950"
												eBill          = 1
											Else
												eBill          = 0
											EndIf
										EndIf
	
										if ech_
											FileEbillName        = "Fichier Ebill_%EBillED%_Ech.csv"
										Else
											FileEbillName        = "Fichier Ebill_%EBillED%.csv"
										EndIf
	
										DP_Special_Handling_Code = StrTrim(StrSub(StrLine, 686, 5))
										If DP_Special_Handling_Code == "C_ONT"
											Manu              = DP_Special_Handling_Code
										Else
											Manu              = ""
										EndIf
	
	;									Ajustement avec NDH & MIKE & TOUFIK Pour Valeur 'CV_IS_BASE'
										If DP_Rate_Type == "AC" || DP_Rate_Type == "291"  
											CV_IS_A_LA_CARTE = 1
										Else 
											CV_IS_A_LA_CARTE = 0
										EndIf
									EndIf                                                                      ; If ZIP_BM  
								EndIf                                                                         ; If StrSub(StrLine, 1, 2) == "DP"
	
								;2BCumul
								KitNOT = StrTrim(StrSub(StrLine, 691, 5), 3)
								KitNOF = StrFixLeft(StrSub(KitNOT,1,(StrLen(KitNOT) - 1)) ,0 , 3)
								If StrSub(StrLine, 80 , 1) != "N"
									IdxCD = IdxCD + 1
									If IdxCD == 1
										SortKey[IdxK, 2]   = StrFixLeft(StrSub(StrLine, 80, 1), "0", 3)         ; P-Type1stCard                       
										SortKey[IdxK, 4]   = "A"                                                ; All Same Card Type     
									EndIf
	
									If StrFixLeft(StrSub(StrLine, 80, 1), "0", 3) !=  SortKey[IdxK, 2]
										SortKey[IdxK, 4]   = "M"                                                ; Multi Card Types
									EndIf
	
									SortKey[IdxK, 5]      =  StrFixLeft(IdxCD, 0, 3)                           ; P-QtyCards
	
	;								Stat pour le nombre de cartes de different Types
									If StrSub(StrLine, 80 , 1) == "0"
										SortKey[IdxK, 10]  = SortKey[IdxK, 10] + 1                              ; Type de carte 0  Basic
									EndIf
	
									If StrSub(StrLine, 80 , 1) == "1"
										SortKey[IdxK, 11]  = SortKey[IdxK, 11] + 1                              ; Type de carte 1  Plus
									EndIf
	
									If StrSub(StrLine, 80 , 1) == "2"
										SortKey[IdxK, 12]  = SortKey[IdxK, 12] + 1                              ; Type de carte 2  Plus RV
									EndIf
	
									If StrSub(StrLine, 80 , 1) == "3"
										SortKey[IdxK, 13]  = SortKey[IdxK, 13] + 1                              ; Type de carte 3  A la carte
									EndIf
	
									If StrSub(StrLine, 80 , 1) == "4"
										SortKey[IdxK, 14]  = SortKey[IdxK, 14] + 1                              ; Type de carte 4  Premier
									EndIf
	
									If StrSub(StrLine, 80 , 1) == "5"
										SortKey[IdxK, 15]  = SortKey[IdxK, 15] + 1                              ; Type de carte 5  Premier RV
									EndIf
	
									If StrSub(StrLine, 80 , 1) == "6"
										SortKey[IdxK, 16]  = SortKey[IdxK, 16] + 1                              ; Type de carte 6  Corporate
									EndIf
	
								EndIf
	
	;*****************************************************************************************************************************************
	;							Creation Associes_Fichier Ebill_%EBillED%.csv
	
								If StrSub(StrLine, 1, 2) == "DA" && ZIP_BM
									AAnnee                = StrSub(EBillED, 1, 4) 
									AMembre16PremNum      = StrSub(StrLine, 5, 16)                             ; DA Type record
									AMembre13PremNum      = StrSub(StrLine, 5, 13)                             ; DA Type record
									AFirstname            = StrTrim(StrSub(StrLine, 46, 20))                   ; DA Type record 
									ALastName             = StrTrim(StrSub(StrLine, 26, 20))                   ; DA Type record 
									AMembre18PremNum      = StrCat(StrSub(StrLine, 5, 6), " ", StrSub(StrLine, 11, 7), " ",  StrSub(StrLine, 18, 3))  ; DA Type record
									Compte_Assoc          = Compte_Assoc + 1
									Depart_pos            = 486  
	
									For Idx_AC = 1 to Nb_Item
										Code_Str = StrTrim(StrSub(StrLine, Depart_pos, Code_L) , 3) 
										Amount_Str = StrTrim(StrSub(StrLine, (Depart_pos + Code_L) , Amount_L) , 3) 
										Tax_Str = StrTrim(StrSub(StrLine, (Depart_pos + Code_L + Amount_L), Tax_L) , 3) 
	
										If IsNumber(Amount_Str) && Amount_Str != "0"
											C_Amount       = Amount_Str
										Else
											C_Amount       = 0
										EndIf
	
										If IsNumber(Tax_Str) && Tax_Str != "0"
											C_Tax          = Tax_Str
										Else
											C_Tax          = 0
										EndIf
	
										If Code_Str == "PLUS"
											Compte_Plus       = Compte_Plus + 1
											Assoc_Total_Plus  = C_Amount + C_Tax 
										ElseIF Code_Str == "VR" 
											Compte_VR         = Compte_VR + 1
											Assoc_Total_VR    = C_Amount + C_Tax
										ElseIF Code_Str == "PREMIER" 
											Compte_PRM        = Compte_PRM + 1
											Assoc_Total_PRM   = C_Amount + C_Tax
										ElseIF Code_Str == "PMRV" 
											Compte_PMRV       = Compte_PMRV + 1
											Assoc_Total_PMRV  = C_Amount + C_Tax
										ElseIF Code_Str == "CORPO" 
											Compte_Corpo      = Compte_Corpo + 1
											Assoc_Total_Corpo = C_Amount + C_Tax
										EndIf
	
										Depart_pos =  Depart_pos + Code_L + Amount_L + Tax_L 
									Next
	
									If StrSub(StrLine, 486, 10) == "          "                                ; DA Type record   Additionnal Charge Code 1
										If StrTrim(StrSub(StrLine, 155, 5), 3) == "AC"                          ; DA Type record   Rate Type 
											ANomCarte      = "AL"
										Else
											ANomCarte      = "BA"
										EndIf
									ElseIf StrSub(StrLine, 506, 10) == "          "                            ; DA Type record   Additionnal Charge Code 2
										ANomCarte         = StrTrim(StrSub(StrLine, 486, 10) , 3)               ; DA Type record   Additionnal Charge Code 1
									ElseIf StrSub(StrLine, 526, 10) == "          "                            ; DA Type record   Additionnal Charge Code 3
										ANomCarte         = StrTrim(StrSub(StrLine, 506, 10) , 3)               ; DA Type record   Additionnal Charge Code 2
									Else 
										ANomCarte         = StrTrim(StrSub(StrLine, 526, 10) , 3)               ; DA Type record   Additionnal Charge Code 3
									EndIf
	
									If ANomCarte == "PLUS"
										ANomCarte = "PL"
									ElseIF ANomCarte == "VR" 
										ANomCarte = "RV" 
									ElseIF ANomCarte == "PREMIER" 
										ANomCarte = "PM"    
									ElseIF ANomCarte == "PMRV" 
										ANomCarte = "PV"    
									ElseIF ANomCarte == "CORPO" 
										ANomCarte = "CP"    
									EndIf
	
									TmpSSS0              = StrTrim(StrSub(StrLine, 459, 5))                    ; DA Type record  Basic Amount_Due
									If IsNumber(TmpSSS0)
										TmpSS = TmpSS + TmpSSS0
									EndIf
									TmpSSS1              = StrTrim(StrSub(StrLine, 496, 5))                    ; DA Type record  Additional_Charge_Amount_1
									If IsNumber(TmpSSS1)
										TmpSS = TmpSS + TmpSSS1
									EndIf
									TmpSSS2              = StrTrim(StrSub(StrLine, 516, 5))                    ; DA Type record  Additional_Charge_Amount_2
									If IsNumber(TmpSSS2)
										TmpSS = TmpSS + TmpSSS2
									EndIf
									TmpSSS3              = StrTrim(StrSub(StrLine, 536, 5))                    ; DA Type record  Additional_Charge_Amount_3
									If IsNumber(TmpSSS3)
										TmpSS = TmpSS + TmpSSS3
									EndIf
									TmpSSS4              = StrTrim(StrSub(StrLine, 556, 5))                    ; DA Type record  Additional_Charge_Amount_4
									If IsNumber(TmpSSS4)
										TmpSS = TmpSS + TmpSSS4
									EndIf
									TmpSSS5              = StrTrim(StrSub(StrLine, 576, 5))                    ; DA Type record  Additional_Charge_Amount_5
									If IsNumber(TmpSSS5)
										TmpSS = TmpSS + TmpSSS5
									EndIf
	
									TmpSST0              = StrTrim(StrSub(StrLine, 464, 5))                    ; DA Type record  Basic Amount_Tax
									If IsNumber(TmpSST0)
										TmpSSTx = TmpSSTx + TmpSST0
									EndIf
									TmpSST1              = StrTrim(StrSub(StrLine, 501, 5))                    ; DA Type record  Additional_Charge_Tax_1
									If IsNumber(TmpSST1)
										TmpSSTx = TmpSSTx + TmpSST1
									EndIf
									TmpSST2              = StrTrim(StrSub(StrLine, 521, 5))                    ; DA Type record  Additional_Charge_Tax_2
									If IsNumber(TmpSST2)
										TmpSSTx = TmpSSTx + TmpSST2
									EndIf
									TmpSST3              = StrTrim(StrSub(StrLine, 541, 5))                    ; DA Type record  Additional_Charge_Tax_3
									If IsNumber(TmpSST3)
										TmpSSTx = TmpSSTx + TmpSST3
									EndIf
									TmpSST4              = StrTrim(StrSub(StrLine, 561, 5))                    ; DA Type record  Additional_Charge_Tax_4
									If IsNumber(TmpSST4)
										TmpSSTx = TmpSSTx + TmpSST4
									EndIf
									TmpSST5              = StrTrim(StrSub(StrLine, 581, 5))                    ; DA Type record  Additional_Charge_Tax_5
									If IsNumber(TmpSST5)
										TmpSSTx = TmpSSTx + TmpSST5
									EndIf
	
	;								LogInfo("TEST : TmpMB = TmpSSS0 [%TmpSSS0%] + TmpSSS1 [%TmpSSS1%] + TmpSSS2 [%TmpSSS2%] + TmpSSS3 [%TmpSSS3%] + TmpSSS4 [%TmpSSS4%] + TmpSSS5 [%TmpSSS5%] + TmpSST0 [%TmpSST0%] + TmpSST1 [%TmpSST1%] + TmpSST2 [%TmpSST2%] + TmpSST3 [%TmpSST3%] + TmpSST4 [%TmpSST4%] + TmpSST5 [%TmpSST5%]")
									TmpMB                 = TmpSSS0 + TmpSSS1 + TmpSSS2 + TmpSSS3 + TmpSSS4 + TmpSSS5 + TmpSST0  + TmpSST1 + TmpSST2 + TmpSST3 + TmpSST4 + TmpSST5
	
									If DP_Rate_Type == "AC" || DP_Rate_Type == "291"  
	;									LogInfo("TEST : MontantBase = AdditionalMemberBaseAmt(Assoc_Total_Plus [%Assoc_Total_Plus%], Assoc_Total_VR [%Assoc_Total_VR%], Assoc_Total_PRM [%Assoc_Total_PRM%], Assoc_Total_PMRV [%Assoc_Total_PMRV%], Assoc_Total_Corpo [%Assoc_Total_Corpo%], TmpSSS0 [%TmpSSS0%], TmpSST0 [%TmpSST0%])") 
										AMontantBase    = AdditionalMemberBaseAmt(Assoc_Total_Plus, Assoc_Total_VR, Assoc_Total_PRM, Assoc_Total_PMRV, Assoc_Total_Corpo, TmpSSS0, TmpSST0)
									Else 
	;									LogInfo("TEST : AMontantBase = TmpMB [%TmpMB%]") 
										AMontantBase    = TmpMB
									EndIf
	
									MontantBase        = MontantBase + AMontantBase
									AMontantBase       = Format2Dec(AMontantBase)
	
									AdtProduction         = ProdDate
									AdtExpiration         = EBillED
									AdtCreated            = TDate
									
									HInfoDAss  = StrCat(AAnnee, ",", AMembre16PremNum, ",", AMembre13PremNum, ",", AFirstname, ",", ALastName, ",", AMembre18PremNum, ",", ANomCarte, ",", AMontantBase, ",", AdtProduction, ",", AdtExpiration, ",", AdtCreated)
	
									If eBill          < 2
										FileWrite (hWAssEB, HInfoDAss)
									EndIf
								EndIf
	
	;*****************************************************************************************************************************************
							EndIf
							StrLine = FileRead(hRead)
						EndWhile
	
						FileClose(hRead)
						LogInfo("Closing file [%ConcatFN%] for [READ]") 
	
						If ListCourriel_R2 != ""
							
							if ech_
								Courriel_R2 = "%WorkDirCurrentWork%\Courriel_R2_%LC_R2%_Ech.csv" 
							Else
								Courriel_R2 = "%WorkDirCurrentWork%\Courriel_R2_%LC_R2%.csv" 
							EndIf
							FilePut(Courriel_R2, ListCourriel_R2)    
						EndIf
	
						;LogInfo(" IdxCD -- [%IdxCD%]  ***  StrLine --  [%StrLine%] ")
						If IdxCD != 0                                                                       ; Break to be repeated after EOF 
							;LogInfo(" DP Break ")
	
							;Key #1               ; Lang#    
							;Key #2               ; Kit#    
							;Key #3               ; Type1stCard 
							;Key #4               ; Dest
							;Key #5               ; All Same Card Type Or Multi types
							;Key #6               ; QtyCards
							;Key #7               ; DPMemb#
	  
							If SortKey[IdxK, 1] == "010" || SortKey[IdxK, 1] == "012" || SortKey[IdxK, 1] == "016" || SortKey[IdxK, 1] == "020" || SortKey[IdxK, 1] == "030" 
								If SortKey[IdxK, 7] == "E"
									SortKey[IdxK, 7] = "G"
								EndIf
								If SortKey[IdxK, 7] == "F"
									SortKey[IdxK, 7] = "H"
								EndIf
							EndIf
	
							SortKey[IdxK, 0] = StrCat(SortKey[IdxK, 7], SortKey[IdxK, 1], SortKey[IdxK, 2], SortKey[IdxK, 3], SortKey[IdxK, 4], SortKey[IdxK, 5], SortKey[IdxK, 6])       
							IdxK = IdxK + 1
						EndIf                                                                               ; End If IdxCD != 0                                                                     
	
						If ZIP_BM
	
							If LOG_ON_OFF == 1 Then LogInfo("TEST : Sous_Total_avec_taxes = Format2Dec(DP_Total_Amount_Due) Format2Dec([%DP_Total_Amount_Due%]) + CreditDollarsCAA [%CreditDollarsCAA%]")
							Sous_Total_avec_taxes = Format2Dec(DP_Total_Amount_Due) + CreditDollarsCAA
	
	;						Ne prendre en considération le MontantCredit que s'il est un "solde reporté" (DP_Adjustment_Amount) donc négatif
							if MontantCredit < 0
								If LOG_ON_OFF == 1 Then LogInfo("TEST : Sous_Total_avec_taxes -= MontantCredit [%MontantCredit%]")
								Sous_Total_avec_taxes -= MontantCredit 
							EndIf
	
							TmpSumTaxesPercentage = 1 + TPS_RATE + TVQ_RATE
							If LOG_ON_OFF == 1 Then LogInfo("TEST : Sous_Total = Sous_Total_avec_taxes [%Sous_Total_avec_taxes%] / TmpSumTaxesPercentage [%TmpSumTaxesPercentage%]")
							Sous_Total = Sous_Total_avec_taxes / TmpSumTaxesPercentage
							If LOG_ON_OFF == 1 Then LogInfo("TEST : TPS = Sous_Total [%Sous_Total%] * TPS_RATE [%TPS_RATE%]")
							TPS = Sous_Total * TPS_RATE
							If LOG_ON_OFF == 1 Then LogInfo("TEST : TVQ = Sous_Total [%Sous_Total%] * TVQ_RATE [%TVQ_RATE%]")
							TVQ = Sous_Total * TVQ_RATE
							Decimals(2)
							Sous_Total = Sous_Total
							TPS = TPS
							TVQ = TVQ
							If !IsNumber(Sous_Total_avec_taxes) || Sous_Total_avec_taxes == "0"
								Sous_Total_avec_taxes = "0.00"
								TVQ                   = "0.00" 
							EndIf
	
							If DP_Rate_Type == "AC" || DP_Rate_Type == "291"  
								MontantBase       = "0.00"
							Else 
								TmpMB             = NEW_P_AMT + (Compte_Assoc * NEW_A_AMT) + (Compte_Plus * R_PLUS_E) + (Compte_VR * NEW_VR_AMT) + (Compte_PRM * OPTION_PRM_NOUV) + (Compte_PMRV * OPTION_PRM_NOUV) + (Compte_Corpo * NEW_CORPO_PRIM_AMT)         
								MontantBase       = Format2Dec(TmpMB)
							EndIf
	
	;						Rabais_VLT
	
							If Type_Rappel == 1 || Type_Rappel == 2
								CV_TOT_AMT_DUE = DP_Total_Amount_Due - CV_TOT_DIS
								CV_TOT_AMT_DUE_BRUT = CV_TOT_AMT_DUE 
								CV_TOT_AMT_DUE_BEF_DIS = CV_TOT_AMT_DUE_BRUT + CV_TOT_DIS_CUMUL - DP_Adjustment_Amount
								CV_TOT_AMT_DUE_BEF_DIS_BRUT = CV_TOT_AMT_DUE_BEF_DIS
	
								T_NEW_AMT             = NEW_P_AMT + (Compte_Assoc * NEW_A_AMT) + (Compte_Plus * R_PLUS_E) + (Compte_VR * NEW_VR_AMT) + (Compte_PRM * OPTION_PRM_NOUV) + (Compte_PMRV * OPTION_PRM_NOUV) + (Compte_Corpo * NEW_CORPO_PRIM_AMT)        
	
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: T_NEW_AMT = NEW_P_AMT [%NEW_P_AMT%] + (Compte_Assoc [%Compte_Assoc%] * NEW_A_AMT [%NEW_A_AMT%]) + (Compte_Plus [%Compte_Plus%] * R_PLUS_E [%R_PLUS_E%]) + (Compte_VR [%Compte_VR%] * NEW_VR_AMT [%NEW_VR_AMT%]) + (Compte_PRM [%Compte_PRM%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_PMRV [%Compte_PMRV%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_Corpo [%Compte_Corpo%]* NEW_CORPO_PRIM_AMT [%NEW_CORPO_PRIM_AMT%])")
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: T_NEW_AMT : '%T_NEW_AMT%'")
	
								TmpERV                = CV_TOT_AMT_DUE_BEF_DIS_BRUT - T_NEW_AMT
	
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: TmpERV : '%TmpERV%'")
	
								If Num_Modele  ==  1
									Rabais_VLT         = TmpERV
									If Is_Auto_WriteOff Then Rabais_VLT += Abs(Auto_WriteOff_Value)
									Rabais_VLT         = Format2Dec(Rabais_VLT)
							   Else
									Rabais_VLT         = "0.00"
								EndIf
	
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: Rabais_VLT [%Rabais_VLT%]")
							Else
								CV_TOT_DIS            = CV_TOT_DIS - DP_Adjustment_Amount                            
								CV_TOT_AMT_DUE        = DP_Total_Amount_Due 
								CV_TOT_AMT_DUE_BRUT   = CV_TOT_AMT_DUE 
								CV_TOT_AMT_DUE_BEF_DIS = CV_TOT_AMT_DUE_BRUT + CV_TOT_DIS
								CV_TOT_AMT_DUE_BEF_DIS_BRUT = CV_TOT_AMT_DUE_BEF_DIS
	
								T_NEW_AMT             = NEW_P_AMT + (Compte_Assoc * NEW_A_AMT) + (Compte_Plus * R_PLUS_E) + (Compte_VR * NEW_VR_AMT) + (Compte_PRM * OPTION_PRM_NOUV) + (Compte_PMRV * OPTION_PRM_NOUV) + (Compte_Corpo * NEW_CORPO_PRIM_AMT)        
	
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: T_NEW_AMT = NEW_P_AMT [%NEW_P_AMT%] + (Compte_Assoc [%Compte_Assoc%] * NEW_A_AMT [%NEW_A_AMT%]) + (Compte_Plus [%Compte_Plus%] * R_PLUS_E [%R_PLUS_E%]) + (Compte_VR [%Compte_VR%] * NEW_VR_AMT [%NEW_VR_AMT%]) + (Compte_PRM [%Compte_PRM%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_PMRV [%Compte_PMRV%] * OPTION_PRM_NOUV [%OPTION_PRM_NOUV%]) + (Compte_Corpo [%Compte_Corpo%]* NEW_CORPO_PRIM_AMT [%NEW_CORPO_PRIM_AMT%])")
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: T_NEW_AMT : '%T_NEW_AMT%'")
	
								TmpERV                = CV_TOT_AMT_DUE_BEF_DIS_BRUT - T_NEW_AMT    
	
								Rabais_VLT            = Format2Dec(TmpERV)
	
								If Num_Modele  ==  1
									Rabais_VLT         = TmpERV
									If Is_Auto_WriteOff Then Rabais_VLT += Abs(Auto_WriteOff_Value)
									Rabais_VLT         = Format2Dec(Rabais_VLT)
								Else
									Rabais_VLT         = "0.00"
								EndIf
	
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: Rabais_VLT [%Rabais_VLT%]")
							EndIf
	
							If Rabais_VLT < 0 && Rabais_VLT >= -2
								Rabais_VLT = "0.00"
								If LOG_ON_OFF == 1 Then LogInfo("TEST 2: -2 < Rabais_VLT < 0 - [%Rabais_VLT%]")
							EndIF
	
							If DP_Rate_Type == "AC" || DP_Rate_Type == "291"
								Sous_Total_avec_taxes = "0.00"
							EndIF
	
							If FirstDP                                                              
								HInfoDPri  = StrCat(Annee, ",", Membre13PremNum, ",", Sequence, ",", MontantCredit, ",", MontantTotalFamille, ",", dtExpiration, ",", TypeRenouvellement, ",")
								HInfoDPri  = StrCat(HInfoDPri,  ModePaiement, ",", InfoDetailRA, ",", ExpirationCarteCredit, ",", SoldeDollarsCAA, ",", CreditDollarsCAA, ",", Rabais_obtenus, ",")
								HInfoDPri  = StrCat(HInfoDPri,  Sous_Total, ",", Sous_Total_avec_taxes, ",", MontantBase, ",", Rabais_VLT, ",", TPS, ",", TVQ, ",", CAA_TOP1, ",", CAA_TOP2, ",", IR_TOP1, ",", IR_TOP2, ",", DollarsCAAObtenus, ",", Num_Modele, ",")
								HInfoDPri  = StrCat(HInfoDPri,  dtProduction, ",", renewCarte, ",", Firstname, ",", LastName, ",", Langue, ",", Sexe, ",", optionMembre, ",", MontantBaseMembre, ",", eBill, ",", Upsell_Assoc, ",", FileEbillName, ",", Manu)
								If eBill          < 2
									FileWrite (hWPriEB, HInfoDPri)
								EndIf
							EndIf                                                                            ; Break to be repeated after EOF
	
							FileClose(hWPriEB)
							LogInfo("Closing file [%FilePriEB%] for [WRITE]") 
	
							FileClose(hWAssEB)
							LogInfo("Closing file [%FileAssEB%]  for [WRITE]") 
						EndIf                                                                               ; End If ZIP_BM
	
	;******************************************************************************************************************************************
	
						LogInfo("Start Sorting SortKey")
	
						If (IdxK > 0)
							ArrayRedim(SortKey, IdxK, NbInfo)
							ArraySort(SortKey, @ASCENDING, 0)                                                ; Sort Key   Build SortKey
						EndIf
	
						LogInfo("End Sorting SortKey")
	 
	;******************************************************************************************************************************************
	
					EndIf                                                                                  ; End If hRead
				EndIf                                                                                     ; End If ErrorCount == 0
	
				If ErrorCount == 0  && ( ZIP_BM || ZIP_BW )
					; Assigner le numero de seq au DP  selon la langue du fichier et la cle
					CAA_Seq = 1  
					For IdxSeq = 0 to (IdxK - 1)
	
						If IdxSeq != 0
							If SortKey[IdxSeq, 7] != SortKey[(IdxSeq - 1), 7]                                ; Langue changed  reset CAA_Seq 
								CAA_Seq = 1  
							EndIf
						EndIf
	 
						SortKey[IdxSeq, 9]   =  StrFixLeft(CAA_Seq, 0, 6)                                   ; CAA_Seq
						CAA_Seq = CAA_Seq + 1  
					Next
	
					LogInfo("Start Sorting SortKey after CAA_Seq assign")
	
					ArraySort(SortKey, @ASCENDING, 6)                                                      ; Sort Key  DPNumber
	
					If ech_
						FileSortKey  = "%WorkDirCurrentWork%\SortKey_File_CAA_Seq_DPNo_%FNDATE1%_Ech.txt" 
					Else
						FileSortKey  = "%WorkDirCurrentWork%\SortKey_File_CAA_Seq_DPNo_%FNDATE1%.txt" 
					EndIf
	
					ArrayFilePutCsv(FileSortKey, SortKey, @Tab, @True, 2)
	
					LogInfo("End Sorting SortKey after CAA_Seq assign") 
				EndIf                                                                                     ; End ErrorCount == 0  && ( ZIP_BM || ZIP_BW )
	
				If ErrorCount == 0  && ( ZIP_BM || ZIP_BW )
	
					If ZIP_BM  
	   				If ech_
							ConcatFN       = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final_Ech.TXT" 
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final_Ebill_Ech.TXT" 
						Else
							ConcatFN       = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final.TXT" 
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final_Ebill.TXT" 
						EndIf
					Else
				;	If ZIP_BW     
	;					ConcatFN       = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final.TXT" 
	;					ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final_step.TXT"
	
						If ech_
							ConcatFN       = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final_Ech.TXT" 
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final_step_Ech.TXT"
						Else
							ConcatFN       = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final.TXT" 
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final_step.TXT"
						EndIf
	
					EndIf                                                                                  ; End If ZIP_BM     
	
					LogInfo("Opening file [%ConcatFNEbill%] for [WRITE]") 
					hWrite         = FileOpen(ConcatFNEbill, "WRITE", @FALSE, 10)
	
					LogInfo("Opening file [%ConcatFN%] for [READ]") 
					hRead          = FileOpen(ConcatFN, "READ", @FALSE, 10)                               
	
					If hRead
						TmpEB = EbillRow - 1
						TmpSK = IdxK - 1
						IdxEbill = 0
						IdxSeq   = 0
						Dis1 = ""
						Dis3 = ""
						StrLine = FileRead(hRead)
	
						While StrLine != "*EOF*"
	
							StickerMsg = "00"
	
							If StrSub(StrLine, 1, 2) == "DP"
								Dis1              = StrSub(StrLine, 5, 16)
								BasicKitNO        = StrTrim(StrSub(StrLine, 691, 5), 3)
	
								If StrSub(StrLine, 429, 1) == "D"
									DP_Special_Handling_Code = StrTrim(StrSub(StrLine, 686, 5))
									If DP_Special_Handling_Code == "ADH02"                                     ; swap info donor to member
										;                       First 25 car     donor surname,first name       103 Car                Donor Adresse
										StrLine = StrCat(StrSub(StrLine ,1 ,25), StrSub(StrLine , 265 ,40), StrSub(StrLine , 66, 104), StrSub(StrLine , 315, 91), StrSub(StrLine ,261 ,488))    ; 25+40+104+91+488
										LogInfo("les Info du membre Pricipale  [%Dis1%] ont été ecraser par les info du donnor") 
									EndIf
								EndIf
	
								Dis3 = SortKey[IdxSeq, 6]
								While Dis1 > Dis3 && IdxSeq < (IdxK - 1)   
									IdxSeq = IdxSeq + 1
									Dis3 = SortKey[IdxSeq, 6]
								EndWhile
	
								If LOG_ON_OFF == 1 Then LogInfo("DEBUG - le numero de DP1 [%Dis1%], AvisEbill(DIS2) [%Dis2%], IdxEbill(SortKey) [%Dis3%]") 
	
								If Dis1 == Dis3
									If LOG_ON_OFF == 1 Then LogInfo("DEBUG : Changement liés au stickerMsg et page_promo")
									IdxCD  = SortKey[IdxSeq, 5]
									KitNO  = StrSub(StrLine, 691, 5)
									KitNOT = StrTrim(KitNO, 3)
									KitNOF = StrFixLeft(StrSub(KitNOT,1,(StrLen(KitNOT) - 1)) ,0 , 3)
	
									QtyCarriersInPack = ((  IdxCD       + (  IdxCD      mod 2 )) / 2) 
	
									Reste = IdxCD mod 2
	
									If QtyCarriersInPack == 1  
										Member_Msg   = "110000"                                                 ; Member_msg                  
									ElseIf QtyCarriersInPack > 1 && Reste == 0  
										Member_Msg   = "210220"                                                 ; Member_msg                  
									ElseIf QtyCarriersInPack > 1 && Reste == 1  
										Member_Msg   = "210220"                                                 ; Member_msg                  
									Else 
										Member_Msg   = "100100"                                                 ; Member_msg                  
									EndIf
	
									CAA_Seq = SortKey[IdxSeq, 9] 
									StrLine = StrCat(StrSub(StrLine ,1 ,695), Member_Msg, StrSub(StrLine ,702 ,41), CAA_Seq)
									If LOG_ON_OFF == 1 Then LogInfo("assigner le numero de seq CAA [%CAA_Seq%]")
	
									TmpAR                = SortKey[IdxSeq, 8]                                  ; GB Type record  Automatic_Renewal       
									DP_Rate_Type         = StrTrim(StrSub(StrLine, 155, 5))                    ; DP Type record
									DP_Number_of_Year    = StrTrim(StrSub(StrLine, 76, 4))                     ; DP Type record
	
									If DP_Rate_Type == "AC" || DP_Rate_Type == "291"
										CV_IS_A_LA_CARTE = 1
									Else
										CV_IS_A_LA_CARTE = 0
									EndIf
	
									If TmpAR != "A" && DP_Number_of_Year > 3 && CV_IS_A_LA_CARTE != 1
										StickerMsg = "10"
									Else
										If TmpAR != "A" && DP_Number_of_Year <= 3 && CV_IS_A_LA_CARTE != 1
											StickerMsg = "11"
										Else
											If TmpAR == "A" && CV_IS_A_LA_CARTE != 1
												StickerMsg = "12"
											EndIf
										EndIf
									EndIf
	
									Page_Promo = "0"
									StrLine = StrCat(StrSub(StrLine ,1 ,671), StickerMsg, " ", Page_promo, StrSub(StrLine ,676 , (StrLen(StrLine) - 675))) 
	
								EndIf
							EndIf
	
							If StrSub(StrLine, 1, 2) == "DA"
								StrLine = StrCat(StrSub(StrLine ,1 ,671), StickerMsg, " ", Page_promo, StrSub(StrLine ,676 , (StrLen(StrLine) - 675))) 
							EndIf
	
							FileWrite (hWrite, StrLine)
							StrLine = FileRead(hRead)
						EndWhile
	
						FileClose(hRead)
						FileClose(hWrite)
					EndIf                                                                                  ; End If hRead
				EndIf                                                                                     ; End If ErrorCount == 0
	
				If ErrorCount == 0
	
					if ech_
						If ZIP_BM     
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final_Ebill_Ech.TXT" 
						ElseIf ZIP_BW     
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final_step_Ech.TXT" 
						Else
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_B3_%FNDATE%_final_Ech.TXT" 
						EndIf 
					Else
						If ZIP_BM     
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_FIRSTBILL_%FNDATE%_final_Ebill.TXT" 
						ElseIf ZIP_BW     
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_BW_%FNDATE%_final_step.TXT" 
						Else
							ConcatFNEbill  = "%WorkDirCurrentWork%\RRD_B3_%FNDATE%_final.TXT" 
						EndIf                                                                                  ; End If ZIP_BM     
					EndIf
					aaaammjj       = StrSub(DirTimeStamp, 1, 8)
					LogInfo("Opening file [%ConcatFNEbill%] for [READ]")             
					hRead = FileOpen(ConcatFNEbill, "READ", @FALSE, 10)
	
					If hRead
	
	;******************************************************************************************************************************************
						FlagHBWCE         = @False 
						FlagHBWCF         = @False 
						FlagHBWKE         = @False 
						FlagHBWKF         = @False 
	
						FlagHCAA_2A       = @False 
						FlagHCAA_2F       = @False 
						FlagHCAA_15A      = @False 
						FlagHCAA_15F      = @False 
	
						FlagHCAA_SCA      = @False 
						FlagHCAA_SCF      = @False 
	
						FlagBWCE          = @False 
						FlagBWCF          = @False 
						FlagBWKE          = @False 
						FlagBWKF          = @False 
	
						FlagCAA_2A        = @False 
						FlagCAA_2F        = @False 
						FlagCAA_15A       = @False 
						FlagCAA_15F       = @False 
	
						FlagCAA_SCA       = @False 
						FlagCAA_SCF       = @False 
	
						If ZIP_BW
							if ech_
								FileBWCE        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_CE_Ech.txt" 
								FileBWCF        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_CF_Ech.txt" 
								FileBWKE        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_KE_Ech.txt" 
								FileBWKF        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_KF_Ech.txt"
		
								FileCAA_2A      = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NE_2A_Ech.txt" 
								FileCAA_2F      = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NF_2F_Ech.txt" 
								FileCAA_15A     = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NE_15A_Ech.txt" 
								FileCAA_15F     = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NF_15F_Ech.txt" 
		
								FileCAA_FB_9A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BW_Ech.txt" 
								FileCAA_FB_9F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BW_Ech.txt" 
								FileCAA_FB_101A = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BW_Ech.txt" 
								FileCAA_FB_101F = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BW_Ech.txt"
		
								FileCAA_SCA     = "%WorkDirCurrentWork%\BW%FNDATE1%%Time%_NE_12-16-20-30_SC_A_Ech.txt" 
								FileCAA_SCF     = "%WorkDirCurrentWork%\BW%FNDATE1%%Time%_NF_12-16-20-30_SC_F_Ech.txt"
		
								RptCpt_CE_Name  = StrFix("BW%FNDATE1%%Time%_CE_Ech", "", 100)
								RptCpt_CF_Name  = StrFix("BW%FNDATE1%%Time%_CF_Ech", "", 100)
								RptCpt_KE_Name  = StrFix("BW%FNDATE1%%Time%_KE_Ech", "", 100)
								RptCpt_KF_Name  = StrFix("BW%FNDATE1%%Time%_KF_Ech", "", 100)
								RptCpt_2A_Name  = StrFix("BW%FNDATE1%%Time%_NE_2A_Ech", "", 100)
								RptCpt_2F_Name  = StrFix("BW%FNDATE1%%Time%_NF_2F_Ech", "", 100)
								RptCpt_15A_Name = StrFix("BW%FNDATE1%%Time%_NE_15A_Ech", "", 100)
								RptCpt_15F_Name = StrFix("BW%FNDATE1%%Time%_NF_15F_Ech", "", 100)
								RptCpt_9A_Name  = StrFix("CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BW_Ech", "", 100)
								RptCpt_9F_Name  = StrFix("CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BW_Ech", "", 100)
								RptCpt_101A_Name = StrFix("CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BW_Ech", "", 100)
								RptCpt_101F_Name = StrFix("CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BW_Ech", "", 100)
								RptCpt_SCA_Name = StrFix("BW%FNDATE1%%Time%_NE_12-16-20-30_SC_A_Ech", "", 100)
								RptCpt_SCF_Name = StrFix("BW%FNDATE1%%Time%_NF_12-16-20-30_SC_F_Ech", "", 100)
	     
							else
								FileBWCE        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_CE.txt" 
								FileBWCF        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_CF.txt" 
								FileBWKE        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_KE.txt" 
								FileBWKF        = "%WorkDirCurrentBW%\BW%FNDATE1%%Time%_KF.txt"
		
								FileCAA_2A      = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NE_2A.txt" 
								FileCAA_2F      = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NF_2F.txt" 
								FileCAA_15A     = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NE_15A.txt" 
								FileCAA_15F     = "%WorkDirCurrentBWNo%\BW%FNDATE1%%Time%_NF_15F.txt" 
		
								FileCAA_FB_9A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BW.txt" 
								FileCAA_FB_9F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BW.txt" 
								FileCAA_FB_101A = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BW.txt" 
								FileCAA_FB_101F = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BW.txt"
		
								FileCAA_SCA     = "%WorkDirCurrentWork%\BW%FNDATE1%%Time%_NE_12-16-20-30_SC_A.txt" 
								FileCAA_SCF     = "%WorkDirCurrentWork%\BW%FNDATE1%%Time%_NF_12-16-20-30_SC_F.txt"
		
								RptCpt_CE_Name  = StrFix("BW%FNDATE1%%Time%_CE", "", 100)
								RptCpt_CF_Name  = StrFix("BW%FNDATE1%%Time%_CF", "", 100)
								RptCpt_KE_Name  = StrFix("BW%FNDATE1%%Time%_KE", "", 100)
								RptCpt_KF_Name  = StrFix("BW%FNDATE1%%Time%_KF", "", 100)
								RptCpt_2A_Name  = StrFix("BW%FNDATE1%%Time%_NE_2A", "", 100)
								RptCpt_2F_Name  = StrFix("BW%FNDATE1%%Time%_NF_2F", "", 100)
								RptCpt_15A_Name = StrFix("BW%FNDATE1%%Time%_NE_15A", "", 100)
								RptCpt_15F_Name = StrFix("BW%FNDATE1%%Time%_NF_15F", "", 100)
								RptCpt_9A_Name  = StrFix("CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BW", "", 100)
								RptCpt_9F_Name  = StrFix("CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BW", "", 100)
								RptCpt_101A_Name = StrFix("CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BW", "", 100)
								RptCpt_101F_Name = StrFix("CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BW", "", 100)
								RptCpt_SCA_Name = StrFix("BW%FNDATE1%%Time%_NE_12-16-20-30_SC_A", "", 100)
								RptCpt_SCF_Name = StrFix("BW%FNDATE1%%Time%_NF_12-16-20-30_SC_F", "", 100)
							EndIf
						EndIf                                                                               ; End If ZIP_BM     
	;******************************************************************************************************************************************
	
						FlagHBMCE         = @False 
						FlagHBMCF         = @False 
	
						FlagHCAA_FB_9A    = @False 
						FlagHCAA_FB_9F    = @False 
						FlagHCAA_FB_101A  = @False 
						FlagHCAA_FB_101F  = @False
						FlagHCAA_FB_400A  = @False 
						FlagHCAA_FB_400F  = @False
						FlagHCAA_FB_401A  = @False 
						FlagHCAA_FB_401F  = @False
						FlagHCAA_FB_950A  = @False 
						FlagHCAA_FB_950F  = @False 
	
						FlagBMCE          = @False 
						FlagBMCF          = @False 
	
						FlagCAA_FB_9A     = @False 
						FlagCAA_FB_9F     = @False 
						FlagCAA_FB_101A   = @False 
						FlagCAA_FB_101F   = @False
						FlagCAA_FB_400A   = @False 
						FlagCAA_FB_400F   = @False
						FlagCAA_FB_401A   = @False 
						FlagCAA_FB_401F   = @False
						FlagCAA_FB_950A   = @False 
						FlagCAA_FB_950F   = @False 
	
						If ZIP_BM
							if ech_
								FileBMCE          = "%WorkDirCurrentBM%\BM%FNDATE1%%Time%_CE_Ech.txt" 
								FileBMCF          = "%WorkDirCurrentBM%\BM%FNDATE1%%Time%_CF_Ech.txt" 
		
								FileCAA_FB_9A     = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BM_Ech.txt" 
								FileCAA_FB_9F     = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BM_Ech.txt" 
								FileCAA_FB_101A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BM_Ech.txt" 
								FileCAA_FB_101F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BM_Ech.txt"
								FileCAA_FB_400A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_400A_%FNDATE1%(%aaaammjj%)_Ech.txt" 
								FileCAA_FB_400F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_400F_%FNDATE1%(%aaaammjj%)_Ech.txt"
								FileCAA_FB_401A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_401A_%FNDATE1%(%aaaammjj%)_Ech.txt" 
								FileCAA_FB_401F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_401F_%FNDATE1%(%aaaammjj%)_Ech.txt"
		
								FileCAA_EB        = "%WorkDirCurrentWork%\CAA_EBILL_FirstBill_%FNDATE1%(%aaaammjj%)_Ech.txt" 
								FileCAA_NoEB      = "%WorkDirCurrentWork%\CAA_NoEBILL_FirstBill_%FNDATE1%(%aaaammjj%)_Ech.txt"
								FileCAA_FB_950A   = "%WorkDirCurrentWork%\CAA_RRD_FirstBill_950A_%FNDATE1%(%aaaammjj%)_Ech.txt" 
								FileCAA_FB_950F   = "%WorkDirCurrentWork%\CAA_RRD_FirstBill_950F_%FNDATE1%(%aaaammjj%)_Ech.txt"
		
								RptCpt_CE_Name    = StrFix("BM%FNDATE1%%Time%_CE_Ech", "", 100)
								RptCpt_CF_Name    = StrFix("BM%FNDATE1%%Time%_CF_Ech", "", 100)
								RptCpt_9A_Name    = StrFix("CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BM_Ech", "", 100)
								RptCpt_9F_Name    = StrFix("CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BM_Ech", "", 100)
								RptCpt_101A_Name  = StrFix("CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BM_Ech", "", 100)
								RptCpt_101F_Name  = StrFix("CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BM_Ech", "", 100)
								RptCpt_400A_Name  = StrFix("CAA_RRD_FirstBill_400A_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
								RptCpt_400F_Name  = StrFix("CAA_RRD_FirstBill_400F_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
								RptCpt_401A_Name  = StrFix("CAA_RRD_FirstBill_401A_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
								RptCpt_401F_Name  = StrFix("CAA_RRD_FirstBill_401F_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
								RptCpt_950A_Name  = StrFix("CAA_RRD_FirstBill_950A_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
								RptCpt_950F_Name  = StrFix("CAA_RRD_FirstBill_950F_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
	
							Else
								FileBMCE          = "%WorkDirCurrentBM%\BM%FNDATE1%%Time%_CE.txt" 
								FileBMCF          = "%WorkDirCurrentBM%\BM%FNDATE1%%Time%_CF.txt" 
		
								FileCAA_FB_9A     = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BM.txt" 
								FileCAA_FB_9F     = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BM.txt" 
								FileCAA_FB_101A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BM.txt" 
								FileCAA_FB_101F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BM.txt"
								FileCAA_FB_400A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_400A_%FNDATE1%(%aaaammjj%).txt" 
								FileCAA_FB_400F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_400F_%FNDATE1%(%aaaammjj%).txt"
								FileCAA_FB_401A   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_401A_%FNDATE1%(%aaaammjj%).txt" 
								FileCAA_FB_401F   = "%WorkDirCurrentPrint%\CAA_RRD_FirstBill_401F_%FNDATE1%(%aaaammjj%).txt"
		
								FileCAA_EB        = "%WorkDirCurrentWork%\CAA_EBILL_FirstBill_%FNDATE1%(%aaaammjj%).txt" 
								FileCAA_NoEB      = "%WorkDirCurrentWork%\CAA_NoEBILL_FirstBill_%FNDATE1%(%aaaammjj%).txt"
								FileCAA_FB_950A   = "%WorkDirCurrentWork%\CAA_RRD_FirstBill_950A_%FNDATE1%(%aaaammjj%).txt" 
								FileCAA_FB_950F   = "%WorkDirCurrentWork%\CAA_RRD_FirstBill_950F_%FNDATE1%(%aaaammjj%).txt"
		
								RptCpt_CE_Name    = StrFix("BM%FNDATE1%%Time%_CE", "", 100)
								RptCpt_CF_Name    = StrFix("BM%FNDATE1%%Time%_CF", "", 100)
								RptCpt_9A_Name    = StrFix("CAA_RRD_FirstBill_9A_%FNDATE1%(%aaaammjj%)BM", "", 100)
								RptCpt_9F_Name    = StrFix("CAA_RRD_FirstBill_9F_%FNDATE1%(%aaaammjj%)BM", "", 100)
								RptCpt_101A_Name  = StrFix("CAA_RRD_FirstBill_101A_%FNDATE1%(%aaaammjj%)BM", "", 100)
								RptCpt_101F_Name  = StrFix("CAA_RRD_FirstBill_101F_%FNDATE1%(%aaaammjj%)BM", "", 100)
								RptCpt_400A_Name  = StrFix("CAA_RRD_FirstBill_400A_%FNDATE1%(%aaaammjj%)", "", 100)
								RptCpt_400F_Name  = StrFix("CAA_RRD_FirstBill_400F_%FNDATE1%(%aaaammjj%)", "", 100)
								RptCpt_401A_Name  = StrFix("CAA_RRD_FirstBill_401A_%FNDATE1%(%aaaammjj%)", "", 100)
								RptCpt_401F_Name  = StrFix("CAA_RRD_FirstBill_401F_%FNDATE1%(%aaaammjj%)", "", 100)
								RptCpt_950A_Name  = StrFix("CAA_RRD_FirstBill_950A_%FNDATE1%(%aaaammjj%)", "", 100)
								RptCpt_950F_Name  = StrFix("CAA_RRD_FirstBill_950F_%FNDATE1%(%aaaammjj%)", "", 100)
							EndIf
	
						EndIf                                                                               ; End If ZIP_BM     
	
						FlagHCAA_FB_300A  = @False 
						FlagHCAA_FB_300F  = @False
	 
						FlagCAA_FB_300A   = @False 
						FlagCAA_FB_300F   = @False 
	
						If ZIP_B3
							If ech_
								FileCAA_FB_300A   = "%WorkDirCurrentPrint%\CAA_RRD_ThirdBill_300A_%FNDATE1%(%aaaammjj%)_Ech.txt" 
								FileCAA_FB_300F   = "%WorkDirCurrentPrint%\CAA_RRD_ThirdBill_300F_%FNDATE1%(%aaaammjj%)_Ech.txt"
								RptCpt_300A_Name  = StrFix("CAA_RRD_ThirdBill_300A_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
								RptCpt_300F_Name  = StrFix("CAA_RRD_ThirdBill_300F_%FNDATE1%(%aaaammjj%)_Ech", "", 100)
							Else
								FileCAA_FB_300A   = "%WorkDirCurrentPrint%\CAA_RRD_ThirdBill_300A_%FNDATE1%(%aaaammjj%).txt" 
								FileCAA_FB_300F   = "%WorkDirCurrentPrint%\CAA_RRD_ThirdBill_300F_%FNDATE1%(%aaaammjj%).txt"
								RptCpt_300A_Name  = StrFix("CAA_RRD_ThirdBill_300A_%FNDATE1%(%aaaammjj%)", "", 100)
								RptCpt_300F_Name  = StrFix("CAA_RRD_ThirdBill_300F_%FNDATE1%(%aaaammjj%)", "", 100)
							EndIf
						EndIf                                                                               ; End If ZIP_B3     
	
	
	;******************************************************************************************************************************************
	
						HeaderInfo = ""
	
						StrLine = FileRead(hRead)
						If StrSub(StrLine, 1, 1) == "H"
							HeaderInfo = StrCat("HR", StrSub(StrLine , 3, (StrLen(StrLine) - 2)))
							StrLine = FileRead(hRead)
						EndIf
	
						While StrLine != "*EOF*"
	
	;******************************************************************************************************************************************
							If StrSub(StrLine, 1, 2) == "DP"
								FlagCAA_FB_9A    = @False
								FlagCAA_FB_9F    = @False
								FlagCAA_FB_101A  = @False 
								FlagCAA_FB_101F  = @False
	
								If ZIP_BW         
									Avec_Carte      = @False
									TTSeq  = StrSub(StrLine, 743, 6) 
	
									If StrSub(StrLine, 743, 6) != "      "                                     ; Si numero seq NON VIDE, donc DP ou DA Avec_Carte         
										Avec_Carte   = @True
									EndIf
	
									FlagBWCE        = @False 
									FlagBWCF        = @False 
									FlagBWKE        = @False 
									FlagBWKF        = @False 
									FlagCAA_2A      = @False 
									FlagCAA_2F      = @False 
									FlagCAA_15A     = @False 
									FlagCAA_15F     = @False
									FlagCAA_SCA     = @False 
									FlagCAA_SCF     = @False 
								EndIf
	
	;******************************************************************************************************************************************
								If ZIP_BM        
									FlagBMCE         = @False 
									FlagBMCF         = @False 
									FlagCAA_FB_400A  = @False 
									FlagCAA_FB_400F  = @False
									FlagCAA_FB_401A  = @False 
									FlagCAA_FB_401F  = @False
									FlagCAA_FB_950A  = @False 
									FlagCAA_FB_950F  = @False
									Hold_Cli         = @False                  
								EndIf                                                                         ; End If ZIP_BM
	
								If ZIP_B3
									FlagCAA_FB_300A   = @False 
									FlagCAA_FB_300F   = @False 
								EndIf                                                                         ; End If ZIP_B3     
	
								If StrSub(StrLine, 691, 2) == "2A"
									If ZIP_BM
										FlagBMCE         = @True
										Kit_2A_AvecCarte += 1
									Else
										If Avec_Carte 
											FlagBWCE      = @True
											Kit_2A_AvecCarte += 1
										Else
											FlagCAA_2A    = @True
											Kit_2A_SansCarte += 1
										EndIf
									EndIf
								ElseIf StrSub(StrLine, 691, 2) == "2F" 
									If ZIP_BM
										FlagBMCF             = @True
										Kit_2F_AvecCarte    += 1
									Else
										If Avec_Carte 
											FlagBWCF          = @True
											Kit_2F_AvecCarte += 1
										Else
											FlagCAA_2F        = @True
											Kit_2F_SansCarte += 1
										EndIf
									EndIf
								ElseIf StrSub(StrLine, 691, 2) == "9A"
									Kit_9A               += 1
									FlagCAA_FB_9A      = @True 
								ElseIf StrSub(StrLine, 691, 2) == "9F"
									Kit_9F              += 1
									FlagCAA_FB_9F     = @True 
								ElseIf StrSub(StrLine, 691, 3) == "10A"
									If Avec_Carte 
										FlagBWKE           = @True
										Kit_10A_AvecCarte += 1
									Else
										FlagCAA_SCA        = @True
										Kit_10A_SansCarte += 1
									EndIf 
								ElseIf StrSub(StrLine, 691, 3) == "10F" 
									If Avec_Carte 
										FlagBWKF         = @True
										Kit_10F_AvecCarte += 1
									Else
										FlagCAA_SCF        = @True
										Kit_10F_SansCarte += 1
									EndIf
								ElseIf StrSub(StrLine, 691, 3) == "12A"
									If Avec_Carte 
										FlagBWKE           = @True
										Kit_12A_AvecCarte += 1
									Else
										FlagCAA_SCA        = @True
										Kit_12A_SansCarte += 1
									EndIf 
								ElseIf StrSub(StrLine, 691, 3) == "12F" 
									If Avec_Carte 
										FlagBWKF         = @True
										Kit_12F_AvecCarte += 1
									Else
										FlagCAA_SCF        = @True
									   Kit_12F_SansCarte += 1
									EndIf
								ElseIf StrSub(StrLine, 691, 3) == "15A"
									If Avec_Carte 
										FlagBWCE           = @True
										Kit_15A_AvecCarte += 1
									Else
										FlagCAA_15A        = @True
										Kit_15A_SansCarte += 1
									EndIf 
								ElseIf StrSub(StrLine, 691, 3) == "15F" 
									If Avec_Carte 
										FlagBWCF           = @True
										Kit_15F_AvecCarte += 1
									Else
										FlagCAA_15F        = @True
										Kit_15F_SansCarte += 1
									EndIf
								ElseIf StrSub(StrLine, 691, 3) == "16A"
									If Avec_Carte 
										FlagBWKE           = @True
										Kit_16A_AvecCarte += 1
									Else
										FlagCAA_SCA        = @True
									   Kit_16A_SansCarte += 1
									EndIf 
								ElseIf StrSub(StrLine, 691, 3) == "16F" 
									If Avec_Carte 
										FlagBWKF           = @True
										Kit_16F_AvecCarte += 1
									Else
										FlagCAA_SCF        = @True
									   Kit_16F_SansCarte += 1
									EndIf
								ElseIf StrSub(StrLine, 691, 3) == "20A"
									If Avec_Carte 
										FlagBWKE           = @True
										Kit_20A_AvecCarte += 1
									Else
										FlagCAA_SCA        = @True
										Kit_20A_SansCarte += 1
									EndIf 
								ElseIf StrSub(StrLine, 691, 3) == "20F" 
									If Avec_Carte 
										FlagBWKF         = @True
										Kit_20F_AvecCarte += 1
									Else
										FlagCAA_SCF        = @True
										Kit_20F_SansCarte += 1
									EndIf
								ElseIf StrSub(StrLine, 691, 3) == "30A"
									If Avec_Carte 
										FlagBWKE           = @True
										Kit_30A_AvecCarte += 1
									Else
										FlagCAA_SCA        = @True
										Kit_30A_SansCarte += 1
									EndIf 
								ElseIf StrSub(StrLine, 691, 3) == "30F" 
									If Avec_Carte 
										FlagBWKF           = @True
										Kit_30F_AvecCarte += 1
									Else
										FlagCAA_SCA        = @True
										Kit_30F_SansCarte += 1
									EndIf
								ElseIf StrSub(StrLine, 691, 4) == "101A"
									Kit_101A += 1
									FlagCAA_FB_101A     = @True
								ElseIf StrSub(StrLine, 691, 4) == "101F" 
									Kit_101F += 1
									FlagCAA_FB_101F     = @True
								ElseIf StrSub(StrLine, 691, 4) == "400A"
									FlagCAA_FB_400A     = @True
									Kit_400A += 1
								ElseIf StrSub(StrLine, 691, 4) == "400F"
									FlagCAA_FB_400F     = @True
									Kit_400F += 1
								ElseIf StrSub(StrLine, 691, 4) == "401A"
									FlagCAA_FB_401A     = @True
									Kit_401A += 1                                                              ; Ligne ajoutée dans fichier BMCE
								ElseIf StrSub(StrLine, 691, 4) == "401F" 
									FlagCAA_FB_401F     = @True
									Kit_401F += 1                                                              ; Ligne ajoutée dans fichier BMCF
								ElseIf StrSub(StrLine, 691, 4) == "300A" 
									FlagCAA_FB_300A     = @True
									Kit_300A += 1
								ElseIf StrSub(StrLine, 691, 4) == "300F" 
									FlagCAA_FB_300F     = @True
									Kit_300F += 1
								ElseIf StrSub(StrLine, 691, 4) == "950A" 
									FlagCAA_FB_950A     = @True
									Kit_950A += 1 
								ElseIf StrSub(StrLine, 691, 4) == "950F" 
									FlagCAA_FB_950F     = @True
									Kit_950F += 1 
								EndIf
							EndIF
	
							If StrSub(StrLine, 1, 2) != "MP"
								If FlagBMCE
									If !FlagHBMCE
										LogInfo("Opening file [%FileBMCE%] for [WRITE]") 
										hWBMCE = FileOpen(FileBMCE, "WRITE", @FALSE, 10)
										FileWrite (hWBMCE, HeaderInfo)
										FlagHBMCE = @True
									EndIf 
									FileWrite (hWBMCE, StrLine)
									If StrSub(StrLine, 1, 2) == "DP"
										RptCpt_CE += 1
									EndIf
								EndIf
	   
								If FlagBMCF
									If !FlagHBMCF
										LogInfo("Opening file [%FileBMCF%] for [WRITE]") 
										hWBMCF = FileOpen(FileBMCF, "WRITE", @FALSE, 10)
								   	FileWrite (hWBMCF, HeaderInfo)
										FlagHBMCF = @True
									EndIf 
									FileWrite (hWBMCF, StrLine)
									If StrSub(StrLine, 1, 2) == "DP"
										RptCpt_CF += 1
									EndIf
								EndIf
	
								If FlagBWCE
									If !FlagHBWCE
										LogInfo("Opening file [%FileBWCE%] for [WRITE]") 
										hWBWCE = FileOpen(FileBWCE, "WRITE", @FALSE, 10)
										FileWrite (hWBWCE, HeaderInfo)
										FlagHBWCE = @True
									EndIf 
									FileWrite (hWBWCE, StrLine)
									If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_CE += 1
								EndIf
	   
								If FlagBWCF
									If !FlagHBWCF
										LogInfo("Opening file [%FileBWCF%] for [WRITE]") 
										hWBWCF = FileOpen(FileBWCF, "WRITE", @FALSE, 10)
								   	FileWrite (hWBWCF, HeaderInfo)
										FlagHBWCF = @True
									EndIf 
									FileWrite (hWBWCF, StrLine)
									If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_CF += 1
								EndIf
	
								If FlagBWKE
									If !FlagHBWKE
										LogInfo("Opening file [%FileBWKE%] for [WRITE]") 
										hWBWKE = FileOpen(FileBWKE, "WRITE", @FALSE, 10)
										FileWrite (hWBWKE, HeaderInfo)
										FlagHBWKE = @True
									EndIf 
									FileWrite (hWBWKE, StrLine)
									If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_KE += 1
								EndIf
	   
								If FlagBWKF
									If !FlagHBWKF
										LogInfo("Opening file [%FileBWKF%] for [WRITE]") 
										hWBWKF = FileOpen(FileBWKF, "WRITE", @FALSE, 10)
								   	FileWrite (hWBWKF, HeaderInfo)
										FlagHBWKF = @True
									EndIf 
									FileWrite (hWBWKF, StrLine)
									If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_KF += 1
								EndIf
							EndIf
	
							If FlagCAA_2A
								If !FlagHCAA_2A
									LogInfo("Opening file [%FileCAA_2A%] for [WRITE]") 
									hWCAA_2A = FileOpen(FileCAA_2A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_2A, HeaderInfo)
									FlagHCAA_2A = @True
								EndIf 
								FileWrite (hWCAA_2A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_2A += 1
							EndIf
	
							If FlagCAA_2F
								If !FlagHCAA_2F
									LogInfo("Opening file [%FileCAA_2F%] for [WRITE]") 
									hWCAA_2F = FileOpen(FileCAA_2F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_2F, HeaderInfo)
									FlagHCAA_2F = @True
								EndIf 
								FileWrite (hWCAA_2F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_2F += 1
							EndIf
	
							If FlagCAA_FB_9A
								If !FlagHCAA_FB_9A
									LogInfo("Opening file [%FileCAA_FB_9A%] for [WRITE]") 
									hWCAA_FB_9A = FileOpen(FileCAA_FB_9A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_9A, HeaderInfo)
									FlagHCAA_FB_9A = @True
								EndIf 
								FileWrite (hWCAA_FB_9A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_9A += 1
							EndIf
	   
							If FlagCAA_FB_9F
								If !FlagHCAA_FB_9F
									LogInfo("Opening file [%FileCAA_FB_9F%] for [WRITE]") 
									hWCAA_FB_9F = FileOpen(FileCAA_FB_9F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_9F, HeaderInfo)
									FlagHCAA_FB_9F = @True
								EndIf 
								FileWrite (hWCAA_FB_9F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP" Then RptCpt_9F += 1
							EndIf
	   
							If FlagCAA_15A
								If !FlagHCAA_15A
									LogInfo("Opening file [%FileCAA_15A%] for [WRITE]") 
									hWCAA_15A = FileOpen(FileCAA_15A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_15A, HeaderInfo)
									FlagHCAA_15A = @True
								EndIf 
								FileWrite (hWCAA_15A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_15A += 1
								EndIf
							EndIf
	
							If FlagCAA_15F
								If !FlagHCAA_15F
									LogInfo("Opening file [%FileCAA_15F%] for [WRITE]") 
									hWCAA_15F = FileOpen(FileCAA_15F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_15F, HeaderInfo)
									FlagHCAA_15F = @True
								EndIf 
								FileWrite (hWCAA_15F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_15F += 1
								EndIf
							EndIf
	
							If FlagCAA_SCA                                                                   ; Kit 12, 16, 20 et 30 sans carte
								If !FlagHCAA_SCA
									LogInfo("Opening file [%FileCAA_SCA%] for [WRITE]") 
									hWCAA_SCA = FileOpen(FileCAA_SCA, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_SCA, HeaderInfo)
									FlagHCAA_SCA = @True
								EndIf 
								FileWrite (hWCAA_SCA, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_SCA += 1
								EndIf
							EndIf
	
							If FlagCAA_SCF                                                                   ; Kit 12, 16, 20 et 30 sans carte
								If !FlagHCAA_SCF
									LogInfo("Opening file [%FileCAA_SCF%] for [WRITE]") 
									hWCAA_SCF = FileOpen(FileCAA_SCF, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_SCF, HeaderInfo)
									FlagHCAA_SCF = @True
								EndIf 
								FileWrite (hWCAA_SCF, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_SCF += 1
								EndIf
							EndIf
	   
							If FlagCAA_FB_101A
								If !FlagHCAA_FB_101A
									LogInfo("Opening file [%FileCAA_FB_101A%] for [WRITE]") 
									hWCAA_FB_101A = FileOpen(FileCAA_FB_101A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_101A, HeaderInfo)
									FlagHCAA_FB_101A = @True
								EndIf 
								FileWrite (hWCAA_FB_101A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_101A += 1
								EndIf
							EndIf
	   
							If FlagCAA_FB_101F
								If !FlagHCAA_FB_101F
									LogInfo("Opening file [%FileCAA_FB_101F%] for [WRITE]") 
									hWCAA_FB_101F = FileOpen(FileCAA_FB_101F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_101F, HeaderInfo)
									FlagHCAA_FB_101F = @True
								EndIf 
								FileWrite (hWCAA_FB_101F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_101F += 1
								EndIf
							EndIf
	   
							If FlagCAA_FB_300A
								If !FlagHCAA_FB_300A
									LogInfo("Opening file [%FileCAA_FB_300A%] for [WRITE]") 
									hWCAA_FB_300A = FileOpen(FileCAA_FB_300A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_300A, HeaderInfo)
									FlagHCAA_FB_300A = @True
								EndIf 
								FileWrite (hWCAA_FB_300A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_300A += 1
								EndIf
							EndIf
	   
							If FlagCAA_FB_300F
								If !FlagHCAA_FB_300F
									LogInfo("Opening file [%FileCAA_FB_300F%] for [WRITE]") 
									hWCAA_FB_300F = FileOpen(FileCAA_FB_300F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_300F, HeaderInfo)
									FlagHCAA_FB_300F = @True
								EndIf 
								FileWrite (hWCAA_FB_300F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_300F += 1
								EndIf
							EndIf
	
							If FlagCAA_FB_400A
								If !FlagHCAA_FB_400A
									LogInfo("Opening file [%FileCAA_FB_400A%] for [WRITE]") 
									hWCAA_FB_400A = FileOpen(FileCAA_FB_400A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_400A, HeaderInfo)
									FlagHCAA_FB_400A = @True
								EndIf 
								FileWrite (hWCAA_FB_400A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_400A += 1
								EndIf
							EndIf
	
							If FlagCAA_FB_400F
								If !FlagHCAA_FB_400F
									LogInfo("Opening file [%FileCAA_FB_400F%] for [WRITE]") 
									hWCAA_FB_400F = FileOpen(FileCAA_FB_400F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_400F, HeaderInfo)
									FlagHCAA_FB_400F = @True
								EndIf 
								FileWrite (hWCAA_FB_400F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_400F += 1
								EndIf
							EndIf   
	
							If FlagCAA_FB_401A
								If !FlagHCAA_FB_401A
									LogInfo("Opening file [%FileCAA_FB_401A%] for [WRITE]") 
									hWCAA_FB_401A = FileOpen(FileCAA_FB_401A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_401A, HeaderInfo)
									FlagHCAA_FB_401A = @True
								EndIf 
								FileWrite (hWCAA_FB_401A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_401A += 1
								EndIf
							EndIf
	
							If FlagCAA_FB_401F
								If !FlagHCAA_FB_401F
									LogInfo("Opening file [%FileCAA_FB_401F%] for [WRITE]") 
									hWCAA_FB_401F = FileOpen(FileCAA_FB_401F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_401F, HeaderInfo)
									FlagHCAA_FB_401F = @True
								EndIf 
								FileWrite (hWCAA_FB_401F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_401F += 1
								EndIf
							EndIf
	
							If FlagCAA_FB_950A
								If !FlagHCAA_FB_950A
									LogInfo("Opening file [%FileCAA_FB_950A%] for [WRITE]")
									hWCAA_FB_950A = FileOpen(FileCAA_FB_950A, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_950A, HeaderInfo)
									FlagHCAA_FB_950A = @True
								EndIf 
								FileWrite (hWCAA_FB_950A, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_950A += 1
								EndIf
							EndIf         
	
							If FlagCAA_FB_950F
								If !FlagHCAA_FB_950F
									LogInfo("Opening file [%FileCAA_FB_950F%] for [WRITE]") 
									hWCAA_FB_950F = FileOpen(FileCAA_FB_950F, "WRITE", @FALSE, 10)
									FileWrite (hWCAA_FB_950F, HeaderInfo)
									FlagHCAA_FB_950F = @True
								EndIf 
								FileWrite (hWCAA_FB_950F, StrLine)
								If StrSub(StrLine, 1, 2) == "DP"
									RptCpt_950F += 1
								EndIf
							EndIf
	
							StrLine = FileRead(hRead)
						EndWhile
	
						FileClose(hRead)
	
						IF FlagHBMCE
							FileClose(hWBMCE)
						EndIf
	
						IF FlagHBMCF
							FileClose(hWBMCF)
						EndIf
	
						IF FlagHBWCE
							FileClose(hWBWCE)
						EndIf
	
						IF FlagHBWCF
							FileClose(hWBWCF)
						EndIf
	
						IF FlagHBWKE
							FileClose(hWBWKE)
						EndIf
	
						IF FlagHBWKF
							FileClose(hWBWKF)
						EndIf
	
						IF FlagHCAA_2A
							FileClose(hWCAA_2A)
						EndIf
	
						IF FlagHCAA_2F
							FileClose(hWCAA_2F)
						EndIf
	
						IF FlagHCAA_15A
							FileClose(hWCAA_15A)
						EndIf
	
						IF FlagHCAA_15F
							FileClose(hWCAA_15F)
						EndIf
	
						IF FlagHCAA_SCA
							FileClose(hWCAA_SCA)
						EndIf
	
						IF FlagHCAA_SCF
							FileClose(hWCAA_SCF)
						EndIf
	
						IF FlagHCAA_FB_9A
							FileClose(hWCAA_FB_9A)
						EndIf
	
						IF FlagHCAA_FB_9F
							FileClose(hWCAA_FB_9F)
						EndIf
	
						IF FlagHCAA_FB_101A
							FileClose(hWCAA_FB_101A)
						EndIf
	
						IF FlagHCAA_FB_101F
							FileClose(hWCAA_FB_101F)
						EndIf
	
						IF FlagHCAA_FB_300A
							FileClose(hWCAA_FB_300A)
						EndIf
	
						IF FlagHCAA_FB_300F
							FileClose(hWCAA_FB_300F)
						EndIf
	
						IF FlagHCAA_FB_400A
							FileClose(hWCAA_FB_400A)
						EndIf
	
						IF FlagHCAA_FB_400F
							FileClose(hWCAA_FB_400F)
						EndIf
	
						IF FlagHCAA_FB_401A
							FileClose(hWCAA_FB_401A)
						EndIf
	
						IF FlagHCAA_FB_401F
							FileClose(hWCAA_FB_401F)
						EndIf
	
						IF FlagHCAA_FB_950A
							FileClose(hWCAA_FB_950A)
						EndIf
	
						IF FlagHCAA_FB_950F
							FileClose(hWCAA_FB_950F)
						EndIf
	
					EndIf
				EndIf
	
	;********************************************************************************************************************************************
				LogInfo("Start Exstream call") 
	
				;########################################
				;Exstream Pass 1
				;########################################
	   
				If ErrorCount == 0
					NewLb_Data  = "-SORTDATA="
					NewLb_Index = "-SORTINDEX="
					NewLb_Output = "-FILEMAP=Output.srt"
	
					RATEList   = FileItemize("%RESSOURCES_DIR%\Rate_*.csv")
					RATECount  = ItemCount(RATEList, @TAB)
	
					If RATECount > 0
						RATEName   = ItemExtract(1, RATEList, @TAB)
						RATETABLE  = "%RESSOURCES_DIR%\%RATEName%"
					EndIf
	
					If ZIP_BM
						BFileList   = FileItemize("%WorkDirCurrentBM%\*.txt")
						BFileCount  = ItemCount(BFileList, @TAB)
	
						If BFileCount > 0
							LogInfo("[%BFileCount%] file(s) found in directory [%WorkDirCurrentBM%\*.txt]")
	
							For IdxTXT = 1 to BFileCount 
	
								BFileName   = ItemExtract(IdxTXT, BFileList, @TAB)
								PBFileName  = "%WorkDirCurrentBM%\%BFileName%"
								EXFileName  = FileRoot(PBFileName) 
	  
								if ech_
									;OBFileName  = "%WorkDirCurrentBM%\%EXFileName%_Ech.pdf"
									OBFileName  = "%WorkDirCurrentBM%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data_Ech.txt"
								Else
									OBFileName  = "%WorkDirCurrentBM%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data.txt"
								EndIf
	
								If FileExist(PBFileName)
	
									If ech_
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1_Ech.log"
		
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report_Ech.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
									Else
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1.log"
		
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
									EndIf
									RunHideWait(EXSTREAM_ENGINE, ExeArgs)
									ReturnCode = IntControl(64, 0, 0, 0, 0)
	
									If ReturnCode == 0
										LogInfo("Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
									ElseIf ReturnCode == 4
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogWarning(Msg)
									ElseIf ReturnCode == 8 || ReturnCode == 12
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
	
									If ErrorCount == 0
										;########################################
										;Sort Index File 
										;########################################
										If ech_
											SortedIndexFile = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.srt"
											ExeArgs = "%SORT_ARGS% %SortIndexFile% %SortedIndexFile%"
											LogInfo("Running CMSort E [%EXE_SORT%] [%ExeArgs%]")
										Else
											SortedIndexFile = "%WorkDirCurrent%\%EXFileName%_Sort_Index.srt"
											ExeArgs = "%SORT_ARGS% %SortIndexFile% %SortedIndexFile%"
											LogInfo("Running CMSort [%EXE_SORT%] [%ExeArgs%]")
										EndIf
										RunHideWait(EXE_SORT, ExeArgs)
	
										ReturnCode = IntControl(64, 0, 0, 0, 0)
										If ReturnCode == 0
											LogInfo("CMSort  [%EXE_SORT%] [%ExeArgs%] Return Code [%ReturnCode%]")
										Else
											Msg = "CMSort  [%EXE_SORT%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
	
									If ErrorCount == 0
										
										if ech_
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2_Ech.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortedIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
										Else
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortedIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
										EndIf
	
										RunHideWait(EXSTREAM_ENGINE, ExeArgs)
										ReturnCode = IntControl(64, 0, 0, 0, 0)
	
	;									Note : Ajuster erreur exstream pour < 4, >=4 et >=8
										If ReturnCode == 0
											LogInfo("Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
										ElseIf ReturnCode == 4 || ReturnCode == 8
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogWarning(Msg)
										ElseIf ReturnCode == 12
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
								EndIf
							Next
						EndIf
	
						BFileList   = FileItemize("%WorkDirCurrentPrint%\*.txt")
						BFileCount  = ItemCount(BFileList, @TAB)
	
						If FileCount > 0
							LogInfo("[%BFileCount%] file(s) found in directory [%WorkDirCurrentPrint%\*.txt]")
	
							For IdxTXT = 1 to BFileCount 
								BFileName  = ItemExtract(IdxTXT, BFileList, @TAB)
								PBFileName = "%WorkDirCurrentPrint%\%BFileName%"
								EXFileName = FileRoot(PBFileName)  
								If ech_ 
									OBFileName = "%WorkDirCurrentPrint%\%EXFileName%.pdf"
									;OBFileName = "%WorkDirCurrentPrint%\%EXFileName%_Ech.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data_Ech.txt"
								else   
									OBFileName = "%WorkDirCurrentPrint%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data.txt"
								EndIf
	
								If FileExist(PBFileName)
									if ech_
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1_Ech.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report_Ech.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
									Else
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
									EndIf
	
									RunHideWait(EXSTREAM_ENGINE, ExeArgs)
									ReturnCode = IntControl(64, 0, 0, 0, 0)
	
									If ReturnCode == 0
										LogInfo("Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
									ElseIf ReturnCode == 4 || ReturnCode == 8
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogWarning(Msg)
									ElseIf ReturnCode == 12
											Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
	
									If ErrorCount == 0
	
										if ech_
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2_Ech.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
										Else
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%FPPAName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
										EndIf
										RunHideWait(EXSTREAM_ENGINE, ExeArgs)
										ReturnCode = IntControl(64, 0, 0, 0, 0)
	
										If ReturnCode == 0
											LogInfo("Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
										ElseIf ReturnCode == 4 || ReturnCode == 8
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogWarning(Msg)
										ElseIf ReturnCode == 12
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
								EndIf
							Next
						EndIf
					EndIf                                                                                  ; If ZIP_BM
	
					If ZIP_BW
						BFileList   = FileItemize("%WorkDirCurrentBW%\*.txt")
						BFileCount  = ItemCount(BFileList, @TAB)
	
						If BFileCount > 0
							LogInfo("[%BFileCount%] file(s) found in directory [%WorkDirCurrentBW%\*.txt]")
	
							For IdxTXT = 1 to BFileCount 
								BFileName = ItemExtract(IdxTXT, BFileList, @TAB)
								PBFileName = "%WorkDirCurrentBW%\%BFileName%"
								EXFileName = FileRoot(PBFileName)
	   						
								if ech_
									;OBFileName = "%WorkDirCurrentBW%\%EXFileName%_Ech.pdf"
									OBFileName = "%WorkDirCurrentBW%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data_Ech.txt"
								Else
									OBFileName = "%WorkDirCurrentBW%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data.txt"
								EndiF
	
								If FileExist(PBFileName)
									If ech_
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1_Ech.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
	;									ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report_Ech.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
									Else
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
									EndIf
									RunHideWait(EXSTREAM_ENGINE, ExeArgs)
									ReturnCode = IntControl(64, 0, 0, 0, 0)
	
									If ReturnCode == 0
										LogInfo("Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
									ElseIf ReturnCode == 4 || ReturnCode == 8
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogWarning(Msg)
									ElseIf ReturnCode == 12
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
	
									If ErrorCount == 0
										;########################################
										;Sort Index File 
										;########################################
	
										if ech_
											SortedIndexFile = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.srt"
											ExeArgs = "%SORT_ARGS% %SortIndexFile% %SortedIndexFile%"
											LogInfo("Running CMSort [%EXE_SORT%] [%ExeArgs%]")
										Else
											SortedIndexFile = "%WorkDirCurrent%\%EXFileName%_Sort_Index.srt"
											ExeArgs = "%SORT_ARGS% %SortIndexFile% %SortedIndexFile%"
											LogInfo("Running CMSort [%EXE_SORT%] [%ExeArgs%]")
	
										EndIf
										RunHideWait(EXE_SORT, ExeArgs)
	
										ReturnCode = IntControl(64, 0, 0, 0, 0)
										If ReturnCode == 0
											LogInfo("CMSort  [%EXE_SORT%] [%ExeArgs%] Return Code [%ReturnCode%]")
										Else
											Msg = "CMSort  [%EXE_SORT%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
	
									If ErrorCount == 0
										if ech_
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2_Ech.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortedIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
										Else
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortedIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
										Endif
										RunHideWait(EXSTREAM_ENGINE, ExeArgs)
										ReturnCode = IntControl(64, 0, 0, 0, 0)
	
										If ReturnCode == 0
											LogInfo("Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
										ElseIf ReturnCode == 4 || ReturnCode == 8
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogWarning(Msg)
										ElseIf ReturnCode == 12
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
								EndIf
							Next
						EndIf
	
						BFileList   = FileItemize("%WorkDirCurrentBWNo%\*.txt")
						BFileCount  = ItemCount(BFileList, @TAB)
	
						If BFileCount > 0
							LogInfo("[%BFileCount%] file(s) found in directory [%WorkDirCurrentBWNo%\*.txt]")
	
							For IdxTXT = 1 to BFileCount 
								BFileName  = ItemExtract(IdxTXT, BFileList, @TAB)
								PBFileName = "%WorkDirCurrentBWNo%\%BFileName%"
								EXFileName = FileRoot(PBFileName)
	   						IF ech_
									OBFileName = "%WorkDirCurrentBWNo%\%EXFileName%.pdf"
									;OBFileName = "%WorkDirCurrentBWNo%\%EXFileName%_Ech.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data_Ech.txt"
								Else
									OBFileName = "%WorkDirCurrentBWNo%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data.txt"
								EndIf
	
								If FileExist(PBFileName)
									IF ech_
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1_Ech.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report_Ech.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
									Else
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
									EndIf
									RunHideWait(EXSTREAM_ENGINE, ExeArgs)
									ReturnCode = IntControl(64, 0, 0, 0, 0)
	
									If ReturnCode == 0
										LogInfo("Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
									ElseIf ReturnCode == 4 || ReturnCode == 8
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogWarning(Msg)
									ElseIf ReturnCode == 12
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
	
									If ErrorCount == 0
										IF ech_
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2_Ech.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
										Else
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
										EndIf
										RunHideWait(EXSTREAM_ENGINE, ExeArgs)
										ReturnCode = IntControl(64, 0, 0, 0, 0)
	
										If ReturnCode == 0
											LogInfo("Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
										ElseIf ReturnCode == 4 || ReturnCode == 8
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogWarning(Msg)
										ElseIf ReturnCode == 12
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
								EndIf
							Next
						EndIf                                                                               ; End ZIP_BW
	
						;WorkDirCurrentPrint
	
						BFileList   = FileItemize("%WorkDirCurrentPrint%\*.txt")
						BFileCount  = ItemCount(BFileList, @TAB)
	
						If FileCount > 0
							LogInfo("[%BFileCount%] file(s) found in directory [%WorkDirCurrentPrint%\*.txt]")
	
							For IdxTXT = 1 to BFileCount 
								BFileName  = ItemExtract(IdxTXT, BFileList, @TAB)
								PBFileName = "%WorkDirCurrentPrint%\%BFileName%"
								EXFileName = FileRoot(PBFileName)
	   
								if ech_
									OBFileName = "%WorkDirCurrentPrint%\%EXFileName%.pdf"
									;OBFileName = "%WorkDirCurrentPrint%\%EXFileName%_Ech.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data_Ech.txt"
								Else
									OBFileName = "%WorkDirCurrentPrint%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data.txt"
								EndIf
	
								If FileExist(PBFileName)
									if ech_
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1_Ech.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report_Ech.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
									Else
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
									Endif
									RunHideWait(EXSTREAM_ENGINE, ExeArgs)
									ReturnCode = IntControl(64, 0, 0, 0, 0)
	
									If ReturnCode == 0
										LogInfo("Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
									ElseIf ReturnCode == 4 || ReturnCode == 8
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogWarning(Msg)
									ElseIf ReturnCode == 12
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
	
									If ErrorCount == 0
										if ech_
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2_Ech.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
										Else
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%FileExpirations%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%FileRecrutor%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
										EndIf
										RunHideWait(EXSTREAM_ENGINE, ExeArgs)
										ReturnCode = IntControl(64, 0, 0, 0, 0)
	
										If ReturnCode == 0
											LogInfo("Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
										ElseIf ReturnCode == 4 || ReturnCode == 8
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogWarning(Msg)
										ElseIf ReturnCode == 12
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
								EndIf
							Next
						EndIf
					EndIf                                                                      ;  If ZIP_BW
	
					If ZIP_B3
						;WorkDirCurrentPrint
	
						BFileList   = FileItemize("%WorkDirCurrentPrint%\*.txt")
						BFileCount  = ItemCount(BFileList, @TAB)
	
						If BFileCount > 0
							LogInfo("[%BFileCount%] file(s) found in directory [%WorkDirCurrentPrint%\*.txt]")
	
							For IdxTXT = 1 to BFileCount 
								BFileName  = ItemExtract(IdxTXT, BFileList, @TAB)
								PBFileName = "%WorkDirCurrentPrint%\%BFileName%"
								EXFileName = FileRoot(PBFileName)
	   
								IF ech_
									OBFileName = "%WorkDirCurrentPrint%\%EXFileName%.pdf"
									;OBFileName = "%WorkDirCurrentPrint%\%EXFileName%_Ech.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index_Ech.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data_Ech.txt"
								else
									OBFileName = "%WorkDirCurrentPrint%\%EXFileName%.pdf"
									SortIndexFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Index.txt"
									SortDataFile  = "%WorkDirCurrent%\%EXFileName%_Sort_Data.txt"
								EndIf
	
								If FileExist(PBFileName)
									if ech_
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1_Ech.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report_Ech.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
									Else
										LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass1.log"
										ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
										ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=NO")
										ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTINDEX%,%SortIndexFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_SORTDATA%,%SortDataFile%")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_OUTPUT%,%OBFileName%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
										ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
										ExeArgs = StrCat(ExeArgs, " -FILEMAP=Report.rpt,%WorkDirCurrentWork%\%EXFileName%_Report.txt")
										ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
										LogInfo("Running Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
	
									EndIf
	
									RunHideWait(EXSTREAM_ENGINE, ExeArgs)
									ReturnCode = IntControl(64, 0, 0, 0, 0)
	
									If ReturnCode == 0
										LogInfo("Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
									ElseIf ReturnCode == 4 || ReturnCode == 8
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogWarning(Msg)
									ElseIf ReturnCode == 12
										Msg = "Exstream Pass 1 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
										LogError(Msg)
										ErrorCount = ErrorCount + 1
										ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
									EndIf
	
									If ErrorCount == 0
										if ech_
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2_Ech.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											;ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%_Ech.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 E [%EXSTREAM_ENGINE%] [%ExeArgs%]")
										Else
											LogFileName = "%WorkDirCurrentLogs%\Exstream_%EXFileName%_Pass2.log"
											ExeArgs = StrCat("-CONTROLFILE=%EXSTREAM_CONTROLFILE%")
											ExeArgs = StrCat(ExeArgs, " -OUTPUTFILE=YES")
											ExeArgs = StrCat(ExeArgs, " -MESSAGEFILE=%LogFileName%")
											ExeArgs = StrCat(ExeArgs, " -FILEMAP=%EXSTREAM_FILEMAP_INPUT%,%PBFileName%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Index%%SortIndexFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Data%%SortDataFile%")
											ExeArgs = StrCat(ExeArgs, " %NewLb_Output%,%OBFileName%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_AGES%,%PremAvis_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_DATES%,%ExpiryDate_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RECRU%,%Recrutor_Vide%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_REF_RATE%,%RATETABLE%")
											ExeArgs = StrCat(ExeArgs, " %EXSTREAM_FILEMAP_STAT%,%WorkDirCurrentWork%\%EXFileName%.rpt")
											ExeArgs = StrCat(ExeArgs, " -VARSET=GLB_FileType,%ZIP_FileType%")
		
											LogInfo("Running Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%]")
	
										Endif
										RunHideWait(EXSTREAM_ENGINE, ExeArgs)
										ReturnCode = IntControl(64, 0, 0, 0, 0)
	
										If ReturnCode == 0
											LogInfo("Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]")
										ElseIf ReturnCode == 4 || ReturnCode == 8
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogWarning(Msg)
										ElseIf ReturnCode == 12
											Msg = "Exstream Pass 2 [%EXSTREAM_ENGINE%] [%ExeArgs%] Return Code [%ReturnCode%]"
											LogError(Msg)
											ErrorCount = ErrorCount + 1
											ErrorMsg = StrCat(ErrorMsg, @CRLF, Msg)
										EndIf
									EndIf
								EndIf
							Next
						EndIf
					EndIf                                                                      ;  If ZIP_B3
				EndIf                                                                         ;  If ErrorCount == 0 
	
				LogInfo("End Exstream call")
	   
	;********************************************************************************************************************************************
	
				LogInfo("Start Creation of Control files") 
	
	;			3 controls to create
	;			SortKey[row, 0]   =  SortKey#   
	;			SortKey[row, 1]   =  Kit#            Numéro seulement   
	;			SortKey[row, 2]   =  Type1stCard     Blank   
	;			SortKey[row, 3]   =  Destination       
	;			SortKey[row, 4]   =  "A" = All Same Card Type   "M" = Multi Card Types 
	;			SortKey[row, 5]   =  QtyCards   
	;			SortKey[row, 6]   =  DPMemb# 
	;			SortKey[row, 7]   =  Langue
	;			SortKey[row, 8]   =  GB_Automatic_Renewal
	;			SortKey[row, 9]   =  CAA_Seq        
	;			SortKey[row, 10]  =  Nb carte  0 Basic   
	;			SortKey[row, 11]  =  Nb carte  1 Plus   
	;			SortKey[row, 12]  =  Nb carte  2 RV   
	;			SortKey[row, 13]  =  Nb carte  3 RVPremium   
	;			SortKey[row, 14]  =  Nb carte  4 ?   
	;			SortKey[row, 15]  =  Nb carte  5 ?   
	;			SortKey[row, 16]  =  Nb carte  6 Corpo   
	 
	 
				If ErrorCount == 0
					If ZIP_BM
	;              RPH;AAAAMMJJ
	;              RPD;BMAAAAMMJJ_CF;NBPages;NBFeuilles;NBEnvois;NbCards0;NbCards1;NbCards2;NbCards3;NbCards4;NbCards5;NbCards6;NBAutre
	;              RPD;BMAAAAMMJJ_CE;NBPages;NBFeuilles;NBEnvois;NbCards0;NbCards1;NbCards2;NbCards3;NbCards4;NbCards5;NbCards6;NBAutre
	;              RPT;NBFichiers;TotPages;TotFeuilles;TotEnvois;TotCards0;TotCards1;TotCards2;TotCards3;TotCards4;TotCards5;TotCards6;TotAutre
		
						if ech_
							CtrlFileNameBM = "%WorkDirCurrentBM%\%Type%%ZipFileDate%%Time%_Ech_Control.ctl"
							BM_Ctl         = ""
							NBfichiers     = 0
							BM_Ctl         = StrCat("RPH;", ZipFileDate, @CRLF)
		
							FileNameE      = "%Type%%ZipFileDate%%Time%_CE_Ech" 
							NBPagesE       = 0
							NBFeuillesE    = 0
							NBEnvoisE      = 0
							NBCards0E      = 0
							NBCards1E      = 0
							NBCards2E      = 0
							NBCards3E      = 0
							NBCards4E      = 0
							NBCards5E      = 0
							NBCards6E      = 0
							NBAutreE       = 0
		
							FileNameF      = "%Type%%ZipFileDate%%Time%_CF_Ech" 
							NBPagesF       = 0
							NBFeuillesF    = 0
							NBEnvoisF      = 0
							NBCards0F      = 0
							NBCards1F      = 0
							NBCards2F      = 0
							NBCards3F      = 0
							NBCards4F      = 0
							NBCards5F      = 0
							NBCards6F      = 0
							NBAutreF       = 0
						Else
							CtrlFileNameBM = "%WorkDirCurrentBM%\%Type%%ZipFileDate%%Time%_Control.ctl"
							BM_Ctl         = ""
							NBfichiers     = 0
							BM_Ctl         = StrCat("RPH;", ZipFileDate, @CRLF)
		
							FileNameE      = "%Type%%ZipFileDate%%Time%_CE" 
							NBPagesE       = 0
							NBFeuillesE    = 0
							NBEnvoisE      = 0
							NBCards0E      = 0
							NBCards1E      = 0
							NBCards2E      = 0
							NBCards3E      = 0
							NBCards4E      = 0
							NBCards5E      = 0
							NBCards6E      = 0
							NBAutreE       = 0
		
							FileNameF      = "%Type%%ZipFileDate%%Time%_CF" 
							NBPagesF       = 0
							NBFeuillesF    = 0
							NBEnvoisF      = 0
							NBCards0F      = 0
							NBCards1F      = 0
							NBCards2F      = 0
							NBCards3F      = 0
							NBCards4F      = 0
							NBCards5F      = 0
							NBCards6F      = 0
							NBAutreF       = 0
	
						EndIf
	
						For IdxCount = 0 to (IdxK - 1)
	
							If SortKey[IdxCount, 7] == "E"
								NBEnvoisE      = NBEnvoisE + 1
								NBCards0E      = NBCards0E + SortKey[IdxCount, 10]
								NBCards1E      = NBCards1E + SortKey[IdxCount, 11]
								NBCards2E      = NBCards2E + SortKey[IdxCount, 12]
								NBCards3E      = NBCards3E + SortKey[IdxCount, 13]
								NBCards4E      = NBCards4E + SortKey[IdxCount, 14]
								NBCards5E      = NBCards5E + SortKey[IdxCount, 15]
								NBCards6E      = NBCards6E + SortKey[IdxCount, 16]
							EndIf
	
							If SortKey[IdxCount, 7] == "F" 
								NBEnvoisF      = NBEnvoisF + 1
								NBCards0F      = NBCards0F + SortKey[IdxCount, 10]
								NBCards1F      = NBCards1F + SortKey[IdxCount, 11]
								NBCards2F      = NBCards2F + SortKey[IdxCount, 12]
								NBCards3F      = NBCards3F + SortKey[IdxCount, 13]
								NBCards4F      = NBCards4F + SortKey[IdxCount, 14]
								NBCards5F      = NBCards5F + SortKey[IdxCount, 15]
								NBCards6F      = NBCards6F + SortKey[IdxCount, 16]
							EndIf
						Next
	
						RFileList   = FileItemize("%WorkDirCurrentWork%\*.rpt")
						RFileCount  = ItemCount(RFileList, @TAB)
	
						If RFileCount > 0
							LogInfo("[%RFileCount%] file(s) found in directory [%WorkDirCurrentWork%\*.rpt]")
	
							For IdxRPT = 1 to RFileCount
								RFileName   = ItemExtract(IdxRPT, RFileList, @TAB)
								PRFileName  = "%WorkDirCurrentWork%\%RFileName%"
	
								If FileExist(PRFileName)
	
									ReportStat = ArrayFileGetCsv(PRFileName, 0, ";")
									RowCount = ArrInfo(ReportStat, 1) 
									ColCount = ArrInfo(ReportStat, 2)
	 
									NbDoc    = ReportStat[1,0] 
									NbPage   = ReportStat[1,1] 
									NbFeuille = NbPage / 2 
									LogInfo("ReportStat Info Pour [%RFileName%] - Nombre de Documents [%NbDoc%] - Nombre de Feuilles [%NbFeuille%] - Nombre de Pages [%NbPage%] - RowCount [%RowCount%] - ColCount [%ColCount%]")
	
									If StrIndexNc(RFileName, "_CE", 1, @Fwdscan)
										NBPagesE       = NbPage
										NBFeuillesE    = NbFeuille
										NBfichiers     = NBfichiers + 1
										BM_Ctl         = StrCat(BM_Ctl, "RPD;", FileNameE, ";", NBPagesE, ";", NBFeuillesE, ";", NBEnvoisE, ";", NBCards0E, ";", NBCards1E, ";", NBCards2E, ";", NBCards3E, ";", NBCards4E, ";", NBCards5E, ";", NBCards6E, ";", NBAutreE, @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "_CF", 1, @Fwdscan)
										NBPagesF       = NbPage
										NBFeuillesF    = NbFeuille
										NBfichiers     = NBfichiers + 1
										BM_Ctl         = StrCat(BM_Ctl, "RPD;", FileNameF, ";", NBPagesF, ";", NBFeuillesF, ";", NBEnvoisF, ";", NBCards0F, ";", NBCards1F, ";", NBCards2F, ";", NBCards3F, ";", NBCards4F, ";", NBCards5F, ";", NBCards6F, ";", NBAutreF, @CRLF)
									EndIf
								EndIf
							Next
						EndIf
	
						NBPagesT       = NBPagesE    + NBPagesF
						NBFeuillesT    = NBFeuillesE + NBFeuillesF
						NBEnvoisT      = NBEnvoisE   + NBEnvoisF
						NBCards0T      = NBCards0E   + NBCards0F
						NBCards1T      = NBCards1E   + NBCards1F
						NBCards2T      = NBCards2E   + NBCards2F
						NBCards3T      = NBCards3E   + NBCards3F
						NBCards4T      = NBCards4E   + NBCards4F
						NBCards5T      = NBCards5E   + NBCards5F
						NBCards6T      = NBCards6E   + NBCards6F
						NBAutreT       = NBAutreE    + NBAutreF
	
						BM_Ctl         = StrCat(BM_Ctl, "RPT;", NBfichiers, ";", NBPagesT, ";", NBFeuillesT, ";", NBEnvoisT, ";", NBCards0T, ";", NBCards1T, ";", NBCards2T, ";", NBCards3T, ";", NBCards4T, ";", NBCards5T, ";", NBCards6T, ";", NBAutreT)
						FilePut(CtrlFileNameBM, BM_Ctl)
					EndIf                                                                                  ; ZIP_BM
	
					If ZIP_BW
	;              RPH;AAAAMMJJ
	;              RPD;BWAAAAMMJJ_CF;NBPages;NBFeuilles;NBEnvois;NbCards0;NbCards1;NbCards2;NbCards3;NbCards4;NbCards5;NbCards6
	;              RPD;BWAAAAMMJJ_CE;NBPages;NBFeuilles;NBEnvois;NbCards0;NbCards1;NbCards2;NbCards3;NbCards4;NbCards5;NbCards6
	;              RPD;BWAAAAMMJJ_KF;NBPages;NBFeuilles;NBEnvois;NbCards0;NbCards1;NbCards2;NbCards3;NbCards4;NbCards5;NbCards6
	;              RPD;BWAAAAMMJJ_KE;NBPages;NBFeuilles;NBEnvois;NbCards0;NbCards1;NbCards2;NbCards3;NbCards4;NbCards5;NbCards6
	;              RPT;NBFichiers;TotPages;TotFeuilles;TotEnvois;TotCards0;TotCards1;TotCards2;TotCards3;TotCards4;TotCards5;TotCards6
						
	
						if ech_
							CtrlFileNameBW   = "%WorkDirCurrentBW%\%Type%%ZipFileDate%%Time%_Ech_Control.ctl"
							BW_Ctl         = ""
							NBfichiers     = 0
							NBfichiersNo   = 0
							BW_Ctl         = StrCat("RPH;", ZipFileDate, @CRLF)
							BWNo_Ctl       = StrCat("RPH;", ZipFileDate, @CRLF)
		
							FileNameCE      = "%Type%%ZipFileDate%%Time%_CE_Ech" 
							NBPagesCE       = 0
							NBFeuillesCE    = 0
							NBEnvoisCE      = 0
							NBCards0CE      = 0
							NBCards1CE      = 0
							NBCards2CE      = 0
							NBCards3CE      = 0
							NBCards4CE      = 0
							NBCards5CE      = 0
							NBCards6CE      = 0
							NBAutreCE       = 0
		
							FileNameCF      = "%Type%%ZipFileDate%%Time%_CF_Ech" 
							NBPagesCF       = 0
							NBFeuillesCF    = 0
							NBEnvoisCF      = 0
							NBCards0CF      = 0
							NBCards1CF      = 0
							NBCards2CF      = 0
							NBCards3CF      = 0
							NBCards4CF      = 0
							NBCards5CF      = 0
							NBCards6CF      = 0
							NBAutreCF       = 0
		
							FileNameKE      = "%Type%%ZipFileDate%%Time%_KE_Ech" 
							NBPagesKE       = 0
							NBFeuillesKE    = 0
							NBEnvoisKE      = 0
							NBCards0KE      = 0
							NBCards1KE      = 0
							NBCards2KE      = 0
							NBCards3KE      = 0
							NBCards4KE      = 0
							NBCards5KE      = 0
							NBCards6KE      = 0
							NBAutreKE       = 0
		
							FileNameKF      = "%Type%%ZipFileDate%%Time%_KF_Ech" 
							NBPagesKF       = 0
							NBFeuillesKF    = 0
							NBEnvoisKF      = 0
							NBCards0KF      = 0
							NBCards1KF      = 0
							NBCards2KF      = 0
							NBCards3KF      = 0
							NBCards4KF      = 0
							NBCards5KF      = 0
							NBCards6KF      = 0
							NBAutreKF       = 0
						else
							CtrlFileNameBW   = "%WorkDirCurrentBW%\%Type%%ZipFileDate%%Time%_Control.ctl"
							BW_Ctl         = ""
							NBfichiers     = 0
							NBfichiersNo   = 0
							BW_Ctl         = StrCat("RPH;", ZipFileDate, @CRLF)
							BWNo_Ctl       = StrCat("RPH;", ZipFileDate, @CRLF)
		
							FileNameCE      = "%Type%%ZipFileDate%%Time%_CE" 
							NBPagesCE       = 0
							NBFeuillesCE    = 0
							NBEnvoisCE      = 0
							NBCards0CE      = 0
							NBCards1CE      = 0
							NBCards2CE      = 0
							NBCards3CE      = 0
							NBCards4CE      = 0
							NBCards5CE      = 0
							NBCards6CE      = 0
							NBAutreCE       = 0
		
							FileNameCF      = "%Type%%ZipFileDate%%Time%_CF" 
							NBPagesCF       = 0
							NBFeuillesCF    = 0
							NBEnvoisCF      = 0
							NBCards0CF      = 0
							NBCards1CF      = 0
							NBCards2CF      = 0
							NBCards3CF      = 0
							NBCards4CF      = 0
							NBCards5CF      = 0
							NBCards6CF      = 0
							NBAutreCF       = 0
		
							FileNameKE      = "%Type%%ZipFileDate%%Time%_KE" 
							NBPagesKE       = 0
							NBFeuillesKE    = 0
							NBEnvoisKE      = 0
							NBCards0KE      = 0
							NBCards1KE      = 0
							NBCards2KE      = 0
							NBCards3KE      = 0
							NBCards4KE      = 0
							NBCards5KE      = 0
							NBCards6KE      = 0
							NBAutreKE       = 0
		
							FileNameKF      = "%Type%%ZipFileDate%%Time%_KF" 
							NBPagesKF       = 0
							NBFeuillesKF    = 0
							NBEnvoisKF      = 0
							NBCards0KF      = 0
							NBCards1KF      = 0
							NBCards2KF      = 0
							NBCards3KF      = 0
							NBCards4KF      = 0
							NBCards5KF      = 0
							NBCards6KF      = 0
							NBAutreKF       = 0
	
						Endif
	
						For IdxCount = 0 to (IdxK - 1)
	
							If SortKey[IdxCount, 1] == "010" ||SortKey[IdxCount, 1] == "012" || SortKey[IdxCount, 1] == "016" || SortKey[IdxCount, 1] == "020" || SortKey[IdxCount, 1] == "030"
								If SortKey[IdxCount, 7] == "G"
									NBEnvoisKE      = NBEnvoisKE + 1
									NBCards0KE      = NBCards0KE + SortKey[IdxCount, 10]
									NBCards1KE      = NBCards1KE + SortKey[IdxCount, 11]
									NBCards2KE      = NBCards2KE + SortKey[IdxCount, 12]
									NBCards3KE      = NBCards3KE + SortKey[IdxCount, 13]
									NBCards4KE      = NBCards4KE + SortKey[IdxCount, 14]
									NBCards5KE      = NBCards5KE + SortKey[IdxCount, 15]
									NBCards6KE      = NBCards6KE + SortKey[IdxCount, 16]
								EndIf
	
								If SortKey[IdxCount, 7] == "H" 
									NBEnvoisKF      = NBEnvoisKF + 1
									NBCards0KF      = NBCards0KF + SortKey[IdxCount, 10]
									NBCards1KF      = NBCards1KF + SortKey[IdxCount, 11]
									NBCards2KF      = NBCards2KF + SortKey[IdxCount, 12]
									NBCards3KF      = NBCards3KF + SortKey[IdxCount, 13]
									NBCards4KF      = NBCards4KF + SortKey[IdxCount, 14]
									NBCards5KF      = NBCards5KF + SortKey[IdxCount, 15]
									NBCards6KF      = NBCards6KF + SortKey[IdxCount, 16]
								EndIf
							EndIf
	
							If SortKey[IdxCount, 1] == "002" || SortKey[IdxCount, 1] == "015" 
								If SortKey[IdxCount, 7] == "E"
									NBEnvoisCE      = NBEnvoisCE + 1
									NBCards0CE      = NBCards0CE + SortKey[IdxCount, 10]
									NBCards1CE      = NBCards1CE + SortKey[IdxCount, 11]
									NBCards2CE      = NBCards2CE + SortKey[IdxCount, 12]
									NBCards3CE      = NBCards3CE + SortKey[IdxCount, 13]
									NBCards4CE      = NBCards4CE + SortKey[IdxCount, 14]
									NBCards5CE      = NBCards5CE + SortKey[IdxCount, 15]
									NBCards6CE      = NBCards6CE + SortKey[IdxCount, 16]
								EndIf
	
								If SortKey[IdxCount, 7] == "F" 
									NBEnvoisCF      = NBEnvoisCF + 1
									NBCards0CF      = NBCards0CF + SortKey[IdxCount, 10]
									NBCards1CF      = NBCards1CF + SortKey[IdxCount, 11]
									NBCards2CF      = NBCards2CF + SortKey[IdxCount, 12]
									NBCards3CF      = NBCards3CF + SortKey[IdxCount, 13]
									NBCards4CF      = NBCards4CF + SortKey[IdxCount, 14]
									NBCards5CF      = NBCards5CF + SortKey[IdxCount, 15]
									NBCards6CF      = NBCards6CF + SortKey[IdxCount, 16]
								EndIf
							EndIf
	
						Next
	
						IF ech_
							FileNameNE2A    = "%Type%%ZipFileDate%%Time%_NE_2A_Ech" 
							NBPagesNE2A     = 0
							NBFeuillesNE2A  = 0
		
							FileNameNF2F    = "%Type%%ZipFileDate%%Time%_NF_2F_Ech" 
							NBPagesNF2F     = 0
							NBFeuillesNF2F  = 0
		
							FileNameNE15A   = "%Type%%ZipFileDate%%Time%_NE_15A_Ech" 
							NBPagesNE15A    = 0
							NBFeuillesNE15A = 0
		
							FileNameNF15F   = "%Type%%ZipFileDate%%Time%_NF_15F_Ech" 
							NBPagesNF15F    = 0
							NBFeuillesNF15F = 0
						else
							FileNameNE2A    = "%Type%%ZipFileDate%%Time%_NE_2A" 
							NBPagesNE2A     = 0
							NBFeuillesNE2A  = 0
		
							FileNameNF2F    = "%Type%%ZipFileDate%%Time%_NF_2F" 
							NBPagesNF2F     = 0
							NBFeuillesNF2F  = 0
		
							FileNameNE15A   = "%Type%%ZipFileDate%%Time%_NE_15A" 
							NBPagesNE15A    = 0
							NBFeuillesNE15A = 0
		
							FileNameNF15F   = "%Type%%ZipFileDate%%Time%_NF_15F" 
							NBPagesNF15F    = 0
							NBFeuillesNF15F = 0
	
						EndIf
	
						NBPagesT       = NBPagesNE2A    + NBPagesNE15A    + NBPagesNF2F    + NBPagesNF15F
						NBFeuillesT    = NBFeuillesNE2A + NBFeuillesNE15A + NBFeuillesNF2F + NBFeuillesNF15F
	
						RFileList   = FileItemize("%WorkDirCurrentWork%\*.rpt")
						RFileCount  = ItemCount(RFileList, @TAB)
	
						If RFileCount > 0
							LogInfo("[%RFileCount%] file(s) found in directory [%WorkDirCurrentWork%\*.rpt]")
	
							For IdxRPT = 1 to RFileCount
								RFileName   = ItemExtract(IdxRPT, RFileList, @TAB)
								PRFileName  = "%WorkDirCurrentWork%\%RFileName%"
	
								If FileExist(PRFileName)
	
									ReportStat = ArrayFileGetCsv(PRFileName, 0, ";")
									RowCount = ArrInfo(ReportStat, 1) 
									ColCount = ArrInfo(ReportStat, 2)
	 
									NbDoc    = ReportStat[1,0] 
									NbPage   = ReportStat[1,1] 
									NbFeuille = NbPage / 2 
									LogInfo("ReportStat Info Pour [%RFileName%] - Nombre de Documents [%NbDoc%] - Nombre de Feuilles [%NbFeuille%] - Nombre de Pages [%NbPage%] - RowCount [%RowCount%] - ColCount [%ColCount%]")
	
									If StrIndexNc(RFileName, "CE", 1, @Fwdscan)
										NBFeuillesCE    = NbFeuille
										NBPagesCE       = NbPage
										NBfichiers      = NBfichiers + 1
										BW_Ctl          = StrCat(BW_Ctl, "RPD;", FileNameCE, ";", NBPagesCE, ";", NBFeuillesCE, ";", NBEnvoisCE, ";", NBCards0CE, ";", NBCards1CE, ";", NBCards2CE, ";", NBCards3CE, ";", NBCards4CE, ";", NBCards5CE, ";", NBCards6CE, ";", NBAutreCE, @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "CF", 1, @Fwdscan)
										NBFeuillesCF    = NbFeuille
										NBPagesCF       = NbPage
										NBfichiers      = NBfichiers + 1
										BW_Ctl          = StrCat(BW_Ctl, "RPD;", FileNameCF, ";", NBPagesCF, ";", NBFeuillesCF, ";", NBEnvoisCF, ";", NBCards0CF, ";", NBCards1CF, ";", NBCards2CF, ";", NBCards3CF, ";", NBCards4CF, ";", NBCards5CF, ";", NBCards6CF, ";", NBAutreCF, @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "KE", 1, @Fwdscan)
										NBFeuillesKE    = NbFeuille
										NBPagesKE       = NbPage
										NBfichiers      = NBfichiers + 1
										BW_Ctl          = StrCat(BW_Ctl, "RPD;", FileNameKE, ";", NBPagesKE, ";", NBFeuillesKE, ";", NBEnvoisKE, ";", NBCards0KE, ";", NBCards1KE, ";", NBCards2KE, ";", NBCards3KE, ";", NBCards4KE, ";", NBCards5KE, ";", NBCards6KE, ";", NBAutreKE, @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "KF", 1, @Fwdscan)
										NBFeuillesKF    = NbFeuille
										NBPagesKF       = NbPage
										NBfichiers      = NBfichiers + 1
										BW_Ctl          = StrCat(BW_Ctl, "RPD;", FileNameKF, ";", NBPagesKF, ";", NBFeuillesKF, ";", NBEnvoisKF, ";", NBCards0KF, ";", NBCards1KF, ";", NBCards2KF, ";", NBCards3KF, ";", NBCards4KF, ";", NBCards5KF, ";", NBCards6KF, ";", NBAutreKF, @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "NE_2A", 1, @Fwdscan)
										NBFeuillesNE2A  = NbFeuille
										NBPagesNE2A     = NbPage
										NBfichiersNo    = NBfichiersNo + 1
										BWNo_Ctl        = StrCat(BWNo_Ctl, "RPD;", FileNameNE2A,  ";", NBPagesNE2A, ";", NBFeuillesNE2A, ";", NBFeuillesNE2A, ";0;0;0;0;0;0;0;0", @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "NE_15A", 1, @Fwdscan)
										NBFeuillesNE15A = NbFeuille
										NBPagesNE15A    = NbPage
										NBfichiersNo    = NBfichiersNo + 1
										BWNo_Ctl        = StrCat(BWNo_Ctl, "RPD;", FileNameNE15A, ";", NBPagesNE15A, ";", NBFeuillesNE15A, ";", NBFeuillesNE15A, ";0;0;0;0;0;0;0;0", @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "NF_2F", 1, @Fwdscan)
										NBFeuillesNF2F  = NbFeuille
										NBPagesNF2F     = NbPage
										NBfichiersNo    = NBfichiersNo + 1
										BWNo_Ctl        = StrCat(BWNo_Ctl, "RPD;", FileNameNF2F,  ";", NBPagesNF2F, ";", NBFeuillesNF2F, ";", NBFeuillesNF2F, ";0;0;0;0;0;0;0;0", @CRLF)
									EndIf
	
									If StrIndexNc(RFileName, "NF_15F", 1, @Fwdscan)
										NBFeuillesNF15F = NbFeuille
										NBPagesNF15F    = NbPage
										NBfichiersNo    = NBfichiersNo + 1
										BWNo_Ctl        = StrCat(BWNo_Ctl, "RPD;", FileNameNF15F, ";", NBPagesNF15F, ";", NBFeuillesNF15F, ";", NBFeuillesNF15F, ";0;0;0;0;0;0;0;0", @CRLF)
									EndIf
								EndIf
							Next
						EndIf
	
						NBPagesT       = NBPagesCE    + NBPagesCF    + NBPagesKE    + NBPagesKF
						NBFeuillesT    = NBFeuillesCE + NBFeuillesCF + NBFeuillesKE + NBFeuillesKF
						NBEnvoisT      = NBEnvoisCE   + NBEnvoisCF   + NBEnvoisKE   + NBEnvoisKF
						NBCards0T      = NBCards0CE   + NBCards0CF   + NBCards0KE   + NBCards0KF
						NBCards1T      = NBCards1CE   + NBCards1CF   + NBCards1KE   + NBCards1KF
						NBCards2T      = NBCards2CE   + NBCards2CF   + NBCards2KE   + NBCards2KF
						NBCards3T      = NBCards3CE   + NBCards3CF   + NBCards3KE   + NBCards3KF
						NBCards4T      = NBCards4CE   + NBCards4CF   + NBCards4KE   + NBCards4KF
						NBCards5T      = NBCards5CE   + NBCards5CF   + NBCards5KE   + NBCards5KF
						NBCards6T      = NBCards6CE   + NBCards6CF   + NBCards6KE   + NBCards6KF
						NBAutreT       = NBAutreCE    + NBAutreCF    + NBAutreKE    + NBAutreKF
	
						if NBfichiers != 0 
							BW_Ctl         = StrCat(BW_Ctl, "RPT", ";", NBfichiers, ";", NBPagesT, ";", NBFeuillesT, ";", NBEnvoisT, ";", NBCards0T, ";", NBCards1T, ";", NBCards2T, ";", NBCards3T, ";", NBCards4T, ";", NBCards5T, ";", NBCards6T, ";", NBAutreT)
							FilePut(CtrlFileNameBW, BW_Ctl)
						EndIf
	
	;              RPH;AAAAMMJJ
	;              RPD;BWAAAAMMJJ_NE_15A;NBPages;NBFeuilles;NBEnvois;0;0;0;0;0;0;0
	;              RPD;BWAAAAMMJJ_NF_15F;NBPages;NBFeuilles;NBEnvois;0;0;0;0;0;0;0
	;              RPD;BWAAAAMMJJ_NE_2A;NBPages;NBFeuilles;NBEnvois;0;0;0;0;0;0;0
	;              RPD;BWAAAAMMJJ_NF_2F;NBPages;NBFeuilles;NBEnvois;0;0;0;0;0;0;0
	;              RPT;NBFichiers;TotPages;TotFeuilles;TotEnvois;0;0;0;0;0;0;0
	
						If ech_
							CtrlFileNameBWNo = "%WorkDirCurrentBWNo%\%Type%NoCarriers%ZipFileDate%%Time%_Ech_Control.ctl"
						else
							CtrlFileNameBWNo = "%WorkDirCurrentBWNo%\%Type%NoCarriers%ZipFileDate%%Time%_Control.ctl"
						EndIf
						NBPagesT       = NBPagesNE2A    + NBPagesNE15A    + NBPagesNF2F    + NBPagesNF15F
						NBFeuillesT    = NBFeuillesNE2A + NBFeuillesNE15A + NBFeuillesNF2F + NBFeuillesNF15F
						If NBfichiersNo != 0 
							BWNo_Ctl       = StrCat(BWNo_Ctl, "RPT", ";", NBfichiersNo, ";", NBPagesT, ";", NBFeuillesT, ";", NBFeuillesT, ";0;0;0;0;0;0;0")
							FilePut(CtrlFileNameBWNo, BWNo_Ctl)
						EndIf
					EndIf                                                                                  ; ZIP_BW
	
	;				Note : Création du rapport de rapport de reconcialiation.
					Space5                = "     "
					Space10               = "          "
					Space20               = "                    "
					RptCpt_Site_TORONTO       = "Toronto"
					RptCpt_Site_MONTREAL      = "Montréal"
					RptCpt_Site_INTERMEDIAIRE = "Inter."
					RptCpt_Site_NON_TRAITE    = "Non traité"
					RptCpt_Total_Doc_MTL  = 0
					RptCpt_Total_Doc_TO   = 0                                                              ; Toronto
					RptCpt_Total_Doc_NT   = 0                                                              ; Kits Non traités
					RptCpt_Total_Pag_MTL  = 0
					RptCpt_Total_Pag_TO   = 0
					RptCpt_Total_Pag_NT   = 0                                                              ; Kits Non traités
					RptCpt_Total_Leav_MTL = 0
					RptCpt_Total_Leav_TO  = 0
					RptCpt_Total_Leav_NT  = 0                                                              ; Kits Non traités
	
					ReportFilesMsg =                 StrCat(StrFix("Nom des fichiers", "", 60), Space5, StrFixLeft("Nombre de", "", 10), Space5, StrFixLeft("Nombre", "", 10),   Space5, StrFixLeft("Nombre de", "", 10), Space5, StrFixLeft("Site", "", 10), Space5, StrFixLeft("Insertion", "", 10),  Space5, StrFixLeft("Enveloppe", "", 10), @CRLF)
					ReportFilesMsg = StrCat(ReportFilesMsg, Space20, Space20, Space20, Space5,          StrFixLeft("documents", "", 10), Space5, StrFixLeft("de Pages", "", 10), Space5, StrFixLeft("feuilles", "", 10),  Space5, Space5, Space5,             Space5, StrFixLeft("Encart O/N", "", 10), Space5, StrFixLeft("Retour O/N", "", 10), @CRLF)
	
					ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Fichier(s) d'entrée", "", 20), @CRLF)
	
					If (RptCpt_FirstBill > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_FirstBill_Name, "", 60), Space5, StrFixLeft(RptCpt_FirstBill, "", 10))
					If (RptCpt_Salvage1  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_Salvage1_Name, "", 60),  Space5, StrFixLeft(RptCpt_Salvage1,  "", 10))
					If (RptCpt_Salvage2  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_Salvage2_Name, "", 60),  Space5, StrFixLeft(RptCpt_Salvage2,  "", 10))
					If (RptCpt_Salvage   > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_Salvage_Name, "", 60),   Space5, StrFixLeft(RptCpt_Salvage,   "", 10))
					If (RptCpt_THIRDBILL > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_THIRDBILL_Name, "", 60), Space5, StrFixLeft(RptCpt_THIRDBILL, "", 10))
	
					If ZIP_BM
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 168))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Total", "", 60), Space5, StrFixLeft(RptCpt_ADHOC,     "", 10), @CRLF)
					Else
						If (RptCpt_ADHOC     > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_ADHOC_Name, "", 60),     Space5, StrFixLeft(RptCpt_ADHOC,     "", 10))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 168))
					EndIf
	
					If (RptCpt_RRDFinal  > 0)
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, @CRLF, StrFix("Fichier(s) intermediaire(s)", "", 30), @CRLF)
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_RRDFinal_Name, "", 60), Space5, StrFixLeft(RptCpt_RRDFinal, "", 10), Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_INTERMEDIAIRE, "", 10))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 168))
					EndIf
	
					ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, @CRLF, StrFix("Fichier(s) de sortie", "", 20), @CRLF)
	
					If RptCpt_9A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_9A_Name, "", 60), Space5, StrFixLeft(RptCpt_9A, "", 10))
						PagesNumber    = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_9A_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_9A
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("O", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("O", "", 10), Space5, StrFixLeft("O", "", 10))
						EndIf
					EndIf
	
					If RptCpt_9F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_9F_Name, "", 60), Space5, StrFixLeft(RptCpt_9F, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_9F_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_9F
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("O", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("O", "", 10), Space5, StrFixLeft("O", "", 10))
						EndIf
					EndIf
	
					If RptCpt_101A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_101A_Name, "", 60), Space5, StrFixLeft(RptCpt_101A, "", 10))
						PagesNumber    = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_101A_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_101A
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("N", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("N", "", 10))
						EndIf
					EndIf
	
					If RptCpt_101F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_101F_Name, "", 60), Space5, StrFixLeft(RptCpt_101F, "", 10))
						PagesNumber    = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_101F_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_101F
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("N", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("N", "", 10))
						EndIf
					EndIf
	
					If RptCpt_300A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_300A_Name, "", 60), Space5, StrFixLeft(RptCpt_300A, "", 10))
						PagesNumber    = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_300A_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_300A
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("?", "", 10), Space5, StrFixLeft("?", "", 10))
						EndIf
					EndIf
	
					If RptCpt_300F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_300F_Name, "", 60), Space5, StrFixLeft(RptCpt_300F, "", 10))
						PagesNumber    = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_300F_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_300F
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("?", "", 10), Space5, StrFixLeft("?", "", 10))
						EndIf
					EndIf
	
					If RptCpt_400A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_400A_Name, "", 60), Space5, StrFixLeft(RptCpt_400A, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_400A_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_400A
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						EndIf
					EndIf
	
					If RptCpt_400F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_400F_Name, "", 60), Space5, StrFixLeft(RptCpt_400F, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_400F_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_400F
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						EndIf
					EndIf
	
					If RptCpt_401A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_401A_Name, "", 60), Space5, StrFixLeft(RptCpt_401A, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_401A_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_401A
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						EndIf
					EndIf
	
					If RptCpt_401F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_401F_Name, "", 60), Space5, StrFixLeft(RptCpt_401F, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_401F_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_MTL += RptCpt_401F
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_MTL  += PagesNumber
							RptCpt_Total_Leav_MTL += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_MONTREAL, "", 10), Space5, StrFixLeft("N", "", 10), Space5, StrFixLeft("O", "", 10))
						EndIf
					EndIf
	
					If RptCpt_Total_Doc_MTL > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 168))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Total", "", 60), Space5, StrFixLeft(RptCpt_Total_Doc_MTL, "", 10), Space5, StrFixLeft(RptCpt_Total_Pag_MTL, "", 10), Space5, StrFixLeft(RptCpt_Total_Leav_MTL, "", 10), @CRLF)
					EndIf
	
					If RptCpt_CE > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_CE_Name, "", 60), Space5, StrFixLeft(RptCpt_CE, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_CE_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_CE
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_CF > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_CF_Name, "", 60), Space5, StrFixLeft(RptCpt_CF, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_CF_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_CF
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_KE > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_KE_Name, "", 60), Space5, StrFixLeft(RptCpt_KE, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_KE_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_KE
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_KF > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_KF_Name, "", 60), Space5, StrFixLeft(RptCpt_KF, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_KF_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_KF
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_2A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_2A_Name, "", 60), Space5, StrFixLeft(RptCpt_2A, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_2A_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_2A
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_2F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_2F_Name, "", 60), Space5, StrFixLeft(RptCpt_2F, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_2F_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_2F
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_15A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_15A_Name, "", 60), Space5, StrFixLeft(RptCpt_15A, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_15A_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_15A
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_15F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_15F_Name, "", 60), Space5, StrFixLeft(RptCpt_15F, "", 10))
						PagesNumber = ExtractValueFromCsvFile(StrCat(WorkDirCurrentWork, "\", StrTrim(RptCpt_15F_Name), ".rpt"), ";", 1, 1)
						RptCpt_Total_Doc_TO += RptCpt_15F
						If PagesNumber > 0
							LeavesNumber = PagesNumber / 2
							RptCpt_Total_Pag_TO  += PagesNumber
							RptCpt_Total_Leav_TO += LeavesNumber
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, StrFixLeft(PagesNumber, "", 10), Space5, StrFixLeft(LeavesNumber, "", 10), Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						Else
							ReportFilesMsg = StrCat(ReportFilesMsg, Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_TORONTO, "", 10))
						EndIf
					EndIf
	
					If RptCpt_Total_Doc_TO > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 168))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Total", "", 60), Space5, StrFixLeft(RptCpt_Total_Doc_TO, "", 10), Space5, StrFixLeft(RptCpt_Total_Pag_TO, "", 10), Space5, StrFixLeft(RptCpt_Total_Leav_TO, "", 10), @CRLF)
					EndIf
	
					ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, @CRLF, StrFix("Fichier(s) de sortie Non traités", "", 10), @CRLF)
	
					If RptCpt_SCA > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_SCA_Name, "", 60), Space5, StrFixLeft(RptCpt_SCA, "", 10), Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_NON_TRAITE, "", 10))
						RptCpt_Total_Doc_NT += RptCpt_SCA
					EndIf
	
					If RptCpt_SCF > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_SCF_Name, "", 60), Space5, StrFixLeft(RptCpt_SCF, "", 10), Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_NON_TRAITE, "", 10))
						RptCpt_Total_Doc_NT += RptCpt_SCF
					EndIf
	
					If RptCpt_950A > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_950A_Name, "", 60), Space5, StrFixLeft(RptCpt_950A, "", 10), Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_NON_TRAITE, "", 10))
						RptCpt_Total_Doc_NT += RptCpt_950A
					EndIf
	
					If RptCpt_950F > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix(RptCpt_950F_Name, "", 60), Space5, StrFixLeft(RptCpt_950F, "", 10), Space5, Space10, Space5, Space10, Space5, StrFixLeft(RptCpt_Site_NON_TRAITE, "", 10))
						RptCpt_Total_Doc_NT += RptCpt_950F
					EndIf
	
					If RptCpt_Total_Doc_NT > 0
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 168))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Total", "", 60), Space5, StrFixLeft(RptCpt_Total_Doc_NT, "", 10), @CRLF)
					EndIf
	
					If RptCpt_Total_Pag_MTL > 0 || RptCpt_Total_Pag_TO > 0
						RptCpt_Total_Pag_Composer = RptCpt_Total_Pag_MTL + RptCpt_Total_Pag_TO
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, @CRLF, StrFix("Nombre de pages composer", " ", 60), Space5, Space10, Space5, StrFixLeft(RptCpt_Total_Pag_Composer, " ", 10))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Nombre de pages de PDF", " ", 60), Space5, Space10, Space5, StrFixLeft(RptCpt_Total_Pag_Composer, " ", 10))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 168))
					EndIf
	
					ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, @CRLF, StrFix("Type de Kits", "", 20), @TAB, @TAB, @TAB, StrFix("Nombre de Kits", "", 20), @CRLF)
	
	;				Note : N'afficher les kits convertis que pour les cas BM et BW, car pour les B3, il n'y a pas de conversion
					If ZIP_BM || ZIP_BW
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Avant conversion : ", "", 20), @CRLF)
	
						Basic_Kit9A_Total   -= Kit_2A_TO_9A
						Basic_Kit9F_Total   -= Kit_2F_TO_9F
						Basic_Kit101A_Total -= Kit_2A_TO_101A
						Basic_Kit101F_Total -= Kit_2F_TO_101F
	
						If (Basic_Kit2A_Total   > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 2A",   "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit2A_Total,   "", 6))
						If (Basic_Kit2F_Total   > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 2F",   "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit2F_Total,   "", 6))
						If (Basic_Kit9A_Total   > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 9A",   "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit9A_Total,   "", 6))
						If (Basic_Kit9F_Total   > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 9F",   "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit9F_Total,   "", 6))
						If (Basic_Kit10A_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 10A",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit10A_Total,  "", 6))
						If (Basic_Kit10F_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 10F",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit10F_Total,  "", 6))
						If (Basic_Kit101A_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 101A", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit101A_Total, "", 6))
						If (Basic_Kit101F_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 101F", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit101F_Total, "", 6))
						If (Basic_Kit200A_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 200A", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit200A_Total, "", 6))
						If (Basic_Kit200F_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 200F", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit200F_Total, "", 6))
						If (Basic_Kit201A_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 201A", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit201A_Total, "", 6))
						If (Basic_Kit201F_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 201F", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit201F_Total, "", 6))
	
						Basic_Kit12A_Total = Basic_Kit12A_Total -  Kit_15A_TO_12A
						If (Basic_Kit12A_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 12A",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit12A_Total,  "", 6))
	
						Basic_Kit12F_Total = Basic_Kit12F_Total -  Kit_15F_TO_12F
						If (Basic_Kit12F_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 12F",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit12F_Total,  "", 6))
	
						If (Basic_Kit15A_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 15A",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit15A_Total,  "", 6))
						If (Basic_Kit15F_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 15F",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit15F_Total,  "", 6))
						If (Basic_Kit16A_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 16A",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit16A_Total,  "", 6))
						If (Basic_Kit16F_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 16F",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit16F_Total,  "", 6))
						If (Basic_Kit20A_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 20A",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit20A_Total,  "", 6))
						If (Basic_Kit20F_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 20F",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit20F_Total,  "", 6))
						If (Basic_Kit30A_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 30A",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit30A_Total,  "", 6))
						If (Basic_Kit30F_Total  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 30F",  "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit30F_Total,  "", 6))
						If (Basic_Kit300A_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 300A", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit300A_Total, "", 6))
						If (Basic_Kit300F_Total > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 300F", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kit300F_Total, "", 6))
		
						Basic_Kits_Total  = Basic_Kit2A_Total + Basic_Kit2F_Total + Basic_Kit9A_Total + Basic_Kit9F_Total + Basic_Kit101A_Total + Basic_Kit101F_Total + Basic_Kit200A_Total + Basic_Kit200F_Total + Basic_Kit201A_Total + Basic_Kit201F_Total + Basic_Kit12A_Total + Basic_Kit12F_Total + Basic_Kit15A_Total + Basic_Kit15F_Total
						Basic_Kits_Total += Basic_Kit10A_Total + Basic_Kit10F_Total + Basic_Kit16A_Total + Basic_Kit16F_Total + Basic_Kit20A_Total + Basic_Kit20F_Total + Basic_Kit30A_Total + Basic_Kit30F_Total + Basic_Kit300A_Total + Basic_Kit300F_Total
		
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 55))
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Total", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Basic_Kits_Total, "", 6), @CRLF)
	
						ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Après conversion : ", "", 20), @CRLF)
					EndIf
	
					If (Kit_2A_SansCarte  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 2A Sans Carte", "", 20),  @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2A_SansCarte, "", 6))
					If (Kit_2F_SansCarte  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 2F Sans Carte", "", 20),  @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2F_SansCarte, "", 6))
					If (Kit_2A_AvecCarte  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 2A Avec Carte", "", 20),  @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2A_AvecCarte, "", 6))
					If (Kit_2F_AvecCarte  > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 2F Avec Carte", "", 20),  @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2F_AvecCarte, "", 6))
	
					If (Kit_10A_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 10A Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_10A_SansCarte, "", 6))
					If (Kit_10F_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 10F Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_10F_SansCarte, "", 6))
					If (Kit_10A_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 10A Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_10A_AvecCarte, "", 6))
					If (Kit_10F_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 10F Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_10F_AvecCarte, "", 6))
	
					If (Kit_12A_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 12A Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_12A_SansCarte, "", 6))
					If (Kit_12F_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 12F Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_12F_SansCarte, "", 6))
					If (Kit_12A_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 12A Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_12A_AvecCarte, "", 6))
					If (Kit_12F_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 12F Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_12F_AvecCarte, "", 6))
					If (Kit_15A_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 15A Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_15A_SansCarte, "", 6))
					If (Kit_15F_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 15F Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_15F_SansCarte, "", 6))
					If (Kit_15A_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 15A Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_15A_AvecCarte, "", 6))
					If (Kit_15F_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 15F Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_15F_AvecCarte, "", 6))
					If (Kit_16A_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 16A Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_16A_SansCarte, "", 6))
					If (Kit_16F_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 16F Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_16F_SansCarte, "", 6))
					If (Kit_16A_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 16A Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_16A_AvecCarte, "", 6))
					If (Kit_16F_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 16F Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_16F_AvecCarte, "", 6))
	
					If (Kit_20A_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 20A Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_20A_SansCarte, "", 6))
					If (Kit_20F_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 20F Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_20F_SansCarte, "", 6))
					If (Kit_20A_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 20A Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_20A_AvecCarte, "", 6))
					If (Kit_20F_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 20F Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_20F_AvecCarte, "", 6))
	
					If (Kit_30A_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 30A Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_30A_SansCarte, "", 6))
					If (Kit_30F_SansCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 30F Sans Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_30F_SansCarte, "", 6))
					If (Kit_30A_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 30A Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_30A_AvecCarte, "", 6))
					If (Kit_30F_AvecCarte > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 30F Avec Carte", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_30F_AvecCarte, "", 6))
	
					Kits_Total  = Kit_2A_SansCarte + Kit_2F_SansCarte + Kit_2A_AvecCarte + Kit_2F_AvecCarte + Kit_10A_SansCarte + Kit_10F_SansCarte + Kit_10A_AvecCarte + Kit_10F_AvecCarte + Kit_12A_SansCarte + Kit_12F_SansCarte + Kit_12A_AvecCarte + Kit_12F_AvecCarte + Kit_15A_SansCarte + Kit_15F_SansCarte + Kit_15A_AvecCarte + Kit_15F_AvecCarte + Kit_16A_SansCarte + Kit_16F_SansCarte + Kit_16A_AvecCarte + Kit_16F_AvecCarte + Kit_20A_SansCarte + Kit_20F_SansCarte + Kit_20A_AvecCarte + Kit_20F_AvecCarte + Kit_30A_SansCarte + Kit_30F_SansCarte + Kit_30A_AvecCarte + Kit_30F_AvecCarte
	
	;				Note : Ajustement du nombre de kits en fonction des kits changés
					Kit_9A   -= Kit_2A_TO_9A
					Kit_9F   -= Kit_2F_TO_9F
					Kit_101A -= Kit_2A_TO_101A
					Kit_101F -= Kit_2F_TO_101F
	
					If (Kit_9A   > 0)       then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 9A", "", 20),  @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_9A, "", 6))
					If (Kit_9F   > 0)       then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 9F", "", 20),  @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_9F, "", 6))
					If (Kit_2A_TO_9A > 0)   then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 9A(2A-TypeR)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2A_TO_9A, "", 6))
					If (Kit_2F_TO_9F > 0)   then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 9F(2F-TypeR)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2F_TO_9F, "", 6))
	
					If (Kit_101A > 0)       then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 101A", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_101A, "", 6))
					If (Kit_101F > 0)       then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 101F", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_101F, "", 6))
					If (Kit_2A_TO_101A > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 101A(2A-TypeA)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2A_TO_101A, "", 6))
					If (Kit_2F_TO_101F > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 101F(2F-TypeA)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_2F_TO_101F, "", 6))
	
					If (Kit_300A > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 300A", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_300A, "", 6))
					If (Kit_300F > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 300F", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_300F, "", 6))
					If (Kit_400A > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 400A(200A)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_400A, "", 6))
					If (Kit_400F > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 400F(200F)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_400F, "", 6))
					If (Kit_401A > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 401A(201A)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_401A, "", 6))
					If (Kit_401F > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 401F(201F)", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_401F, "", 6))
					If (Kit_950A > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 950A", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_950A, "", 6))
					If (Kit_950F > 0) then ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Kits 950F", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kit_950F, "", 6))
	
					Kits_Total  += Kit_9A + Kit_9F + Kit_101A + Kit_101F + Kit_300A + Kit_300F + Kit_400A + Kit_400F + Kit_401A + Kit_401F + Kit_950A + Kit_950F + Kit_2A_TO_9A + Kit_2F_TO_9F + Kit_2A_TO_101A + Kit_2F_TO_101F
	
					ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFill("-", 55))
					ReportFilesMsg = StrCat(ReportFilesMsg, @CRLF, StrFix("Total", "", 20), @TAB, @TAB, @TAB, @TAB, StrFixLeft(Kits_Total, "", 6), @CRLF)
	
				EndIf
				LogInfo("End Creation of Control files") 
	
	;********************************************************************************************************************************************
				LogInfo("Start Packaging results and dispatch") 
	
				;########################################
				; Packaging results
				;########################################
	   
				If ErrorCount == 0
	
					If ZIP_BM
						ResultsFileList  = FileItemize("%WorkDirCurrentBM%\*.pdf|%WorkDirCurrentBM%\*.txt")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							;########################################
							; ZIP  BMYYYYMMDD1000.zip and Move to Vipond Ms2kos166 
							; BMYYYYMMDD1000_CE.pdf
							; BMYYYYMMDD1000_CE.txt
							; BMYYYYMMDD1000_CF.pdf
							; BMYYYYMMDD1000_CF.txt
							; BMYYYYMMDD1000_Control.ctl
							;########################################
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
	
							if ech_
								ZipFolderExe("%WorkDirCurrentBM%\*.*", "%WorkDirCurrent%\%Type%%ZipFileDate%%Time%_Ech.zip")
							else
								ZipFolderExe("%WorkDirCurrentBM%\*.*", "%WorkDirCurrent%\%Type%%ZipFileDate%%Time%.zip")
							endif
							LOG_FILE  = LOG_FILE_TEMP 
	
							FileCopyWithLog("%WorkDirCurrent%\*.ZIP", SFTP_VIPOND_DIR)
							;SFTP_CAA_DIR
						EndIf
	
						;########################################
						; Move to CAAQUE Client
						; Principaux_Fichier Ebill_YYYY.MM.DD.csv
						; Associes_Fichier Ebill_YYYY.MM.DD.csv
						; Courriel_R2_YYYYMMDD.csv
						;########################################
						FileCopyWithLog("%WorkDirCurrentWork%\*.Csv", SFTP_CAA_DIR)
					EndIf                                                                                  ; ZIP_BM
	
					If ZIP_BW
						ResultsFileList  = FileItemize("%WorkDirCurrentBW%\*.pdf|%WorkDirCurrentBW%\*.txt")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							;########################################
							; ZIP  _BWYYYYMMDD1000.zip and Move to Vipond Ms2kos166
							; BWYYYYMMDD1000_CE.pdf
							; BWYYYYMMDD1000_CE.txt
							; BWYYYYMMDD1000_CF.pdf
							; BWYYYYMMDD1000_CF.txt
							; BWYYYYMMDD1000_KE.pdf
							; BWYYYYMMDD1000_KE.txt
							; BWYYYYMMDD1000_KF.pdf
							; BWYYYYMMDD1000_KF.txt
							; BWYYYYMMDD1000_Control.ctl
							;########################################
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
	
							if ech_
								ZipFolderExe("%WorkDirCurrentBW%\*.*", "%WorkDirCurrent%\%Type%%ZipFileDate%%Time%_Ech.zip")
							else
								ZipFolderExe("%WorkDirCurrentBW%\*.*", "%WorkDirCurrent%\%Type%%ZipFileDate%%Time%.zip")
							endif
							LOG_FILE  = LOG_FILE_TEMP
						EndIf                                                                               ; End ZIP_BM
	
						ResultsFileList  = FileItemize("%WorkDirCurrentBWNo%\*.pdf|%WorkDirCurrentBWNo%\*.txt")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							;########################################
							; ZIP  BWNoCarriersYYYYMMDD1000.zip and Move to Vipond Ms2kos166
							; BWYYYYMMDD1000_NE_15A.pdf
							; BWYYYYMMDD1000_NE_15A.txt
							; BWYYYYMMDD1000_NE_2A.pdf
							; BWYYYYMMDD1000_NE_2A.txt
							; BWYYYYMMDD1000_NF_15F.pdf
							; BWYYYYMMDD1000_NF_15F.txt
							; BWYYYYMMDD1000_NF_2F.pdf
							; BWYYYYMMDD1000_NF_2F.txt
							; BWNoCarriersYYYYMMDD1000_Control.ctl
							;########################################
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
	
							if ech_
								ZipFolderExe("%WorkDirCurrentBWNo%\*.*", "%WorkDirCurrent%\%Type%NoCarriers%ZipFileDate%%Time%_Ech.zip")
							else
								ZipFolderExe("%WorkDirCurrentBWNo%\*.*", "%WorkDirCurrent%\%Type%NoCarriers%ZipFileDate%%Time%.zip")
							Endif
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						FileCopyWithLog("%WorkDirCurrent%\*.ZIP", SFTP_VIPOND_DIR)
					EndIf                                                                                  ; End ZIP_BW
	
					;########################################
					; Move to MTL CAA Mt2kos55 
					; CAA_RRD_FirstBill_101A_YYYYMMDD(AAAAMMJJ)(BM ou BW).pdf
					; CAA_RRD_FirstBill_101F_YYYYMMDD(AAAAMMJJ)(BM ou BW).pdf
					; CAA_RRD_FirstBill_9A_YYYYMMDD(AAAAMMJJ)(BM ou BW).pdf
					; CAA_RRD_FirstBill_9F_YYYYMMDD(AAAAMMJJ)(BM ou BW).pdf
					;########################################
	
					;########################################
					; Move to MTL CAA Mt2kos55 
					; CAA_RRD_ThirdBill_300A_YYYYMMDD(AAAAMMJJ).pdf
					; CAA_RRD_ThirdBill_300F_YYYYMMDD(AAAAMMJJ).pdf
					;########################################
					FileCopyWithLog("%WorkDirCurrentPrint%\*.Pdf", PRINT_DIR)
				EndIf                                                                                     ; End If ErrorCount == 0
	
	
				;If ErrorCount == 0 && PRODUCE_CAA_FILES_ON_OFF == 1
				If PRODUCE_CAA_FILES_ON_OFF == 1
					tmp_File=FileRoot(FileName)
					if ech_
						ZipOutPutName="%tmp_File%_%DirTimeStamp%_Archive_Ech.zip"
				   else
						ZipOutPutName="%tmp_File%_%DirTimeStamp%_Archive.zip"
					endif
					LogInfo("Start Packaging CAA files [%ZipOutPutName%]")
	 
					If ZIP_BM
						ResultsFileList  = FileItemize("%WorkDirCurrentBM%\*.pdf|%WorkDirCurrentBM%\*.txt")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							;########################################
							; ZIP  BMYYYYMMDD1000.zip and Move to Vipond Ms2kos166 
							; BMYYYYMMDD1000_CE.pdf
							; BMYYYYMMDD1000_CE.txt
							; BMYYYYMMDD1000_CF.pdf
							; BMYYYYMMDD1000_CF.txt
							; BMYYYYMMDD1000_Control.ctl
							;########################################
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentBM%\*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						ResultsFileList  = FileItemize("%WorkDirCurrentPrint%\*.*")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentPrint%\*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						ResultsFileList  = FileItemize("%WorkDirCurrentWork%\*950*.*")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentWork%\*950*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						FileCopyWithLog("%WorkDirCurrent%\%ZipOutPutName%", SFTP_CAA_DIR)
					EndIf                                                                                  ; ZIP_BM
	
					If ZIP_BW
						ResultsFileList  = FileItemize("%WorkDirCurrentBW%\*.pdf|%WorkDirCurrentBW%\*.txt")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							;########################################
							; ZIP  _BWYYYYMMDD1000.zip and Move to Vipond Ms2kos166
							; BWYYYYMMDD1000_CE.pdf
							; BWYYYYMMDD1000_CE.txt
							; BWYYYYMMDD1000_CF.pdf
							; BWYYYYMMDD1000_CF.txt
							; BWYYYYMMDD1000_KE.pdf
							; BWYYYYMMDD1000_KE.txt
							; BWYYYYMMDD1000_KF.pdf
							; BWYYYYMMDD1000_KF.txt
							; BWYYYYMMDD1000_Control.ctl
							;########################################
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentBW%\*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP
						EndIf                                                                               ; End ZIP_BM
	
						ResultsFileList  = FileItemize("%WorkDirCurrentBWNo%\*.pdf|%WorkDirCurrentBWNo%\*.txt")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							;########################################
							; ZIP  BWNoCarriersYYYYMMDD1000.zip and Move to Vipond Ms2kos166
							; BWYYYYMMDD1000_NE_15A.pdf
							; BWYYYYMMDD1000_NE_15A.txt
							; BWYYYYMMDD1000_NE_2A.pdf
							; BWYYYYMMDD1000_NE_2A.txt
							; BWYYYYMMDD1000_NF_15F.pdf
							; BWYYYYMMDD1000_NF_15F.txt
							; BWYYYYMMDD1000_NF_2F.pdf
							; BWYYYYMMDD1000_NF_2F.txt
							; BWNoCarriersYYYYMMDD1000_Control.ctl
							;########################################
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentBWNo%\*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						ResultsFileList  = FileItemize("%WorkDirCurrentPrint%\*.*")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentPrint%\*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						ResultsFileList  = FileItemize("%WorkDirCurrentWork%\*12-16-20-30_SC*.*")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
						If ResultsFileCount > 0
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentWork%\*12-16-20-30_SC*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						FileCopyWithLog("%WorkDirCurrent%\%ZipOutPutName%", SFTP_CAA_DIR)
					EndIf                                                                                  ; End ZIP_BW
	
					If ZIP_B3
						ResultsFileList  = FileItemize("%WorkDirCurrentPrint%\*.*")
						ResultsFileCount = ItemCount(ResultsFileList, @TAB)
	
						If ResultsFileCount > 0
							LOG_FILE_TEMP = LOG_FILE 
							LOG_FILE = "%LOG_DIR%\%LOG_FILE_TEMP%" 
							ZipFolderExe("%WorkDirCurrentPrint%\*.*", "%WorkDirCurrent%\%ZipOutPutName%")
							LOG_FILE  = LOG_FILE_TEMP 
						EndIf
	
						FileCopyWithLog("%WorkDirCurrent%\%ZipOutPutName%", SFTP_CAA_DIR)
					EndIf
	
					LogInfo("End  Packaging CAA files [%ZipOutPutName%]") 
				EndIf
	
				LogInfo("End  Packaging results and dispatch") 
	
				;########################################
				;Email files received
				;########################################
	
				If EMAIL_ON_OFF == 0
					LogInfo("EMAIL_ON_OFF = [%EMAIL_ON_OFF%]")
				Else
					If ErrorCount != 0
						LogInfo("[%PDFFileCount%] file(s) found for Spooling")
						Msg = "Job Error / Tâche avec erreur"
						LogInfo(Msg)
						EMAIL_SUBJECT = "%EMAIL_SUBJECT_MAIN% | Job Error / Tâche avec erreur"
						EMAIL_ATTACHMENT = ""
						EMAIL_BODY = StrCat(Msg, @CRLF, @CRLF, ErrorMsg, @CRLF, @CRLF, EMAIL_SIGNATURE, @CRLF, EMAIL_TEL, @CRLF, @CRLF, EMAIL_NOTIFICATION)
						SendMessage(EMAIL_DIR, EMAIL_FROM, EMAIL_REPORT_TO, "", EMAIL_SUBJECT, EMAIL_BODY, EMAIL_ATTACHMENT, "")
					Else 
						Msg = "Job successfull / Tâche complétée avec succès"
						LogInfo(Msg)
						EMAIL_SUBJECT = "%EMAIL_SUBJECT_MAIN% | Job successfull / Tâche complétée avec succès"
						EMAIL_ATTACHMENT = ""
						EMAIL_BODY = StrCat(Msg, @CRLF, @CRLF, ReceivedFiles, @CRLF, @CRLF, ReportFilesMsg, @CRLF, @CRLF, EMAIL_SIGNATURE, @CRLF, EMAIL_TEL, @CRLF, @CRLF, EMAIL_NOTIFICATION)
						SendMessage(EMAIL_DIR, EMAIL_FROM, EMAIL_REPORT_TO, "", EMAIL_SUBJECT, EMAIL_BODY, EMAIL_ATTACHMENT, "")
					EndIf
				EndIf   
			Next                                                                                         ; For IdxZIP = 1 To FileCount

		EndIf                                                                                           ; End If FileCount > 0 
	EndIf                                                                                              ;EndIf If ErrorCount == 0

Msg = "END %ServiceName%"
wntEventWrite("", ServiceName, 262144, 15000, Msg)
LogInfo(Msg)
Log("-----------------------------------------------------------------------------------------------------------------------")

IntControl(1000, ErrorCount, 0, 0, 0)
Exclusive(@Off)


